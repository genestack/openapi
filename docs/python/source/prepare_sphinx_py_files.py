#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import os
import re
import glob
import argparse


PYTHON_INDENT = '    '
REGEX_SUBSECTION_NAME = r'[A-Z].*?(?=[*A-Z])'


def prettify_docstrings(input_filename):
    with open(input_filename, 'r') as input_file:
        input_text = input_file.readlines()

    output_text = []
    is_within_docstring = False
    for row in input_text:
        indent = re.match(r"[ \t]*", row).group()
        text = row.strip()

        if re.match(r'.*""".*""".*', text):
            # One line docstring
            output_text.append(process_row_within_docstring(indent, text))
        elif '"""' in text:
            if not is_within_docstring:
                # Start of docstring
                is_within_docstring = True
                output_text.append(process_row_within_docstring(indent, text))
            else:
                # End of docstring
                output_text.append(process_row_within_docstring(indent, text))
                is_within_docstring = False
        else:
            if is_within_docstring:
                output_text.append(process_row_within_docstring(indent, text))
            else:
                output_text.append(indent + text) # to join them with \n further

    with open(input_filename, 'w') as output_file:
        output_file.writelines('\n'.join(output_text))


def process_row_within_docstring(indent, text):
    processed = re.sub(r'`', r'``', text)
    processed = re.sub(r'__', r'**', processed)

    if '##' in processed:
        # Need to insert sections
        output_text = []

        subrows = processed.split('## ')
        if not processed.startswith('##'):
            # Add first subrow as is
            output_text.append(indent + subrows[0])

        if processed.startswith(':param'):
            # Increase indentation for the further rows
            param_section = re.match(r':.*?: ', processed).group()
            param_indent = ' ' * len(param_section)
            indent = indent + param_indent
            output_text[-1] = output_text[-1] + '\n'

        for subrow in subrows[1:]:
            output_text.append(process_section(indent, subrow))

        return '\n'.join(output_text)
    else:
        return indent + processed


def process_section(indent, subrow):
    return indent + re.sub(REGEX_SUBSECTION_NAME,
                           lambda match: ('**%s**\n\n' % match.group().strip()) + indent + PYTHON_INDENT,
                           subrow, 1) + '\n'


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--client-folder', type=str,
                        help='Path to client generated by swagger, docstrings in .py files will be modified')
    args = parser.parse_args()

    client_folder = os.path.abspath(args.client_folder)
    main_files = glob.glob(os.path.join(client_folder, '*.py'))
    api_files = glob.glob(os.path.join(client_folder, 'api', '*.py'))
    models_files = glob.glob(os.path.join(client_folder, 'models', '*.py'))

    for filename in main_files + api_files + models_files:
        prettify_docstrings(os.path.join(client_folder, filename))
