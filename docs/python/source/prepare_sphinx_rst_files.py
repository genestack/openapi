#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import argparse
import pypandoc


INDEX_RST_FILENAME = 'index.rst'
API_RST_FILENAME = '{package}.api.rst'
MODELS_RST_FILENAME = '{package}.models.rst'

REGEX_HEADER = r'^.*\s(=*)(?=\s)'
REGEX_SUBMODULES = r'\sSubmodules\s----------\s'
REGEX_MODULE_CONTENT_SECTION = r'\sModule contents(.|\s)*$'
REGEX_API_PREFIX = r'{package}\.api\.'
REGEX_MODELS_PREFIX = r'{package}\.models\.'
REGEX_MODULE = r' module'
REGEX_S_PO_T = r's\\_po\\_t'
REGEX_FACS_DESCRIPTION = r'\\_fluorescence\\_activated\\_cell\\_sorting\\_'

NEW_INDEX_HEADER = 'Welcome to Genestack Client Library\'s documentation!\n' \
                   '========================================================='
NEW_API_HEADER = 'Documentation for API Endpoints\n' \
                 '==============================='
NEW_MODELS_HEADER = 'Documentation For Models\n' \
                    '========================'

NEW_MODULE_HEADER = 'Documentation \n' \
                    '========================'

SPHINX_HEADER = '''

.. toctree::
   :maxdepth: 3

   {package}.api
   {package}.models

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
'''


def create_index_from_readme(readme_filename, index_filename, package):
    readme_text = pypandoc.convert_file(readme_filename, 'rst')
    readme_text = re.sub(REGEX_HEADER, NEW_INDEX_HEADER, readme_text)
    index_text = readme_text + SPHINX_HEADER.format(package=package)

    with open(index_filename, 'wb') as index_file:
        index_file.write(index_text.encode('utf-8'))


def prettify_api_rst_file(api_rst_filename):
    with open(api_rst_filename, 'r') as rst_file:
        text = rst_file.read()

    text = prettify_common_rst_text(text)
    text = re.sub(REGEX_HEADER, NEW_API_HEADER, text)
    text = re.sub(REGEX_S_PO_T, 'spot', text)
    text = re.sub(REGEX_FACS_DESCRIPTION, '', text)

    with open(api_rst_filename, 'w') as api_rst_file:
        api_rst_file.write(text)


def prettify_models_rst_file(models_rst_filename):
    with open(models_rst_filename, 'r') as rst_file:
        text = rst_file.read()

    text = prettify_common_rst_text(text)
    text = re.sub(REGEX_HEADER, NEW_MODELS_HEADER, text)

    with open(models_rst_filename, 'w') as models_rst_file:
        models_rst_file.write(text)


def prettify_common_rst_text(text):
    text = re.sub(REGEX_SUBMODULES, '', text)
    text = re.sub(REGEX_MODULE_CONTENT_SECTION, '', text)
    text = re.sub(REGEX_MODULE, '', text)
    return text


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--package', dest='package', type=str,
                        help='Package name')
    parser.add_argument('--readme', dest='readme_filename', type=str,
                        help='Path to README.md generated by swagger, this file is used to create index.rst')
    parser.add_argument('--sphinx-folder', dest='sphinx_folder', type=str,
                        help='Path to sphinx directory')
    args = parser.parse_args()

    create_index_from_readme(args.readme_filename, os.path.join(args.sphinx_folder, INDEX_RST_FILENAME), args.package)

    package_exp = args.package.replace('_', r'\\_')

    api_rst_filename = API_RST_FILENAME.format(package=args.package)
    prettify_api_rst_file(os.path.join(args.sphinx_folder, api_rst_filename))

    models_rst_filename = MODELS_RST_FILENAME.format(package=args.package)
    prettify_models_rst_file(os.path.join(args.sphinx_folder, models_rst_filename))
