{{>partial_header}}

ApiClient  <- R6::R6Class(
  'ApiClient',
  public = list(
    host = NULL,
    token = NULL,
    scheme = 'https',
    version = '{{version}}',
    basePath = NULL,
    defaultHeaders = NULL,
    userAgent = NULL,
    accessToken = NULL,
    initialize = function(host = NULL, token = NULL, scheme = NULL, version = NULL, accessToken = NULL){
        envHost = private$readParameterFromEnv('PRED_SPOT_HOST')
        envToken = private$readParameterFromEnv('PRED_SPOT_TOKEN')
        envAccessToken = private$readParameterFromEnv('PRED_SPOT_ACCESS_TOKEN')
        envScheme = private$readParameterFromEnv('PRED_SPOT_SCHEME')
        envVersion = private$readParameterFromEnv('PRED_SPOT_VERSION')

        if (!missing(host)) {
            self$host <- host
        } else if (!is.null(envHost)) {
            self$host <- envHost
        } else {
            stop('Host not given explicitly or via environment variable!')
        }

        if (!missing(accessToken)) {
            self$accessToken <- accessToken
        } else if (!is.null(envAccessToken)) {
            self$accessToken <- envAccessToken
        }

        if (!missing(token)) {
            self$token <- token
        } else if (!is.null(envToken)) {
            self$token <- envToken
        } else if (is.null(self$accessToken)) {
            stop('Genestack API Token or OAuth2 Access Token are not given explicitly or via environment variable!')
        }

        if (!missing(scheme)) {
            self$scheme <- scheme
        } else if (!is.null(envScheme)) {
            self$scheme <- envScheme
        }

        if (!missing(version)) {
            self$version <- version
        } else if (!is.null(envVersion)) {
            self$version <- envVersion
        }

        self$basePath <- sprintf('%s://%s/frontend/rs/genestack/{{packageName}}/%s',
            self$scheme,
            self$host,
            self$version
        )

        self$defaultHeaders <- c(
            'Content-Type' = 'application/json',
            'Accept-Encoding' = 'gzip, deflate'
        )
        if (!is.null(self$accessToken)) {
            self$defaultHeaders <- c(self$defaultHeaders, 'Authorization' = paste('Bearer', self$accessToken))
        } else {
            self$defaultHeaders <- c(self$defaultHeaders, 'Genestack-API-Token' = self$token)
        }

        self$`userAgent` <- '{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}'
    },
    callApi = function(url, method, queryParams, headerParams, body, ...){
        allHeaderParams = c(self$defaultHeaders, headerParams)
        headers <- httr::add_headers(allHeaderParams)

        if (method == "GET") {
            httr::GET(url, headers, query = queryParams,...)
        }
        else if (method == "POST") {
            httr::POST(url, headers, query = queryParams, body = body, ...)
        }
        else if (method == "PUT") {
            httr::PUT(url, headers, query = queryParams, body = body, ...)
        }
        else if (method == "PATCH") {
            httr::PATCH(url, headers, query = queryParams, body = body, ...)
        }
        else if (method == "HEAD") {
            httr::HEAD(url, headers, query = queryParams, ...)
        }
        else if (method == "DELETE") {
            httr::DELETE(url, headers, query = queryParams, ...)
        }
        else {
            stop("http method must be `GET`, `HEAD`, `OPTIONS`, `POST`, `PATCH`, `PUT` or `DELETE`.")
        }
    }
  ),
  private = list(
    readParameterFromEnv = function(name) {
        envVar = Sys.getenv(name)
        if (envVar == '') {
            return(NULL)
        }
        return(envVar)
    }
  )
)
