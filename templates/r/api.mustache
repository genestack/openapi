{{>partial_header}}
{{#operations}}
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
    apiClient = NULL,
    initialize = function(apiClient){
      if (!missing(apiClient)) {
        self$apiClient <- apiClient
      }
      else {
        self$apiClient <- ApiClient$new()
      }
    },
    {{#operation}}
    {{operationId}} = function({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}){
      queryParams <- list()
      headerParams <- character()

      {{#hasHeaderParams}}
      {{#headerParams}}
      if (!missing(`{{paramName}}`)) {
        headerParams['{{baseName}}'] <- `{{paramName}}`
      }

      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#hasQueryParams}}
      {{#queryParams}}
      if (!missing(`{{paramName}}`)) {
        queryParams['{{baseName}}'] <- {{paramName}}
      }

      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
          {{^isFile}}
          "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
          {{/isFile}}
          {{#isFile}}
          "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
          {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{paramName}}`)) {
        body <- `{{paramName}}`$toJSONString()
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      {{^hasBodyParam}}
      body <- NULL
      {{/hasBodyParam}}
      urlPath <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{paramName}}`)) {
        urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{paramName}}`, urlPath)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      resp <- self$apiClient$callApi(url = paste0(self$apiClient$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body
                                 )

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}}
        json <- httr::content(resp, "text", encoding = "UTF-8")
        if (json == "") {
          responseObject <- NULL
        } else {
          responseObject <- tryCatch(jsonlite::fromJSON(json), error=function(cond) { return(NULL) })
        }
        Response$new(responseObject, json, resp)
        {{/returnType}}
        {{^returnType}}
        # void response, no need to return anything
        {{/returnType}}
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        Response$new("API client error", "null", resp)
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        Response$new("API server error", "null", resp)
      }

    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)

{{#operation}}
#' {{summary}}
#'
{{#allParams}}
#' @param {{paramName}} {{#description}}{{{description}}}{{/description}}
{{/allParams}}
#'
#' @export {{classname}}_{{operationId}}
#'
{{classname}}_{{operationId}} <- function({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {
  {{classname}}$new()${{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
}

{{/operation}}
{{/operations}}
