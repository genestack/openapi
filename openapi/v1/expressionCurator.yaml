openapi: 3.1.0
info:
  description: |-
    This swagger page describes the expressionCurator APIs.

    Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software.

    To try out calls in this swagger page:

    1. Click the 'Authorize' button below to enter your API token
    2. Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button
    3. Enter parameter values that you wish to try
    4. Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears

    The server response will be in the section that follows.
  title: ODM API
  version: default-released
tags:
- name: Expression SPoT as Curator
paths:
  /frontend/rs/genestack/expressionCurator/default-released/expression:
    get:
      description: |+
        Retrieve all expression data and metadata objects that match a query.

        ## Metadata full-text queries
        Single words can be supplied as is, otherwise use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: getExpressionDataAsCurator
      parameters:
      - description: |-
          Allows to get an extended or updated response body. Available values:
           `term_id` - returns extended information including IDs for values and dictionaries;
           `multi_values` - returns data with several feature attributes and several sample measurements in the response body in case the original data had them. If not specified, returns only the first feature identifier and the first measurement per sample from the original data.
        explode: true
        in: query
        name: responseFormat
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by expression metadata (key-value metadata pair(s)). E.g.
          `"Normalization Method"=TPM`. Retrieving individual runs via "Run Source
          ID"="HG00096"  will be deprecated after June 2023
        in: query
        name: filter
        schema:
          type: string
      - description: Search for expression objects via a full text query over all
          expression metadata. E.g. `TPM`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf" in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Genestack accession that corresponds to the gct column used to
          link expression data from the same run to a sample.
        in: query
        name: runFilter
        schema:
          type: string
      - description: Minimum threshold (inclusive) for returned expression values.
        in: query
        name: minExpressionLevel
        schema:
          format: double
          type: number
      - description: "List of features to return. These features must match exactly\
          \ the probe IDs in the GCT file. Example: `1552269_at`"
        explode: true
        in: query
        name: featureList
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionResponse"
          description: Retrieved Expression data.
        "400":
          content: {}
          description: Expression data cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve multiple expression data and metadata objects
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/atomic:
    post:
      description: |-
        ## Data
         This operation requires the URL of a signal data  file, for example a GCT, VCF or Flow Cytometry file. The required form of this file depends  on the specific SPoT.

         ## Metadata
         It is also possible to optionally supply the URL of a metadata file. This  metadata will be used as the original metadata for the created objects. The  file is expected to contain single record with metadata describing the uploaded signal file.
         ## Metadata file format
         * Extension: any, `.zip` and `.gz` extensions are treated as archives and get decompressed
         * Format: plain text, Tab-separated format (TSV), attribute names and record values are separated  with tabs (`U+0009`),  lines are separated with `CRLF` sequence (`U+000D U+000A`)
         * Header: the first line is treated as table header that contains attribute names
         * Records: the second line contains the values for each of the attributes described in the header line.  Values represent single string or list of strings. List values are separated  using the "pipe" `|` (`U+007C`)  separator. Values are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`) character may be escaped by repeating it twice.
         ## File sources
         * Supported external sources (links): `http`/`https`/`ftp`
      operationId: addAtomicExpressionAsCurator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtomicExpressionSource"
        description: |-
          ## Data

          See the AtomicExpressionSource model for details of the data fields.

          ## Metadata

          The supplied metadata object must be a JSON _object_ with non-empty strings as keys. These are interpreted as attribute names. The values should be either scalar JSON values (null, boolean, number or string), or an type-homogenous array of scalar values.
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionItem"
          description: The objects were successfully created. The returned value is
            a list of created objects.
        "400":
          content: {}
          description: The object cannot be created. This error occurs when the supplied
            data or metadata are incorrect. Please see error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a single new object from a given data file with optional supplied
        metadata.
      tags:
      - Expression SPoT as Curator
      x-codegen-request-body-name: source
  /frontend/rs/genestack/expressionCurator/default-released/expression/atomic/{id}:
    delete:
      operationId: deleteExpressionAtomicAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The object has been successfully deleted. No data is returned.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete the object
      tags:
      - Expression SPoT as Curator
    patch:
      description: |-
        ## Basic operation
        The object metadata is updated using the supplied map of attribute names to attribute values. There are three cases:
        1. The attribute name does not already exist in the object metadata. In this case, the attribute and value are added to the object metadata.
        2. The attribute name already exists in the object metadata. In this case, the value is updated.
        3. The attribute value is `null`.In this case, the attribute is removed from the object metadata.

        ## Attribute values
        The attribute values are intelligently parsed as booleans, integers, etc.
      operationId: updateExpressionAtomicMetadataAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataContent"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: The supplied object ID or metadata is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Update object metadata
      tags:
      - Expression SPoT as Curator
      x-codegen-request-body-name: body
  /frontend/rs/genestack/expressionCurator/default-released/expression/gct:
    post:
      description: "## Data\n This operation necessitates the URL of a tabular data\
        \ file, which must be either in TSV or GCT 1.2 format. Consult the user guide\
        \ for a comprehensive understanding of the file content requirements. The\
        \ endpoint is capable of handling uploads of any data type, which can be detailed\
        \ in the parameters section, not only Gene Expression data.\n\n ## Metadata\n\
        \ It is also possible to optionally supply the URL of a metadata file. This\
        \  metadata will be used as the original metadata for the created objects.\
        \ The  file is expected to contain single record with metadata describing\
        \ the uploaded signal file.\n ## Metadata file format\n * Extension: any,\
        \ `.zip` and `.gz` extensions are treated as archives and get decompressed\n\
        \ * Format: plain text, Tab-separated format (TSV), attribute names and record\
        \ values are separated  with tabs (`U+0009`),  lines are separated with `CRLF`\
        \ sequence (`U+000D U+000A`)\n * Header: the first line is treated as table\
        \ header that contains attribute names\n * Records: the second line contains\
        \ the values for each of the attributes described in the header line.  Values\
        \ represent single string or list of strings. List values are separated  using\
        \ the \"pipe\" `|` (`U+007C`)  separator. Values are trimmed of whitespace\
        \ before parsing, and a literal `|`  (`U+007C`) character may be escaped by\
        \ repeating it twice.\n * Skip zeros in original data file: If this option\
        \ is selected, zeros in the file will be ignored, thus conserving time and\
        \ space. This option is particularly useful for handling very sparse data\
        \ such as Single Cell data. \n ## File sources\n * Supported external sources\
        \ (links): `http`/`https`/`ftp`"
      operationId: addExpressionAsCurator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignalSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsResponse"
          description: The objects were successfully created. The returned value is
            a list of created objects.
        "400":
          content: {}
          description: The object cannot be created. This error occurs when the supplied
            data or metadata are incorrect. Please see error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create multiple new objects from a multi-row data file with optional
        supplied metadata
      tags:
      - Expression SPoT as Curator
      x-codegen-request-body-name: source
  /frontend/rs/genestack/expressionCurator/default-released/expression/group:
    get:
      description: |-
        Retrieve all group metadata objects that match a query.

        ## Metadata full-text queries
        Single words can be supplied as is, otherwise use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n*pageLimit` until the `resultsExhausted` response field is true.

        ## List operation

        This endpoint can be called with no `query` parameter. Doing so returns a list of all data objects.
      operationId: searchExpressionGroupsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by expression metadata (key-value metadata pair(s)). E.g.
          `"Normalization Method"=TPM`. Retrieving individual runs via "Run Source
          ID"="HG00096"  will be deprecated after June 2023
        in: query
        name: filter
        schema:
          type: string
      - description: Search for expression objects via a full text query over all
          expression metadata. E.g. `TPM`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf" in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve groups that match a query
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/group/by/run/{id}:
    get:
      operationId: getExpressionGroupByRunAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single group object by run ID (accession)
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/group/{id}:
    delete:
      operationId: deleteExpressionGroupAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The object has been successfully deleted. No data is returned.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete the object
      tags:
      - Expression SPoT as Curator
    get:
      operationId: getExpressionGroupAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single group object by ID (accession)
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/group/{id}/curation:
    get:
      operationId: getExpressionGroupCurationStatusAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurationSource"
          description: successful operation
        "204":
          content: {}
          description: The request was successful. The returned value is the object.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Get curation status of a group by ID (accession)
      tags:
      - Expression SPoT as Curator
    patch:
      operationId: updateExpressionGroupAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurationSource"
        description: |+
          ## Data

          See CurationSource model for details of the data fields.

        required: false
      responses:
        "200":
          content: {}
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Set curation status of a group by ID (accession)
      tags:
      - Expression SPoT as Curator
      x-codegen-request-body-name: body
  /frontend/rs/genestack/expressionCurator/default-released/expression/runs/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: searchExpressionRunsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve run objects related to the given group
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/{id}:
    get:
      operationId: getExpressionAsCurator
      parameters:
      - description: |-
          Allows to get an extended or updated response body. Available values:
           `term_id` - returns extended information including IDs for values and dictionaries;
           `multi_values` - returns data with several feature attributes and several sample measurements in the response body in case the original data had them. If not specified, returns only the first feature identifier and the first measurement per sample from the original data.
        explode: true
        in: query
        name: responseFormat
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionItem"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single expression object by ID (accession)
      tags:
      - Expression SPoT as Curator
    patch:
      description: |-
        ## Basic operation
        The object metadata is updated using the supplied map of attribute names to attribute values. There are three cases:
        1. The attribute name does not already exist in the object metadata. In this case, the attribute and value are added to the object metadata.
        2. The attribute name already exists in the object metadata. In this case, the value is updated.
        3. The attribute value is `null`.In this case, the attribute is removed from the object metadata.

        ## Attribute values
        The attribute values are intelligently parsed as booleans, integers, etc.
      operationId: updateExpressionRunAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: The supplied object ID or metadata is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Update object metadata
      tags:
      - Expression SPoT as Curator
      x-codegen-request-body-name: body
  /frontend/rs/genestack/expressionCurator/default-released/expression/{id}/versions:
    get:
      operationId: getExpressionVersionsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: array
          description: The request was successful. The returned value is the list
            of  object versions.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a list of object versions by ID
      tags:
      - Expression SPoT as Curator
  /frontend/rs/genestack/expressionCurator/default-released/expression/{id}/versions/{version}:
    get:
      operationId: getExpressionByVersionAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Unique version of the object.
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesnâ€™t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single expression object by ID (accession)
      tags:
      - Expression SPoT as Curator
components:
  schemas:
    AtomicExpressionSource:
      $ref: "./schemas/expression/AtomicExpressionSource.yaml"
    CommitInfo:
      $ref: "./schemas/common/CommitInfo.yaml"
    CurationSource:
      $ref: "./schemas/common/CurationSource.yaml"
    ExpressionItem:
      $ref: "./schemas/expression/ExpressionItem.yaml"
    ExpressionResponse:
      $ref: "./schemas/expression/ExpressionResponse.yaml"
    IntegrationHelper:
      $ref: "./schemas/common/IntegrationHelper.yaml"
    JsonMetadata:
      $ref: "./schemas/common/JsonMetadata.yaml"
    ListResponse:
      $ref: "./schemas/common/ListResponse.yaml"
    MetaResponse:
      $ref: "./schemas/common/MetaResponse.yaml"
    MetadataContent:
      $ref: "./schemas/common/MetadataContent.yaml"
    MetadataWithId:
      $ref: "./schemas/common/MetadataWithId.yaml"
    PaginationInfo:
      $ref: "./schemas/common/PaginationInfo.yaml"
    RunsResponse:
      $ref: "./schemas/common/RunsResponse.yaml"
    SignalRun:
      $ref: "./schemas/common/SignalRun.yaml"
    SignalSource:
      $ref: "./schemas/common/SignalSource.yaml"
  securitySchemes:
    Access-token:
      in: header
      name: Authorization
      type: apiKey
    Genestack-API-Token:
      in: header
      name: Genestack-API-Token
      type: apiKey
