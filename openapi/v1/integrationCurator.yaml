openapi: 3.1.0
info:
  description: |
    Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software.

    To try out calls in this swagger page:

    1. Click the 'Authorize' button below to enter your API token
    2. Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button
    3. Enter parameter values that you wish to try
    4. Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears

    The server response will be in the section that follows.
  title: ODM Integration API
  version: default-released
tags:
- name: Expression integration as Curator
- name: Flow Cytometry integration as Curator
- name: Library integration as Curator
- name: Linkage as Curator
- name: Metadata versioning as Curator
- name: Omics queries as Curator
- name: Preparation integration as Curator
- name: Sample integration as Curator
- name: Study integration as Curator
- name: Validation summary as Curator
- name: Variant integration as Curator
paths:
  /frontend/rs/genestack/integrationCurator/default-released/data-types:
    get:
      description: This endpoint is for instructional uses and can be used to get
        the latest list of Data Types.
      operationId: getDataTypesAsCurator
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Lists all available data types.
      tags:
      - Linkage as Curator
  /frontend/rs/genestack/integrationCurator/default-released/data-types/links:
    get:
      description: "This endpoint should be used for instructional needs, and can\
        \ be used in order to get the links between the Data Types."
      operationId: getDataTypesLinksAsCurator
      parameters:
      - description: Return only links with the specified data type.
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SourceTypePair"
                type: array
                uniqueItems: true
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: List all possible links between data types that match the specified
        criteria.
      tags:
      - Linkage as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/by/library/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionByLibraryAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve expression run-level data by querying related library ID (accession)
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/by/preparation/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionByPreparation
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve expression run-level data by querying related preparation
        ID (accession)
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/by/sample/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve expression run-level data by querying related sample ID (accession)
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/group/by/study/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

      operationId: getExpressionGroupsByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: array
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group metadata by querying study ID (accession)
      tags:
      - Expression integration as Curator
  ? /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/group/{sourceId}/to/library/group/{targetId}
  : delete:
      description: Delete link between a group of expression objects and a group of
        library objects
      operationId: deleteExpressionGroupLibraryGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the library group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of expression objects and a group of library
        objects
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between a group of expression objects and a group of library objects.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.
      operationId: createExpressionGroupLibraryGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the library group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Some (not all) sample links created.
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: "Library group, signal group or libraries to link not found"
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of expression objects and a group of
        library objects
      tags:
      - Expression integration as Curator
  ? /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/group/{sourceId}/to/preparation/group/{targetId}
  : delete:
      description: Delete link between a group of expression objects and a group of
        preparation objects
      operationId: deleteExpressionGroupPreparationGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the preparation group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of expression objects and a group of preparation
        objects
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between a group of expression objects and a group of preparation objects.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.
      operationId: createExpressionGroupPreparationGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the preparation group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Some (not all) sample links created.
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: "Preparation group, signal group or preparations to link not\
            \ found"
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of expression objects and a group of
        preparation objects
      tags:
      - Expression integration as Curator
  ? /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/group/{sourceId}/to/sample/group/{targetId}
  : delete:
      description: Delete link between a group of expression objects and a group of
        sample objects
      operationId: deleteExpressionGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of expression objects and a group of sample
        objects
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between a group of expression objects and a group of sample objects.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.

         Users can specify a custom metadata field for linking omics data to samples via the “linkingAttribute” parameter, if not specified the “Sample Source ID“ sample metadata attribute will be used by default.
      operationId: createExpressionGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to a GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      - description: Metadata field containing sample IDs to link omics data to samples.
          The template applied to the study must contain this field in the sample
          section.
        in: query
        name: linkingAttribute
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Not all signal data were linked to the samples.
        "204":
          content: {}
          description: All signal data were linked to the samples from the specified
            sample group.
        "400":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of expression objects and a group of
        sample objects
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/run-to-libraries/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionRunToLibraryPairsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-library pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/run-to-preparations/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionRunToPreparationPairsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-preparation pairs by group id. Pagination is based on\
        \ unique runs, not unique pairs."
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/run-to-samples/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getExpressionRunToSamplePairsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/{sourceId}/to/library/{targetId}:
    delete:
      description: Delete link between an expression object and a library
      operationId: deleteExpressionLibraryLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the library object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between an expression object and a library
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between an expression object and a library.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.
      operationId: createExpressionLibraryLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the library object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between an expression object and a library
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/{sourceId}/to/preparation/{targetId}:
    delete:
      description: Delete link between an expression object and a preparation
      operationId: deleteExpressionPreparationLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the preparation object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between an expression object and a preparation
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between an expression object and a preparation.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.
      operationId: createExpressionPreparationLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the preparation object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between an expression object and a preparation
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/expression/{sourceId}/to/sample/{targetId}:
    delete:
      description: Delete link between an expression object and a sample
      operationId: deleteExpressionSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between an expression object and a sample
      tags:
      - Expression integration as Curator
    post:
      description: |-
        Create a link between an expression object and a sample.

        An expression object can be linked to one object only. If an expression object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Expression objects of the same group can only be linked to objects of the same study.
      operationId: createExpressionSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between an expression object and a sample
      tags:
      - Expression integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/flow-cytometry/by/sample/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getFlowCytometryBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve flow cytometry run-level data by querying related sample ID
        (accession)
      tags:
      - Flow Cytometry integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/flow-cytometry/group/by/study/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

      operationId: getFlowCytometryGroupsByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: array
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group metadata by querying study ID (accession)
      tags:
      - Flow Cytometry integration as Curator
  ? /frontend/rs/genestack/integrationCurator/default-released/integration/link/flow-cytometry/group/{sourceId}/to/sample/group/{targetId}
  : delete:
      description: Delete link between a group of flow-cytometry objects and a group
        of sample objects
      operationId: deleteFlowCytometryGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to the column in a FACS file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of flow-cytometry objects and a group of
        sample objects
      tags:
      - Flow Cytometry integration as Curator
    post:
      description: |-
        Create a link between a group of flow-cytometry objects and a group of sample objects.

        A flow-cytometry object can be linked to one object only. If a flow-cytometry object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Flow-cytometry objects of the same group can only be linked to objects of the same study.

        Users can specify a custom metadata field for linking omics data to samples via the “linkingAttribute” parameter, if not specified the “Sample Source ID“ sample metadata attribute will be used by default.
      operationId: createFlowCytometryGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to the column in a FACS file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      - description: Metadata field containing sample IDs to link omics data to samples.
          The template applied to the study must contain this field in the sample
          section.
        in: query
        name: linkingAttribute
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Not all signal data were linked to the samples.
        "204":
          content: {}
          description: All signal data were linked to the samples from the specified
            sample group.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of flow-cytometry objects and a group
        of sample objects
      tags:
      - Flow Cytometry integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/flow-cytometry/run-to-samples/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getFlowCytometryRunToSamplePairsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - Flow Cytometry integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/flow-cytometry/{sourceId}/to/sample/{targetId}:
    delete:
      description: Delete link between a flow-cytometry object and a sample
      operationId: deleteFlowCytometrySampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level data block
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a flow-cytometry object and a sample
      tags:
      - Flow Cytometry integration as Curator
    post:
      description: |-
        Create a link between a flow-cytometry object and a sample.

        A flow-cytometry object can be linked to one object only. If a flow-cytometry object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Flow-cytometry objects of the same group can only be linked to objects of the same study.
      operationId: createFlowCytometrySampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level data block
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a flow-cytometry object and a sample
      tags:
      - Flow Cytometry integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/libraries/by/samples:
    get:
      description: |+
        Retrieve library metadata objects whose linked sample metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getLibrariesBySamplesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve library metadata by querying related samples
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/library/by/sample/{id}:
    get:
      operationId: getLibraryBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: array
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: array
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve library metadata by querying related sample ID (accession)
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/library/group/by/study/{id}:
    get:
      operationId: getLibraryGroupsByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: array
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group metadata by querying study ID (accession)
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/library/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: Delete links between samples and libraries related to the specified
        group
      operationId: deleteLibraryGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the library group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete links between samples and libraries related to the specified
        group
      tags:
      - Library integration as Curator
    post:
      description: |-
        Create links between samples and libraries.

        Library objects of the same group can only be linked to objects of the same study.
      operationId: createLibraryGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the library group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create links between samples and libraries
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/library/libraries-to-samples/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getLibraryLinksToSamplesAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library-samples pairs by group id. Pagination is based on\
        \ unique libraries, not unique pairs."
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/library/{sourceId}/to/sample/{targetId}:
    delete:
      description: Delete a link between a library and a sample
      operationId: deleteLibrarySampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the library object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete a link between a library and a sample
      tags:
      - Library integration as Curator
    post:
      description: |-
        Create a link between a library and a sample.

        Library objects of the same group can only be linked to objects of the same study.
      operationId: createLibrarySampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the library object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a library and a sample
      tags:
      - Library integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparation/by/sample/{id}:
    get:
      operationId: getPreparationBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: array
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: array
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve preparation metadata by querying related sample ID (accession)
      tags:
      - Preparation integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparation/group/by/study/{id}:
    get:
      operationId: getPreparationGroupsByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: array
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group metadata by querying study ID (accession)
      tags:
      - Preparation integration as Curator
  ? /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparation/group/{sourceId}/to/sample/group/{targetId}
  : delete:
      description: Delete links between samples and preparations related to the specified
        group
      operationId: deletePreparationGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the preparation group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete links between samples and preparations related to the specified
        group
      tags:
      - Preparation integration as Curator
    post:
      description: |-
        Create links between samples and preparations.

        Preparation objects of the same group can only be linked to objects of the same study.
      operationId: createPreparationGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the preparation group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create links between samples and preparations
      tags:
      - Preparation integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparation/preparations-to-samples/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getPreparationLinksToSamplesAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ preparations, not unique pairs."
      tags:
      - Preparation integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparation/{sourceId}/to/sample/{targetId}:
    delete:
      description: Delete a link between a preparation and a sample
      operationId: deletePreparationSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the preparation object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete a link between a preparation and a sample
      tags:
      - Preparation integration as Curator
    post:
      description: |-
        Create a link between a preparation and a sample.

        Preparation objects of the same group can only be linked to objects of the same study.
      operationId: createPreparationSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the preparation object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a preparation and a sample
      tags:
      - Preparation integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/preparations/by/samples:
    get:
      description: |+
        Retrieve preparation metadata objects whose linked sample metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getPreparationsBySamplesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve preparation metadata by querying related samples
      tags:
      - Preparation integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/sample/group/{sourceId}/to/study/{targetId}:
    delete:
      description: Delete link between a group of sample objects and a study
      operationId: deleteSampleGroupStudyLinkAsCurator
      parameters:
      - description: The ID (accession) of the sample group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the study object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of sample objects and a study
      tags:
      - Sample integration as Curator
    post:
      description: |-
        Create a link between a group of sample objects and a study.

        Sample objects of the same group can only be linked to the same study.
      operationId: createSampleGroupStudyLinkAsCurator
      parameters:
      - description: The ID (accession) of the sample group object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the study object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of sample objects and a study
      tags:
      - Sample integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/sample/{sourceId}/to/study/{targetId}:
    delete:
      description: Delete link between a sample and a study
      operationId: deleteSampleStudyLinkAsCurator
      parameters:
      - description: The ID (accession) of the sample object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the study object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a sample and a study
      tags:
      - Sample integration as Curator
    post:
      description: |-
        Create a link between a sample and a study.

        Sample objects of the same group can only be linked to the same study.
      operationId: createSampleStudyLinkAsCurator
      parameters:
      - description: The ID (accession) of the sample object
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the study object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a sample and a study
      tags:
      - Sample integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/samples/by/libraries:
    get:
      description: |+
        Retrieve sample metadata objects whose linked library metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getSamplesByLibrariesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve sample metadata by querying related libraries
      tags:
      - Sample integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/samples/by/preparations:
    get:
      description: |+
        Retrieve sample metadata objects whose linked preparation metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getSamplesByPreparationsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve sample metadata by querying related preparations
      tags:
      - Sample integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/samples/by/study/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getSamplesByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve sample metadata by querying related study ID (accession)
      tags:
      - Sample integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/studies/by/libraries:
    get:
      description: |+
        Retrieve study metadata objects whose linked library metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getStudiesByLibrariesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve study metadata objects by querying related libraries
      tags:
      - Study integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/studies/by/preparations:
    get:
      description: |+
        Retrieve study metadata objects whose linked preparation metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getStudiesByPreparationsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: filter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve study metadata objects by querying related preparations
      tags:
      - Study integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/studies/by/samples:
    get:
      description: |+
        Retrieve study metadata objects whose linked sample metadata matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getStudiesBySamplesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Filter by sample metadata (key-value metadata pair(s)). E.g.
          "Species or strain"="Homo sapiens"
        in: query
        name: filter
        schema:
          type: string
      - description: Search for study metadata objects via a full-text query over
          all sample metadata fields. E.g. "RNA-Seq of human dendritic cells". Queries
          matching dictionary terms are automatically expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve study metadata objects by querying related samples
      tags:
      - Study integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/study/by/sample/{id}:
    get:
      operationId: getStudyBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve study metadata by querying sample ID (accession)
      tags:
      - Study integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/variant/by/sample/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getVariantBySampleAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve variant run-level data by querying related sample ID (accession)
      tags:
      - Variant integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/variant/group/by/study/{id}:
    get:
      description: |+
        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

      operationId: getVariantGroupsByStudyAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: array
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group metadata by querying study ID (accession)
      tags:
      - Variant integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/variant/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: Delete link between a group of variant objects and a group of sample
        objects
      operationId: deleteVariantGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to the column in a VCF file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a group of variant objects and a group of sample
        objects
      tags:
      - Variant integration as Curator
    post:
      description: |-
        Create a link between a group of variant objects and a group of sample objects.

        A variant object can be linked to one object only. If a variant object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Variant objects of the same group can only be linked to objects of the same study.

         Users can specify a custom metadata field for linking omics data to samples via the “linkingAttribute” parameter, if not specified the “Sample Source ID“ sample metadata attribute will be used by default.
      operationId: createVariantGroupSampleGroupLinkAsCurator
      parameters:
      - description: The ID (accession) of the group of run-level objects (corresponding
          to the column in a VCF file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample group object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      - description: Metadata field containing sample IDs to link omics data to samples.
          The template applied to the study must contain this field in the sample
          section.
        in: query
        name: linkingAttribute
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Not all signal data were linked to the samples.
        "204":
          content: {}
          description: All signal data were linked to the samples from the specified
            sample group.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a group of variant objects and a group of sample
        objects
      tags:
      - Variant integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/variant/run-to-samples/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: getVariantRunToSamplePairsAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Maximum number of results to return. This value must be between
          0 and 2000 (inclusive).
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - Variant integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/link/variant/{sourceId}/to/sample/{targetId}:
    delete:
      description: Delete link between a variant object and a sample
      operationId: deleteVariantSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link deleted.
        "400":
          content: {}
          description: Link cannot be deleted.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Delete link between a variant object and a sample
      tags:
      - Variant integration as Curator
    post:
      description: |-
        Create a link between a variant object and a sample.

        A variant object can be linked to one object only. If a variant object is already linked to another object, this link will be deleted and a new link with the specified object will be created.
        Variant objects of the same group can only be linked to objects of the same study.
      operationId: createVariantSampleLinkAsCurator
      parameters:
      - description: The ID (accession) of the run-level object (corresponding to
          the column in a VCG/GCT file)
        in: path
        name: sourceId
        required: true
        schema:
          type: string
      - description: The ID (accession) of the sample object
        in: path
        name: targetId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link created.
        "400":
          content: {}
          description: Link cannot be created.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Create a link between a variant object and a sample
      tags:
      - Variant integration as Curator
  /frontend/rs/genestack/integrationCurator/default-released/integration/studies/{id}/curation-status:
    get:
      description: Use this endpoint to check the curation status of a given study.
        The endpoint will return values of 'CURATED' or 'NOT_CURATED'.
      operationId: getStudyCurationStatusAsCurator
      parameters:
      - description: The ID (accession) of the study object
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyCurationStatusResponse"
          description: Study curation status.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Check the curation status of a study.
      tags:
      - Study integration as Curator
    patch:
      description: Use this endpoint to change the curation status of a given study.
        Note the study and all associated objects must have valid metadata according
        to the applied template before curation status can be set to 'CURATED. If
        any invalid metadata is present the status will remain 'NOT_CURATED'
      operationId: changeStudyCurationStatusAsCurator
      parameters:
      - description: The ID (accession) of the study object
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyCurationStatusUpdateRequest"
        description: Curation status of a study.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyCurationStatusResponse"
          description: Study curation status.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Change curation status of a study.
      tags:
      - Study integration as Curator
      x-codegen-request-body-name: body
  /frontend/rs/genestack/integrationCurator/default-released/integration/fulltext/search/studies:
    post:
      description: |-
        Find studies and retrieve their data by searching via a full-text or facets search of study or linked objects metadata (e.g. samples, libraries, preparations, omics metadata).  Only studies available to a user are returned.

         The endpoint returns:
         - a list of studies with their metadata summary
         - a list of facet objects with counts; the facet list can be configured in the "Study Browser" application using the "Configure facets" option (by a user with appropriate permissions). For each facet object only the first 5 most popular values are returned, these are sorted by the number of matching studies in descending order.  Only studies available to the user are counted.
      operationId: searchStudiesByFilterAsCurator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStudyRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindObjectsResponse"
          description: The request was successful. Retrieved studies and filters
        "400":
          content: {}
          description: Invalid request body
        "401":
          content: {}
          description: User is not authenticated. Please supply a valid Genestack
            API token in the `Genestack-API-Token` HTTP header (this token may be
            obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      summary: Find and retrieve studies via full-text or facet query
      tags:
      - Study integration as Curator
      x-codegen-request-body-name: request
  /frontend/rs/genestack/integrationCurator/default-released/links:
    delete:
      description: "This method should be used in case you want to delete the links\
        \ of an object. Please, keep in mind that deleting a link between Study and\
        \ Sample will not delete a link between corresponding Sample and it’s signal."
      operationId: deleteLinkAsCurator
      parameters:
      - description: Object ID (accession) (e.g. accession of study)
        in: query
        name: firstId
        required: true
        schema:
          type: string
      - description: Type of the object (e.g. study)
        in: query
        name: firstType
        schema:
          type: string
      - description: Object ID (accession) (e.g. accession of study)
        in: query
        name: secondId
        required: true
        schema:
          type: string
      - description: Type of the object (e.g. study)
        in: query
        name: secondType
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Link has been successfully deleted.
        "400":
          content: {}
          description: Invalid data in request.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No links were found.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Deletes existing links matching the specified criteria.
      tags:
      - Linkage as Curator
    get:
      description: Please make sure that this endpoint should be used only for getting
        all links to a specific object. In case you specify both firstId and secondId
        an expected answer would be true for existing links and false for no link
        between the objects.
      operationId: getLinksByParamsAsCurator
      parameters:
      - description: Object ID (accession) (e.g. accession of study)
        in: query
        name: firstId
        required: true
        schema:
          type: string
      - description: Type of the object (e.g. study)
        in: query
        name: firstType
        schema:
          type: string
      - description: Object ID (accession) (e.g. accession of study)
        in: query
        name: secondId
        schema:
          type: string
      - description: Type of the object (e.g. study)
        in: query
        name: secondType
        schema:
          type: string
      - description: Param says to skip that many links before beginning to return
          links.
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: Param says to limit the count of returned links.
        in: query
        name: limit
        schema:
          default: 1000
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Finds existing links matching the specified criteria.
      tags:
      - Linkage as Curator
    post:
      description: "This method should be used only in case you need to create links\
        \ between 2 objects. Links are created both ways (e.g. when linking Object\
        \ A to Object B it can be done both ways, by linking firstType to secondType\
        \ and vice versa)."
      operationId: saveLinksAsCurator
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/Link"
              type: array
        required: false
      responses:
        "200":
          content: {}
          description: Links were updated or not modified.
        "201":
          content: {}
          description: At least one new link has been created.Some other links might
            have been updated or not modified.
        "400":
          content: {}
          description: Invalid data in request.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "409":
          content: {}
          description: Link cannot be created due to conflict with existing link
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Creates new links between objects.
      tags:
      - Linkage as Curator
      x-codegen-request-body-name: links
  /frontend/rs/genestack/integrationCurator/default-released/links/get-batch:
    post:
      description: Please make sure to use that endpoint for batch calls only. You
        are not allowed to pass 'mixed' objects. e.g. Studies and Samples at the same
        time. Please always specify firstType.
      operationId: getLinksByIdsAsCurator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOfIds"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: Entities cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Finds existing links by passing many IDs. \nPagination goes through\
        \ all links matched the criteria."
      tags:
      - Linkage as Curator
      x-codegen-request-body-name: request
  /frontend/rs/genestack/integrationCurator/default-released/omics/expression/data:
    get:
      description: "Retrieve any data objects whose linked data matches all supplied\
        \ conditions. \n\nNote: An expression data query must be supplied.\n\n## Conditions\n\
        It is possible to supply conditions for:\n\n1. Samples (full-text or metadata\
        \ key-value pair)\n2. Parent studies (full-text or metadata key-value pair)\n\
        3. Linked variant objects (list of data key-value pairs)\n4. Linked flow cytometry\
        \ objects (list of data key-value pairs)\n5. Linked any data (except variant\
        \ and flow cytometry) objects (list of data key-value pairs)\n\n## Metadata\
        \ full-text queries\nSingle words can be supplied as is; otherwise, use speech\
        \ marks (`\"`) to quote queries that include whitespace. Speech marks and\
        \ backslash characters in the query need to be escaped with a backslash (`\\\
        `).\n\n## Metadata filters\nMetadata filters are key-value pairs joined by\
        \ an operator. The `=` operator matches literal values/string. The `!=` operator\
        \ matches anything except the literal value/string. The `<` or `>` operators\
        \ match numerical results that are less or greater than the supplied value.\
        \ Strings containing whitespace need to be quoted with (`\"`).\n\n## Data\
        \ queries\nData queries must be a list of key-value pairs, separated by whitespace.\
        \ The set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: searchExpressionDataAsCurator
      parameters:
      - description: |-
          Allows to get an extended or updated response body. Available values:
           `term_id` - returns extended information including IDs for values and dictionaries;
           `multi_values` - returns data with several feature attributes and several sample measurements in the response body in case the original data had them. If not specified, returns only the first feature identifier and the first measurement per sample from the original data.
        explode: true
        in: query
        name: responseFormat
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve data objects by searching across multiple data types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/expression/group:
    get:
      description: |+
        Retrieve group objects whose linked data matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchExpressionGroupsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group objects by searching across multiple data types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/expression/streamed-data:
    get:
      description: |+
        Stream data from a given group for a tabular file that matches a sample/library/preparations query/filter. If no query/filters are supplied all expression data is returned. If a metadata filter is specified, this endpoint will only return expression data that is associated with a sample via the Sample Source ID attribute.
        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Libraries (full-text or metadata key-value pair)
        3. Preparations (full-text or metadata key-value pair)
        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

      operationId: searchStreamedExpressionDataAsCurator
      parameters:
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `features.NAME=1007_s_at`\
          \ or `features.\"Average Mz\"=2.218`. As in the case of sample metadata\
          \ queries, single words can be supplied as is; otherwise, use speech marks\
          \ (`\"`) to quote queries that include whitespace. \n2. It is possible to\
          \ specify a set of possible values, separated by comma: `features.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`features.Name_1 > 3`: Select all rows where the\
          \ feature attribute Name_1 values are greater than 3. \n`features.Name_2\
          \ >= 6`: Select all rows where the feature attribute Name_2 values are greater\
          \ than or equal to 6. \n`-3 < features.Name_3 < 3`: Select all rows where\
          \ the feature attribute Name_3 values lie within the interval between -3\
          \ and 3. \n4. Use substring search to get the records where the attribute\
          \ field contains the provided substring: `features.attribute1 =~ \"some\
          \ text\"`. \n5. The first column for each original data file is identified\
          \ as feature accession (typically, it contains gene or protein names, accession\
          \ IDs, etc.). Searching by such feature accession would significantly outperform\
          \ more complex queries by combining the other feature attributes. To enable\
          \ such a search, use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`values.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < values.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `features.Name_1!=A`: Select all rows where Name_1 is not A. \n* `features.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `features.Name_1=A\
          \ AND features.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `features.Name_1=A && features.Name_2=B`: Equivalent to the example\
          \ above. \n* `features.Name_1=A OR features.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `features.Name_1=A || features.Name_2=B`:\
          \ Equivalent to the example above. \n* `features.Name_1=A AND (features.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Deprecated; use `exQuery` parameter instead. Filters results\
          \ by the feature column (e.g., Gene ID). The feature parameter value must\
          \ match the name of the identifier in the GCT file (under the NAME column).\
          \ Example: `ENSG00000077044`"
        explode: true
        in: query
        name: featureList
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Accession of the expression group object (GCT)
        in: query
        name: groupAccession
        required: true
        schema:
          type: string
      - description: The number of digits after the decimal point for floating-point
          values. The final value is rounded up. Must be non-negative. The default
          is 4.
        in: query
        name: roundDigits
        schema:
          default: 4
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/StreamingOutput"
          description: Stream of retrieved Expression data.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Stream data from a given tabular file
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/flow-cytometry/data:
    get:
      description: |+
        Retrieve flow cytometry data objects whose linked data matches all supplied conditions.

        Note: A flow cytometry data query must be supplied.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchFlowCytometryDataAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve flow cytometry data objects by searching across multiple data
        types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/flow-cytometry/group:
    get:
      description: |+
        Retrieve group objects whose linked data matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchFlowCytometryGroupsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group objects by searching across multiple data types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/samples:
    get:
      description: |+
        Retrieve sample metadata objects whose linked data matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchSamplesAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve sample metadata objects by searching across multiple data
        types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/variant/data:
    get:
      description: |+
        Retrieve variant data objects whose linked data matches all supplied conditions.

        Note: A variant data query must be supplied.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked expression objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchVariantDataAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve variant data objects by searching across multiple data types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/omics/variant/group:
    get:
      description: |+
        Retrieve group objects whose linked data matches all supplied conditions.

        ## Conditions
        It is possible to supply conditions for:

        1. Samples (full-text or metadata key-value pair)
        2. Parent studies (full-text or metadata key-value pair)
        3. Linked variant objects (list of data key-value pairs)
        4. Linked flow cytometry objects (list of data key-value pairs)
        5. Linked any data (except variant and flow cytometry) objects (list of data key-value pairs)

        ## Metadata full-text queries
        Single words can be supplied as is; otherwise, use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Data queries
        Data queries must be a list of key-value pairs, separated by whitespace. The set of valid keys depends on the specific query type, and is documented in the query parameter summary. The values can be simple non-whitespace strings, or strings enclosed by speech marks (`"`). Depending on the key, the value may be be a comma-delimited list of string values. Others require numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with `|`.

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: searchVariantGroupsAsCurator
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          enum:
          - term_id
          type: string
      - description: |
          Filter by study metadata (key-value metadata pair(s)). E.g. `"Study Source"=ArrayExpress`
        in: query
        name: studyFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all study metadata
          fields. E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: studyQuery
        schema:
          type: string
      - description: |
          Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species or strain"="Homo sapiens"`
        in: query
        name: sampleFilter
        schema:
          type: string
      - description: Search for objects via a full-text query over all sample metadata
          fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: sampleQuery
        schema:
          type: string
      - description: Filter by library metadata (key-value metadata pair(s)). E.g.
          `"Library Type"=RNA-Seq-1`
        in: query
        name: libraryFilter
        schema:
          type: string
      - description: Search for library objects via a full-text query over all library
          metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
          terms are automatically expanded to include synonyms.
        in: query
        name: libraryQuery
        schema:
          type: string
      - description: Filter by preparation metadata (key-value metadata pair(s)).
          E.g. `Digestion=Trypsin`
        in: query
        name: preparationFilter
        schema:
          type: string
      - description: Search for preparation objects via a full-text query over all
          preparation metadata fields. E.g. `"reversed-phase liquid chromatography"`.
          Queries matching dictionary terms are automatically expanded to include
          synonyms.
        in: query
        name: preparationQuery
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf"  in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: query
        name: vxQuery
        schema:
          type: string
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source\
          \ ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: vxFilter
        schema:
          type: string
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: query
        name: exQuery
        schema:
          type: string
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`. Retrieving individual runs via \"\
          Run Source ID\"=\"HG00096\"  will be deprecated after June 2023. Use sampleFilter,\
          \ libraryFilter or preparationFilter for retrieving an individual run"
        in: query
        name: exFilter
        schema:
          type: string
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: query
        name: fxQuery
        schema:
          type: string
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`. Retrieving individual runs via \"Run Source ID\"=\"\
          HG00096\"  will be deprecated after June 2023. Use sampleFilter, libraryFilter\
          \ or preparationFilter for retrieving an individual run"
        in: query
        name: fxFilter
        schema:
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: Omics query result.
        "400":
          content: {}
          description: Invalid data in request. See error message for details.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve group objects by searching across multiple data types
      tags:
      - Omics queries as Curator
  /frontend/rs/genestack/integrationCurator/default-released/studies/{id}/tasks/publish-versions:
    post:
      description: This endpoint publishes information from staging and creates new
        metadata versions for the specified study and all associated objects. The
        version name is set to “Auto-published by API call”. Only curators with access
        to the specified studies can use this method.
      operationId: publishStudyByAccessionAsCurator
      parameters:
      - description: Supply the accession of the study to be published
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Supply text to name this version. If not supplied the version
          name is set to “Auto-published by API call”
        in: query
        name: versionMessage
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInfo"
          description: Task information.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Asynchronous task that publishes all pending versions for a single
        study.
      tags:
      - Metadata versioning as Curator
  /frontend/rs/genestack/integrationCurator/default-released/studies/{id}/validation-summary:
    get:
      operationId: searchExpressionDataAsCurator
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyValidationSummary"
          description: Study validation result.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve validation summary by querying study ID (accession)
      tags:
      - Validation summary as Curator
components:
  schemas:
    AttributeInvalidValue:
      $ref: "./schemas/integration/AttributeInvalidValue.yaml"
    AttributeValidationSummary:
      $ref: "./schemas/integration/AttributeValidationSummary.yaml"
    BatchOfIds:
      $ref: "./schemas/integration/BatchOfIds.yaml"
    DataItem:
      $ref: "./schemas/integration/DataItem.yaml"
    DataPresentation:
      $ref: "./schemas/integration/DataPresentation.yaml"
    GroupValidationSummary:
      $ref: "./schemas/integration/GroupValidationSummary.yaml"
    IMetadata:
      $ref: "./schemas/integration/IMetadata.yaml"
    IntegrationHelper:
      $ref: "./schemas/common/IntegrationHelper.yaml"
    Library:
      $ref: "./schemas/library/Library.yaml"
    Link:
      $ref: "./schemas/integration/Link.yaml"
    ListResponse:
      $ref: "./schemas/common/ListResponse.yaml"
    MetaResponse:
      $ref: "./schemas/common/MetaResponse.yaml"
    MetadataContent:
      $ref: "./schemas/common/MetadataContent.yaml"
    MetadataPresentation:
      $ref: "./schemas/integration/MetadataPresentation.yaml"
    MetadataWithId:
      $ref: "./schemas/common/MetadataWithId.yaml"
    OmicsResponse:
      $ref: "./schemas/integration/OmicsResponse.yaml"
    OmicsResponseDataPresentation:
      $ref: "./schemas/integration/OmicsResponseDataPresentation.yaml"
    OmicsResponseMetadataPresentation:
      $ref: "./schemas/integration/OmicsResponseMetadataPresentation.yaml"
    OmicsResponseMetadataWithId:
      $ref: "./schemas/integration/OmicsResponseMetadataWithId.yaml"
    PaginationInfo:
      $ref: "./schemas/common/PaginationInfo.yaml"
    Preparation:
      $ref: "./schemas/preparation/Preparation.yaml"
    Relationships:
      $ref: "./schemas/integration/Relationships.yaml"
    SourceTypePair:
      $ref: "./schemas/integration/SourceTypePair.yaml"
    StreamingOutput:
      $ref: "./schemas/integration/StreamingOutput.yaml"
    Study:
      $ref: "./schemas/study/Study.yaml"
    StudyCurationStatusResponse:
      $ref: "./schemas/integration/StudyCurationStatusResponse.yaml"
    StudyCurationStatusUpdateRequest:
      $ref: "./schemas/integration/StudyCurationStatusUpdateRequest.yaml"
    StudyValidationSummary:
      $ref: "./schemas/integration/StudyValidationSummary.yaml"
    TaskInfo:
      $ref: "./schemas/tasks/TaskInfo.yaml"
    ValidationError:
      $ref: "./schemas/integration/ValidationError.yaml"
    SearchStudyRequest:
      $ref: "./schemas/integration/SearchStudyRequest.yaml"
    AppliedFilter:
      $ref: "./schemas/integration/AppliedFilter.yaml"
    PageRequest:
      $ref: "./schemas/integration/PageRequest.yaml"
    FindObjectsResponse:
      $ref: "./schemas/integration/FindObjectsResponse.yaml"
    ObjectsPage:
      $ref: "./schemas/integration/ObjectsPage.yaml"
    StudySearchInfo:
      $ref: "./schemas/integration/StudySearchInfo.yaml"
    MetainfoKeyForSummary:
      $ref: "./schemas/integration/MetainfoKeyForSummary.yaml"
    FilterOptionGroup:
      $ref: "./schemas/integration/FilterOptionGroup.yaml"
    FilterOption:
      $ref: "./schemas/integration/FilterOption.yaml"
  securitySchemes:
    Access-token:
      in: header
      name: Authorization
      type: apiKey
    Genestack-API-Token:
      in: header
      name: Genestack-API-Token
      type: apiKey
