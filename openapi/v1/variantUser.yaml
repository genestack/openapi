openapi: 3.1.0
info:
  description: |-
    This swagger page describes the variantUser API endpoints for ODM. These are typically used to find and retrieve variant data and metadata.

    Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software. Further instructions can be found [here](https://odm-user-guide.readthedocs.io/en/latest/doc-odm-user-guide/getting-a-genestack-api-token.html).

    To try out calls in this swagger page:

    1.  Click the 'Authorize' button below to enter your API token
    2.  Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button
    3.  Enter parameter values that you wish to try
    4.  Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears


     The server response will be in the section that follows.
  title: ODM API
  version: default-released
tags:
- name: Variant SPoT as User
paths:
  /api/v1/as-user/variants:
    get:
      description: |+
        Retrieve all variant data and metadata objects that match a query.

        ## Metadata full-text queries
        Single words can be supplied as is, otherwise use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size together with a `cursor` tag. To retrieve the next page of results please supply this `cursor` tag to resume the query from your previous result and get the next page. If there are no more results you will just retrieve an empty result.

      operationId: getAllVariantsAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Filter by variant metadata (key-value metadata pair(s)). E.g.
          `"Variant Source"=dbSNP`.
        in: query
        name: filter
        schema:
          type: string
      - description: Search for variant objects via a full text query over all variant
          metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf" in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: Specify a chromosome interval to find genes between these positions. E.g. `2:233364596-233385916`. Multiple intervals can be provided as a list.
        in: query
        name: variantRegion
        schema:
          items:
            type: string
            example: 2:233364596-233385916
          type: array
        style: form
      - description: One or more specific variation IDs can be specified. E.g. `rs838705`
        in: query
        name: variantId
        schema:
          items:
            type: string
            example: rs334
          type: array
        style: form
      - description: |-
          The parameter allows to retrieve gene variants based on the filters defined in the vcf file. If not specified, all variants are returned.

            1. pass - return gene variants which passed all filters
            2. noPass - return gene variants which failed one or more filters
        in: query
        name: variantFilter
        schema:
          enum:
            - pass
            - noPass
          type: string
      - description: Filter by vcf INFO fields. E.g. to filter all variants annotated in dbSNP add “exists(info.DB)”. Use “!exists(INFO.KEY)” to exclude variants having the key from the search results. Combine multiple filters for INFO fields using AND (&&), OR (||) logical operators and parentheses
        in: query
        name: variantInfo
        schema:
          type: string
      - description: Autogenerated numeric ID that corresponds to a column and is used to link data from the same run to a sample. Multiple values can be provided as a list.
        in: query
        name: runFilter
        schema:
          $ref: "#/components/schemas/RunFilter"
        style: form
      - description: Column name from the file to which all data for a sample is related. Multiple values can be provided as a list to retrieve data from multiple columns.
        explode: true
        in: query
        name: runSourceFilter
        schema:
          items:
            type: string
            example: Run Source ID
          type: array
        style: form
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      - description: The page tag to resume results from (see paging above).
        in: query
        name: cursor
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantResponse"
          description: Retrieved variant data.
        "400":
          content: {}
          description: Variant data cannot be retrieved.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve multiple variant data and metadata objects
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/group:
    get:
      description: |-
        Retrieve all group metadata objects that match a query.

        ## Metadata full-text queries
        Single words can be supplied as is, otherwise use speech marks (`"`) to quote queries that include whitespace. Speech marks and backslash characters in the query need to be escaped with a backslash (`\`).

        ## Metadata filters
        Metadata filters are key-value pairs joined by an operator. The `=` operator matches literal values/string. The `!=` operator matches anything except the literal value/string. The `<` or `>` operators match numerical results that are less or greater than the supplied value. Strings containing whitespace need to be quoted with (`"`).

        ## Combinations
        Metadata queries/filters for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space to separate out the terms and operators. Parentheses `( )` can be used for complex expressions.

        ## Versioning
        Specific versions of omics data files (eg. GCT) can be queried via the useVersions parameter. Different versions of an omics data file are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied to the useVersions parameter along with the version number or specific omics data file accessions to include them in the query. If nothing is supplied to the useVersions parameter then only the active version (which is usually the last one imported) is queried. This acts as a filter before the rest of the query is carried out.

        Example usage:
        useVersions=* (query all versions, including those without CHAIN_IDs)
        useVersions=v2 (query the second version. If there is no second version then the data file is not queried)
        useVersions=v1,v0 (query the first version and any data files without CHAIN_IDs(v0) )
        useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002 query the third version)
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID of GSCV002 query only the specific accessions GSF00494 and GSF000496)

        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ; separator.

        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n*pageLimit` until the `resultsExhausted` response field is true.

        ## List operation

        This endpoint can be called with no `query` parameter. Doing so returns a list of all data objects.
      operationId: searchVariantGroupsAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Filter by variant metadata (key-value metadata pair(s)). E.g.
          `"Variant Source"=dbSNP`.
        in: query
        name: filter
        schema:
          type: string
      - description: Search for variant objects via a full text query over all variant
          metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically
          expanded to include synonyms.
        in: query
        name: query
        schema:
          type: string
      - description: |-
          If the full-text query term is present in an ODM dictionary, enabling this parameter will modify the query to include child terms of the full-text query.

          For example, the search query "Body fluid" can be expanded to include the term "Blood" (a child term of  "Body fluid") so files containing either "Body fluid" or  "Blood"  in their metadata will be returned in the search results.

          The parent-child relationship is defined by the key "broaders" or "subClassOf" in the dictionary.

          If the full query term is not present in a dictionary then this parameter has no effect.
        in: query
        name: searchSpecificTerms
        schema:
          type: boolean
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      - description: |-
          Specify which versions of omics data files are used in the query. By default the active version is used. See Versioning above. Syntax:

          \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`
        in: query
        name: useVersions
        schema:
          type: string
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is a list of
            objects.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve groups that match a query
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/group/by/run/{id}:
    get:
      operationId: getVariantGroupByRunAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantMetadataWithId"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single group object by run ID (accession)
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/group/{id}:
    get:
      operationId: getVariantGroupAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantMetadataWithId"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single group object by ID (accession)
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/runs/by/group/{id}:
    get:
      description: |+
        ## Paging
        For performance reasons this endpoint returns results in "pages" of limited size. In order to retrieve all matching results the client needs to request multiple pages starting from an offset to the first result. You can do this using the pageOffset query parameter. A value of 0 (the default) instructs the server to return the first page of results, 100 would return a page of results starting from the 101st result and so on. To return all results iterate through pages using pageOffset values of `n * pageLimit` until the `resultsExhausted` response field is true.

      operationId: searchVariantRunsAsUser
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: query
        name: pageOffset
        schema:
          format: int32
          type: integer
      - description: Maximum number of results to return per page (see Paging above).
          This value must be between 0 and 2000 (inclusive). The default is 2000.
        in: query
        name: pageLimit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve run objects related to the given group
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/{id}:
    get:
      operationId: getVariantAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantItem"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single variant object by ID (accession)
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/{id}/versions:
    get:
      operationId: getVariantVersionsAsUser
      parameters:
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: array
          description: The request was successful. The returned value is the list
            of  object versions.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a list of object versions by ID
      tags:
      - Variant SPoT as User
  /api/v1/as-user/variants/{id}/versions/{version}:
    get:
      operationId: getVariantByVersionAsUser
      parameters:
      - description: Supply this parameter with the value `term_id` as part of the
          query to return extended information including IDs for values and dictionaries.
        in: query
        name: responseFormat
        schema:
          $ref: "#/components/schemas/ResponseFormat"
      - description: Unique identifier (accession) of the object.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Unique version of the object.
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: |-
          The parameter defines amount of metadata attributes to return:

          1. `minimal_data` - return metadata attributes according to the default template.
          2. `extended_data_included` - return metadata attributes according to applied template, if object doesn’t have applied template, default template will be used. This is the default for User endpoints.
          3. `original_data_included` - return all metadata attributes with values and null attributes, if they are present in the applied template. This is the default for Curator endpoints.
        in: query
        name: returnedMetadataFields
        schema:
          enum:
          - minimal_data
          - extended_data_included
          - original_data_included
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: The request was successful. The returned value is the object.
        "400":
          content: {}
          description: The supplied object ID is invalid.
        "401":
          content: {}
          description: |-
            User is not authenticated. Please supply a valid Access Token in the `Authorization` HTTP header (e.g. Authorization: bearer [token])
             or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
        "404":
          content: {}
          description: No object exists with the given ID.
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: Retrieve a single variant object by ID (accession)
      tags:
      - Variant SPoT as User
components:
  schemas:
    CommitInfo:
      $ref: "./schemas/common/CommitInfo.yaml"
    IntegrationHelper:
      $ref: "./schemas/common/IntegrationHelper.yaml"
    ListResponse:
      $ref: "./schemas/common/ListResponse.yaml"
    MetaResponse:
      $ref: "./schemas/common/MetaResponse.yaml"
    MetadataContent:
      $ref: "./schemas/common/MetadataContent.yaml"
    VariantMetadataWithId:
      $ref: "./schemas/variant/VariantMetadataWithId.yaml"
    PaginationInfo:
      $ref: "./schemas/common/PaginationInfo.yaml"
    ResponseFormat:
      $ref: "./schemas/common/ResponseFormat.yaml"
    RunFilter:
      $ref: "./schemas/common/RunFilter.yaml"
    SignalRun:
      $ref: "./schemas/common/SignalRun.yaml"
    VariantItem:
      $ref: "./schemas/variant/VariantItem.yaml"
    VariantResponse:
      $ref: "./schemas/variant/VariantResponse.yaml"
  securitySchemes:
    Access-token:
      in: header
      name: Authorization
      type: apiKey
    Genestack-API-Token:
      in: header
      name: Genestack-API-Token
      type: apiKey
