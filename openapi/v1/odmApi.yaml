---
openapi: "3.1.0"
info:
  description: "This swagger page describes the variantUser API endpoints for ODM.\
    \ These are typically used to find and retrieve variant data and metadata.\n\n\
    Before carrying out any API calls you will need an API token. API tokens can be\
    \ obtained under your profile within the Genestack software. Further instructions\
    \ can be found [here](https://odm-user-guide.readthedocs.io/en/latest/doc-odm-user-guide/getting-a-genestack-api-token.html).\n\
    \nTo try out calls in this swagger page:\n\n1.  Click the 'Authorize' button below\
    \ to enter your API token\n2.  Scroll to the 'Parameters' section for the method\
    \ you wish to try out and click the 'Try it out' button\n3.  Enter parameter values\
    \ that you wish to try\n4.  Scroll to the bottom of the Parameters section and\
    \ click the 'Execute' bar that appears\n\n\n The server response will be in the\
    \ section that follows."
  title: "ODM API"
  version: "default-released"
tags:
- name: "Expression SPoT as Curator"
- name: "Expression SPoT as User"
- name: "Flow Cytometry SPoT as Curator"
- name: "Flow Cytometry SPoT as User"
- name: "Expression integration as Curator"
- name: "Flow Cytometry integration as Curator"
- name: "Library integration as Curator"
- name: "Linkage as Curator"
- name: "Metadata versioning as Curator"
- name: "Omics queries as Curator"
- name: "Preparation integration as Curator"
- name: "Sample integration as Curator"
- name: "Study integration as Curator"
- name: "Validation summary as Curator"
- name: "Variant integration as Curator"
- name: "Expression integration as User"
- name: "Flow Cytometry integration as User"
- name: "Library integration as User"
- name: "Linkage as User"
- name: "Omics queries as User"
- name: "Preparation integration as User"
- name: "Sample integration as User"
- name: "Study integration as User"
- name: "Variant integration as User"
- name: "Data import jobs"
- name: "Job operations"
- name: "Library SPoT as Curator"
- name: "Library SPoT as User"
- name: "Manage Data"
- name: "Preparation SPoT as Curator"
- name: "Preparation SPoT as User"
- name: "Xrefset queries"
- name: "Sample SPoT as Curator"
- name: "Sample SPoT as User"
- name: "Groups"
- name: "Users"
- name: "Study SPoT as Curator"
- name: "Study SPoT as User"
- name: "Tasks API"
- name: "Variant SPoT as Curator"
- name: "Variant SPoT as User"
paths:
  /api/v1/as-curator/expressions:
    get:
      description: "Retrieve all expression data and metadata objects that match a\
        \ query.\n\n## Metadata full-text queries\nSingle words can be supplied as\
        \ is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getExpressionDataAsCurator"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Normalization Method\"=TPM`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for expression objects via a full text query over all\
          \ expression metadata. E.g. `TPM`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the gct column used\
          \ to link expression data from the same run to a sample."
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Minimum threshold (inclusive) for returned expression values."
        in: "query"
        name: "minExpressionLevel"
        schema:
          format: "double"
          type: "number"
      - description: "List of features to return. These features must match exactly\
          \ the probe IDs in the GCT file. Example: `1552269_at`"
        explode: true
        in: "query"
        name: "featureList"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionResponse"
          description: "Retrieved Expression data."
        "400":
          content: {}
          description: "Expression data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple expression data and metadata objects"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/gct:
    post:
      description: "## Data\n This operation necessitates the URL of a tabular data\
        \ file, which must be either in TSV or GCT 1.2 format. Consult the user guide\
        \ for a comprehensive understanding of the file content requirements. The\
        \ endpoint is capable of handling uploads of any data type, which can be detailed\
        \ in the parameters section, not only Gene Expression data.\n\n ## Metadata\n\
        \ It is also possible to optionally supply the URL of a metadata file. This\
        \  metadata will be used as the original metadata for the created objects.\
        \ The  file is expected to contain single record with metadata describing\
        \ the uploaded signal file.\n ## Metadata file format\n * Extension: any,\
        \ `.zip` and `.gz` extensions are treated as archives and get decompressed\n\
        \ * Format: plain text, Tab-separated format (TSV), attribute names and record\
        \ values are separated  with tabs (`U+0009`),  lines are separated with `CRLF`\
        \ sequence (`U+000D U+000A`)\n * Header: the first line is treated as table\
        \ header that contains attribute names\n * Records: the second line contains\
        \ the values for each of the attributes described in the header line.  Values\
        \ represent single string or list of strings. List values are separated  using\
        \ the \"pipe\" `|` (`U+007C`)  separator. Values are trimmed of whitespace\
        \ before parsing, and a literal `|`  (`U+007C`) character may be escaped by\
        \ repeating it twice.\n * Skip zeros in original data file: If this option\
        \ is selected, zeros in the file will be ignored, thus conserving time and\
        \ space. This option is particularly useful for handling very sparse data\
        \ such as Single Cell data. \n ## File sources\n * Supported external sources\
        \ (links): `http`/`https`/`ftp`"
      operationId: "addExpressionAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionSignalSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsResponse"
          description: "The objects were successfully created. The returned value\
            \ is a list of created objects."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create multiple new objects from a multi-row data file with optional\
        \ supplied metadata"
      tags:
      - "Expression SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/expressions/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchExpressionGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Normalization Method\"=TPM`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for expression objects via a full text query over all\
          \ expression metadata. E.g. `TPM`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/group/by/run/{id}:
    get:
      operationId: "getExpressionGroupByRunAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/group/{id}:
    delete:
      operationId: "deleteExpressionGroupAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete the object"
      tags:
      - "Expression SPoT as Curator"
    get:
      operationId: "getExpressionGroupAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchExpressionRunsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/{id}:
    get:
      operationId: "getExpressionAsCurator"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single expression object by ID (accession)"
      tags:
      - "Expression SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateExpressionRunAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update object metadata"
      tags:
      - "Expression SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/expressions/{id}/versions:
    get:
      operationId: "getExpressionVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-curator/expressions/{id}/versions/{version}:
    get:
      operationId: "getExpressionByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single expression object by ID (accession)"
      tags:
      - "Expression SPoT as Curator"
  /api/v1/as-user/expressions:
    get:
      description: "Retrieve all expression data and metadata objects that match a\
        \ query.\n\n## Metadata full-text queries\nSingle words can be supplied as\
        \ is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getExpressionDataAsUser"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Normalization Method\"=TPM`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for expression objects via a full text query over all\
          \ expression metadata. E.g. `TPM`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the gct column used\
          \ to link expression data from the same run to a sample."
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Minimum threshold (inclusive) for returned expression values."
        in: "query"
        name: "minExpressionLevel"
        schema:
          format: "double"
          type: "number"
      - description: "List of features to return. These features must match exactly\
          \ the probe IDs in the GCT file. Example: `1552269_at`"
        explode: true
        in: "query"
        name: "featureList"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionResponse"
          description: "Retrieved Expression data."
        "400":
          content: {}
          description: "Expression data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple expression data and metadata objects"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchExpressionGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Normalization Method\"=TPM`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for expression objects via a full text query over all\
          \ expression metadata. E.g. `TPM`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/group/by/run/{id}:
    get:
      operationId: "getExpressionGroupByRunAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/group/{id}:
    get:
      operationId: "getExpressionGroupAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchExpressionRunsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/{id}:
    get:
      operationId: "getExpressionAsUser"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single expression object by ID (accession)"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/{id}/versions:
    get:
      operationId: "getExpressionVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-user/expressions/{id}/versions/{version}:
    get:
      operationId: "getExpressionByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single expression object by ID (accession)"
      tags:
      - "Expression SPoT as User"
  /api/v1/as-curator/flow-cytometries:
    get:
      description: "Retrieve all flow cytometry data and metadata objects that match\
        \ a query.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getFlowCytometryDataAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for flow cytometry objects via a full text query over\
          \ all flow cytometry metadata. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the fcy column used\
          \ to link flow cytometry data from the same run to a sample"
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Required value of \"Readout type\" column. E.g.: `Count`, `Median`"
        in: "query"
        name: "readoutType"
        schema:
          type: "string"
      - description: "Value of \"Cell Population\" column. E.g.: `\"total cells\"\
          `, `CD45+,live/CD45+`, `CD3+`.\n\nNote that if this value contains special\
          \ characters like `/` which is used as a URI path separator, such characters\
          \ should be escaped manually before sending request. For example, `/` should\
          \ be escaped as `%2F`."
        in: "query"
        name: "population"
        schema:
          type: "string"
      - description: "Marker value. E.g.: `PD1`, `BV786`"
        in: "query"
        name: "marker"
        schema:
          type: "string"
      - description: "Minimum threshold (inclusive) for returned expression values."
        in: "query"
        name: "minValue"
        schema:
          type: "number"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowCytometryResponse"
          description: "Retrieved Flow Cytometry data."
        "400":
          content: {}
          description: "Flow Cytometry data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple flow cytometry data and metadata objects"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/facs:
    post:
      description: "## Data\n This operation requires the URL of a signal data  file,\
        \ for example a GCT, VCF or Flow Cytometry file. The required form of this\
        \ file depends  on the specific SPoT.\n\n ## Metadata\n It is also possible\
        \ to optionally supply the URL of a metadata file. This  metadata will be\
        \ used as the original metadata for the created objects. The  file is expected\
        \ to contain single record with metadata describing the uploaded signal file.\n\
        \ ## Metadata file format\n * Extension: any, `.zip` and `.gz` extensions\
        \ are treated as archives and get decompressed\n * Format: plain text, Tab-separated\
        \ format (TSV), attribute names and record values are separated  with tabs\
        \ (`U+0009`),  lines are separated with `CRLF` sequence (`U+000D U+000A`)\n\
        \ * Header: the first line is treated as table header that contains attribute\
        \ names\n * Records: the second line contains the values for each of the attributes\
        \ described in the header line.  Values represent single string or list of\
        \ strings. List values are separated  using the \"pipe\" `|` (`U+007C`)  separator.\
        \ Values are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`)\
        \ character may be escaped by repeating it twice.\n ## File sources\n * Supported\
        \ external sources (links): `http`/`https`/`ftp`"
      operationId: "addFlowCytometryAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowCytometrySignalSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsResponse"
          description: "The objects were successfully created. The returned value\
            \ is a list of created objects."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create multiple new objects from a multi-row data file with optional\
        \ supplied metadata"
      tags:
      - "Flow Cytometry SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/flow-cytometries/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchFlowCytometryGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for flow cytometry objects via a full text query over\
          \ all flow cytometry metadata. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/group/by/run/{id}:
    get:
      operationId: "getFlowCytometryGroupByRunAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/group/{id}:
    delete:
      operationId: "deleteFlowCytometryGroupAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete the object"
      tags:
      - "Flow Cytometry SPoT as Curator"
    get:
      operationId: "getFlowCytometryGroupAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchFlowCytometryRunsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/{id}:
    get:
      operationId: "getFlowCytometryAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowCytometryItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample flow cytometry by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateFlowCytometryAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update object metadata"
      tags:
      - "Flow Cytometry SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/flow-cytometries/{id}/versions:
    get:
      operationId: "getFlowCytometryVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-curator/flow-cytometries/{id}/versions/{version}:
    get:
      operationId: "getFlowCytometryByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample flow cytometry by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as Curator"
  /api/v1/as-user/flow-cytometries:
    get:
      description: "Retrieve all flow cytometry data and metadata objects that match\
        \ a query.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getFlowCytometryDataAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for flow cytometry objects via a full text query over\
          \ all flow cytometry metadata. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the fcy column used\
          \ to link flow cytometry data from the same run to a sample"
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Required value of \"Readout type\" column. E.g.: `Count`, `Median`"
        in: "query"
        name: "readoutType"
        schema:
          type: "string"
      - description: "Value of \"Cell Population\" column. E.g.: `\"total cells\"\
          `, `CD45+,live/CD45+`, `CD3+`.\n\nNote that if this value contains special\
          \ characters like `/` which is used as a URI path separator, such characters\
          \ should be escaped manually before sending request. For example, `/` should\
          \ be escaped as `%2F`."
        in: "query"
        name: "population"
        schema:
          type: "string"
      - description: "Marker value. E.g.: `PD1`, `BV786`"
        in: "query"
        name: "marker"
        schema:
          type: "string"
      - description: "Minimum threshold (inclusive) for returned expression values."
        in: "query"
        name: "minValue"
        schema:
          type: "number"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowCytometryResponse"
          description: "Retrieved Flow Cytometry data."
        "400":
          content: {}
          description: "Flow Cytometry data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple flow cytometry data and metadata objects"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchFlowCytometryGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for flow cytometry objects via a full text query over\
          \ all flow cytometry metadata. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/group/by/run/{id}:
    get:
      operationId: "getFlowCytometryGroupByRunAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/group/{id}:
    get:
      operationId: "getFlowCytometryGroupAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchFlowCytometryRunsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/{id}:
    get:
      operationId: "getFlowCytometryAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowCytometryItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample flow cytometry by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/{id}/versions:
    get:
      operationId: "getFlowCytometryVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-user/flow-cytometries/{id}/versions/{version}:
    get:
      operationId: "getFlowCytometryByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample flow cytometry by ID (accession)"
      tags:
      - "Flow Cytometry SPoT as User"
  /api/v1/as-curator/data-types:
    get:
      description: "This endpoint is for instructional uses and can be used to get\
        \ the latest list of Data Types."
      operationId: "getDataTypesAsCurator"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "string"
                type: "array"
                uniqueItems: true
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Lists all available data types."
      tags:
      - "Linkage as Curator"
  /api/v1/as-curator/data-types/links:
    get:
      description: "This endpoint should be used for instructional needs, and can\
        \ be used in order to get the links between the Data Types."
      operationId: "getDataTypesLinksAsCurator"
      parameters:
      - description: "Return only links with the specified data type."
        in: "query"
        name: "type"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SourceTypePair"
                type: "array"
                uniqueItems: true
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List all possible links between data types that match the specified\
        \ criteria."
      tags:
      - "Linkage as Curator"
  /api/v1/as-curator/integration/link/expression/by/library/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionByLibraryAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related library ID\
        \ (accession)"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/by/preparation/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionByPreparation"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related preparation\
        \ ID (accession)"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related sample ID (accession)"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getExpressionGroupsByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/group/{sourceId}/to/library/group/{targetId}:
    delete:
      description: "Delete link between a group of expression objects and a group\
        \ of library objects"
      operationId: "deleteExpressionGroupLibraryGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the library group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of expression objects and a group of library\
        \ objects"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between a group of expression objects and a group\
        \ of library objects.\n\nAn expression object can be linked to one object\
        \ only. If an expression object is already linked to another object, this\
        \ link will be deleted and a new link with the specified object will be created.\n\
        Expression objects of the same group can only be linked to objects of the\
        \ same study."
      operationId: "createExpressionGroupLibraryGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the library group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content: {}
          description: "Some (not all) sample links created."
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Library group, signal group or libraries to link not found"
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of expression objects and a group of\
        \ library objects"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/group/{sourceId}/to/preparation/group/{targetId}:
    delete:
      description: "Delete link between a group of expression objects and a group\
        \ of preparation objects"
      operationId: "deleteExpressionGroupPreparationGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the preparation group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of expression objects and a group of preparation\
        \ objects"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between a group of expression objects and a group\
        \ of preparation objects.\n\nAn expression object can be linked to one object\
        \ only. If an expression object is already linked to another object, this\
        \ link will be deleted and a new link with the specified object will be created.\n\
        Expression objects of the same group can only be linked to objects of the\
        \ same study."
      operationId: "createExpressionGroupPreparationGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the preparation group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content: {}
          description: "Some (not all) sample links created."
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Preparation group, signal group or preparations to link not\
            \ found"
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of expression objects and a group of\
        \ preparation objects"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: "Delete link between a group of expression objects and a group\
        \ of sample objects"
      operationId: "deleteExpressionGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of expression objects and a group of sample\
        \ objects"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between a group of expression objects and a group\
        \ of sample objects.\n\nAn expression object can be linked to one object only.\
        \ If an expression object is already linked to another object, this link will\
        \ be deleted and a new link with the specified object will be created.\nExpression\
        \ objects of the same group can only be linked to objects of the same study.\n\
        \n Users can specify a custom metadata field for linking omics data to samples\
        \ via the “linkingAttribute” parameter, if not specified the “Sample Source\
        \ ID“ sample metadata attribute will be used by default."
      operationId: "createExpressionGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to a GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      - description: "Metadata field containing sample IDs to link omics data to samples.\
          \ The template applied to the study must contain this field in the sample\
          \ section."
        in: "query"
        name: "linkingAttribute"
        schema:
          type: "string"
      responses:
        "200":
          content: {}
          description: "Not all signal data were linked to the samples."
        "204":
          content: {}
          description: "All signal data were linked to the samples from the specified\
            \ sample group."
        "400":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of expression objects and a group of\
        \ sample objects"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/run-to-libraries/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToLibraryPairsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-library pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/run-to-preparations/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToPreparationPairsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-preparation pairs by group id. Pagination is based on\
        \ unique runs, not unique pairs."
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToSamplePairsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/{sourceId}/to/library/{targetId}:
    delete:
      description: "Delete link between an expression object and a library"
      operationId: "deleteExpressionLibraryLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the library object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between an expression object and a library"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between an expression object and a library.\n\n\
        An expression object can be linked to one object only. If an expression object\
        \ is already linked to another object, this link will be deleted and a new\
        \ link with the specified object will be created.\nExpression objects of the\
        \ same group can only be linked to objects of the same study."
      operationId: "createExpressionLibraryLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the library object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between an expression object and a library"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/{sourceId}/to/preparation/{targetId}:
    delete:
      description: "Delete link between an expression object and a preparation"
      operationId: "deleteExpressionPreparationLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the preparation object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between an expression object and a preparation"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between an expression object and a preparation.\n\
        \nAn expression object can be linked to one object only. If an expression\
        \ object is already linked to another object, this link will be deleted and\
        \ a new link with the specified object will be created.\nExpression objects\
        \ of the same group can only be linked to objects of the same study."
      operationId: "createExpressionPreparationLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the preparation object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between an expression object and a preparation"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/expression/{sourceId}/to/sample/{targetId}:
    delete:
      description: "Delete link between an expression object and a sample"
      operationId: "deleteExpressionSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between an expression object and a sample"
      tags:
      - "Expression integration as Curator"
    post:
      description: "Create a link between an expression object and a sample.\n\nAn\
        \ expression object can be linked to one object only. If an expression object\
        \ is already linked to another object, this link will be deleted and a new\
        \ link with the specified object will be created.\nExpression objects of the\
        \ same group can only be linked to objects of the same study."
      operationId: "createExpressionSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between an expression object and a sample"
      tags:
      - "Expression integration as Curator"
  /api/v1/as-curator/integration/link/flow-cytometry/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getFlowCytometryBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve flow cytometry run-level data by querying related sample\
        \ ID (accession)"
      tags:
      - "Flow Cytometry integration as Curator"
  /api/v1/as-curator/integration/link/flow-cytometry/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getFlowCytometryGroupsByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Flow Cytometry integration as Curator"
  /api/v1/as-curator/integration/link/flow-cytometry/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: "Delete link between a group of flow-cytometry objects and a group\
        \ of sample objects"
      operationId: "deleteFlowCytometryGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to the column in a FACS file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of flow-cytometry objects and a group\
        \ of sample objects"
      tags:
      - "Flow Cytometry integration as Curator"
    post:
      description: "Create a link between a group of flow-cytometry objects and a\
        \ group of sample objects.\n\nA flow-cytometry object can be linked to one\
        \ object only. If a flow-cytometry object is already linked to another object,\
        \ this link will be deleted and a new link with the specified object will\
        \ be created.\nFlow-cytometry objects of the same group can only be linked\
        \ to objects of the same study.\n\nUsers can specify a custom metadata field\
        \ for linking omics data to samples via the “linkingAttribute” parameter,\
        \ if not specified the “Sample Source ID“ sample metadata attribute will be\
        \ used by default."
      operationId: "createFlowCytometryGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to the column in a FACS file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      - description: "Metadata field containing sample IDs to link omics data to samples.\
          \ The template applied to the study must contain this field in the sample\
          \ section."
        in: "query"
        name: "linkingAttribute"
        schema:
          type: "string"
      responses:
        "200":
          content: {}
          description: "Not all signal data were linked to the samples."
        "204":
          content: {}
          description: "All signal data were linked to the samples from the specified\
            \ sample group."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of flow-cytometry objects and a group\
        \ of sample objects"
      tags:
      - "Flow Cytometry integration as Curator"
  /api/v1/as-curator/integration/link/flow-cytometry/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getFlowCytometryRunToSamplePairsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Flow Cytometry integration as Curator"
  /api/v1/as-curator/integration/link/flow-cytometry/{sourceId}/to/sample/{targetId}:
    delete:
      description: "Delete link between a flow-cytometry object and a sample"
      operationId: "deleteFlowCytometrySampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level data block"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a flow-cytometry object and a sample"
      tags:
      - "Flow Cytometry integration as Curator"
    post:
      description: "Create a link between a flow-cytometry object and a sample.\n\n\
        A flow-cytometry object can be linked to one object only. If a flow-cytometry\
        \ object is already linked to another object, this link will be deleted and\
        \ a new link with the specified object will be created.\nFlow-cytometry objects\
        \ of the same group can only be linked to objects of the same study."
      operationId: "createFlowCytometrySampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level data block"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a flow-cytometry object and a sample"
      tags:
      - "Flow Cytometry integration as Curator"
  /api/v1/as-curator/integration/link/libraries/by/samples:
    get:
      description: "Retrieve library metadata objects whose linked sample metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getLibrariesBySamplesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library metadata by querying related samples"
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/library/by/sample/{id}:
    get:
      operationId: "getLibraryBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: "array"
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: "array"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library metadata by querying related sample ID (accession)"
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/library/group/by/study/{id}:
    get:
      operationId: "getLibraryGroupsByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/library/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: "Delete links between samples and libraries related to the specified\
        \ group"
      operationId: "deleteLibraryGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the library group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete links between samples and libraries related to the specified\
        \ group"
      tags:
      - "Library integration as Curator"
    post:
      description: "Create links between samples and libraries.\n\nLibrary objects\
        \ of the same group can only be linked to objects of the same study."
      operationId: "createLibraryGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the library group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create links between samples and libraries"
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/library/libraries-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getLibraryLinksToSamplesAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library-samples pairs by group id. Pagination is based on\
        \ unique libraries, not unique pairs."
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/library/{sourceId}/to/sample/{targetId}:
    delete:
      description: "Delete a link between a library and a sample"
      operationId: "deleteLibrarySampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the library object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a link between a library and a sample"
      tags:
      - "Library integration as Curator"
    post:
      description: "Create a link between a library and a sample.\n\nLibrary objects\
        \ of the same group can only be linked to objects of the same study."
      operationId: "createLibrarySampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the library object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a library and a sample"
      tags:
      - "Library integration as Curator"
  /api/v1/as-curator/integration/link/preparation/by/sample/{id}:
    get:
      operationId: "getPreparationBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: "array"
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: "array"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparation metadata by querying related sample ID (accession)"
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/preparation/group/by/study/{id}:
    get:
      operationId: "getPreparationGroupsByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/preparation/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: "Delete links between samples and preparations related to the specified\
        \ group"
      operationId: "deletePreparationGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the preparation group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete links between samples and preparations related to the specified\
        \ group"
      tags:
      - "Preparation integration as Curator"
    post:
      description: "Create links between samples and preparations.\n\nPreparation\
        \ objects of the same group can only be linked to objects of the same study."
      operationId: "createPreparationGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the preparation group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create links between samples and preparations"
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/preparation/preparations-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getPreparationLinksToSamplesAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ preparations, not unique pairs."
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/preparation/{sourceId}/to/sample/{targetId}:
    delete:
      description: "Delete a link between a preparation and a sample"
      operationId: "deletePreparationSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the preparation object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a link between a preparation and a sample"
      tags:
      - "Preparation integration as Curator"
    post:
      description: "Create a link between a preparation and a sample.\n\nPreparation\
        \ objects of the same group can only be linked to objects of the same study."
      operationId: "createPreparationSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the preparation object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a preparation and a sample"
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/preparations/by/samples:
    get:
      description: "Retrieve preparation metadata objects whose linked sample metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getPreparationsBySamplesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparation metadata by querying related samples"
      tags:
      - "Preparation integration as Curator"
  /api/v1/as-curator/integration/link/sample/group/{sourceId}/to/study/{targetId}:
    delete:
      description: "Delete link between a group of sample objects and a study"
      operationId: "deleteSampleGroupStudyLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the study object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of sample objects and a study"
      tags:
      - "Sample integration as Curator"
    post:
      description: "Create a link between a group of sample objects and a study.\n\
        \nSample objects of the same group can only be linked to the same study."
      operationId: "createSampleGroupStudyLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the study object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of sample objects and a study"
      tags:
      - "Sample integration as Curator"
  /api/v1/as-curator/integration/link/sample/{sourceId}/to/study/{targetId}:
    delete:
      description: "Delete link between a sample and a study"
      operationId: "deleteSampleStudyLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the study object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a sample and a study"
      tags:
      - "Sample integration as Curator"
    post:
      description: "Create a link between a sample and a study.\n\nSample objects\
        \ of the same group can only be linked to the same study."
      operationId: "createSampleStudyLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the study object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a sample and a study"
      tags:
      - "Sample integration as Curator"
  /api/v1/as-curator/integration/link/samples/by/libraries:
    get:
      description: "Retrieve sample metadata objects whose linked library metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getSamplesByLibrariesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related libraries"
      tags:
      - "Sample integration as Curator"
  /api/v1/as-curator/integration/link/samples/by/preparations:
    get:
      description: "Retrieve sample metadata objects whose linked preparation metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getSamplesByPreparationsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related preparations"
      tags:
      - "Sample integration as Curator"
  /api/v1/as-curator/integration/link/samples/by/study/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getSamplesByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related study ID (accession)"
      tags:
      - "Sample integration as Curator"
  /api/v1/as-curator/integration/link/studies/by/libraries:
    get:
      description: "Retrieve study metadata objects whose linked library metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesByLibrariesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related libraries"
      tags:
      - "Study integration as Curator"
  /api/v1/as-curator/integration/link/studies/by/preparations:
    get:
      description: "Retrieve study metadata objects whose linked preparation metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesByPreparationsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related preparations"
      tags:
      - "Study integration as Curator"
  /api/v1/as-curator/integration/link/studies/by/samples:
    get:
      description: "Retrieve study metadata objects whose linked sample metadata matches\
        \ all supplied conditions.\n\n## Conditions\nIt is possible to supply conditions\
        \ for:\n\n1. Samples (full-text or metadata key-value pair)\n2. Parent studies\
        \ (full-text or metadata key-value pair)\n3. Linked variant objects (list\
        \ of data key-value pairs)\n4. Linked flow cytometry objects (list of data\
        \ key-value pairs)\n5. Linked any data (except variant and flow cytometry)\
        \ objects (list of data key-value pairs)\n\n## Metadata full-text queries\n\
        Single words can be supplied as is; otherwise, use speech marks (`\"`) to\
        \ quote queries that include whitespace. Speech marks and backslash characters\
        \ in the query need to be escaped with a backslash (`\\`).\n\n## Metadata\
        \ filters\nMetadata filters are key-value pairs joined by an operator. The\
        \ `=` operator matches literal values/string. The `!=` operator matches anything\
        \ except the literal value/string. The `<` or `>` operators match numerical\
        \ results that are less or greater than the supplied value. Strings containing\
        \ whitespace need to be quoted with (`\"`).\n\n## Data queries\nData queries\
        \ must be a list of key-value pairs, separated by whitespace. The set of valid\
        \ keys depends on the specific query type, and is documented in the query\
        \ parameter summary. The values can be simple non-whitespace strings, or strings\
        \ enclosed by speech marks (`\"`). Depending on the key, the value may be\
        \ be a comma-delimited list of string values. Others require numerical values.\
        \ Ranges can be supplied with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\n\
        Metadata queries/filters for the same parameter can be combined with `&&`,\
        \ `AND`, `||` and `OR` operators, using white-space to separate out the terms\
        \ and operators. Parentheses `( )` can be used for complex expressions.\n\n\
        ## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesBySamplesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ \"Species or strain\"=\"Homo sapiens\""
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for study metadata objects via a full-text query over\
          \ all sample metadata fields. E.g. \"RNA-Seq of human dendritic cells\"\
          . Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related samples"
      tags:
      - "Study integration as Curator"
  /api/v1/as-curator/integration/link/study/by/sample/{id}:
    get:
      operationId: "getStudyBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata by querying sample ID (accession)"
      tags:
      - "Study integration as Curator"
  /api/v1/as-curator/integration/link/variant/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getVariantBySampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve variant run-level data by querying related sample ID (accession)"
      tags:
      - "Variant integration as Curator"
  /api/v1/as-curator/integration/link/variant/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getVariantGroupsByStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Variant integration as Curator"
  /api/v1/as-curator/integration/link/variant/group/{sourceId}/to/sample/group/{targetId}:
    delete:
      description: "Delete link between a group of variant objects and a group of\
        \ sample objects"
      operationId: "deleteVariantGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to the column in a VCF file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a group of variant objects and a group of sample\
        \ objects"
      tags:
      - "Variant integration as Curator"
    post:
      description: "Create a link between a group of variant objects and a group of\
        \ sample objects.\n\nA variant object can be linked to one object only. If\
        \ a variant object is already linked to another object, this link will be\
        \ deleted and a new link with the specified object will be created.\nVariant\
        \ objects of the same group can only be linked to objects of the same study.\n\
        \n Users can specify a custom metadata field for linking omics data to samples\
        \ via the “linkingAttribute” parameter, if not specified the “Sample Source\
        \ ID“ sample metadata attribute will be used by default."
      operationId: "createVariantGroupSampleGroupLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the group of run-level objects (corresponding\
          \ to the column in a VCF file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample group object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      - description: "Metadata field containing sample IDs to link omics data to samples.\
          \ The template applied to the study must contain this field in the sample\
          \ section."
        in: "query"
        name: "linkingAttribute"
        schema:
          type: "string"
      responses:
        "200":
          content: {}
          description: "Not all signal data were linked to the samples."
        "204":
          content: {}
          description: "All signal data were linked to the samples from the specified\
            \ sample group."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "Sample group, signal group or samples to the link were not\
            \ found, or the specified linking attribute was not found."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a group of variant objects and a group of sample\
        \ objects"
      tags:
      - "Variant integration as Curator"
  /api/v1/as-curator/integration/link/variant/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getVariantRunToSamplePairsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Variant integration as Curator"
  /api/v1/as-curator/integration/link/variant/{sourceId}/to/sample/{targetId}:
    delete:
      description: "Delete link between a variant object and a sample"
      operationId: "deleteVariantSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link deleted."
        "400":
          content: {}
          description: "Link cannot be deleted."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete link between a variant object and a sample"
      tags:
      - "Variant integration as Curator"
    post:
      description: "Create a link between a variant object and a sample.\n\nA variant\
        \ object can be linked to one object only. If a variant object is already\
        \ linked to another object, this link will be deleted and a new link with\
        \ the specified object will be created.\nVariant objects of the same group\
        \ can only be linked to objects of the same study."
      operationId: "createVariantSampleLinkAsCurator"
      parameters:
      - description: "The ID (accession) of the run-level object (corresponding to\
          \ the column in a VCG/GCT file)"
        in: "path"
        name: "sourceId"
        required: true
        schema:
          type: "string"
      - description: "The ID (accession) of the sample object"
        in: "path"
        name: "targetId"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link created."
        "400":
          content: {}
          description: "Link cannot be created."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create a link between a variant object and a sample"
      tags:
      - "Variant integration as Curator"
  /api/v1/as-curator/integration/fulltext/search/studies:
    post:
      description: "Find studies and retrieve their data by searching via a full-text\
        \ or facets search of study or linked objects metadata (e.g. samples, libraries,\
        \ preparations, omics metadata).  Only studies available to a user are returned.\n\
        \n The endpoint returns:\n - a list of studies with their metadata summary\n\
        \ - a list of facet objects with counts; the facet list can be configured\
        \ in the \"Study Browser\" application using the \"Configure facets\" option\
        \ (by a user with appropriate permissions). For each facet object only the\
        \ first 5 most popular values are returned, these are sorted by the number\
        \ of matching studies in descending order.  Only studies available to the\
        \ user are counted."
      operationId: "searchStudiesByFilterAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStudyRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindObjectsResponse"
          description: "The request was successful. Retrieved studies and filters"
        "400":
          content: {}
          description: "Invalid request body"
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Genestack\
            \ API token in the `Genestack-API-Token` HTTP header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      summary: "Find and retrieve studies via full-text or facet query"
      tags:
      - "Study integration as Curator"
      x-codegen-request-body-name: "request"
  /api/v1/as-curator/links:
    delete:
      description: "This method should be used in case you want to delete the links\
        \ of an object. Please, keep in mind that deleting a link between Study and\
        \ Sample will not delete a link between corresponding Sample and it’s signal."
      operationId: "deleteLinkAsCurator"
      parameters:
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "firstId"
        required: true
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "firstType"
        schema:
          type: "string"
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "secondId"
        required: true
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "secondType"
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "Link has been successfully deleted."
        "400":
          content: {}
          description: "Invalid data in request."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No links were found."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Deletes existing links matching the specified criteria."
      tags:
      - "Linkage as Curator"
    get:
      description: "Please make sure that this endpoint should be used only for getting\
        \ all links to a specific object. In case you specify both firstId and secondId\
        \ an expected answer would be true for existing links and false for no link\
        \ between the objects."
      operationId: "getLinksByParamsAsCurator"
      parameters:
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "firstId"
        required: true
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "firstType"
        schema:
          type: "string"
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "secondId"
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "secondType"
        schema:
          type: "string"
      - description: "Param says to skip that many links before beginning to return\
          \ links."
        in: "query"
        name: "offset"
        schema:
          default: 0
          format: "int32"
          type: "integer"
      - description: "Param says to limit the count of returned links."
        in: "query"
        name: "limit"
        schema:
          default: 1000
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Finds existing links matching the specified criteria."
      tags:
      - "Linkage as Curator"
    post:
      description: "This method should be used only in case you need to create links\
        \ between 2 objects. Links are created both ways (e.g. when linking Object\
        \ A to Object B it can be done both ways, by linking firstType to secondType\
        \ and vice versa)."
      operationId: "saveLinksAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/Link"
              type: "array"
        required: false
      responses:
        "200":
          content: {}
          description: "Links were updated or not modified."
        "201":
          content: {}
          description: "At least one new link has been created.Some other links might\
            \ have been updated or not modified."
        "400":
          content: {}
          description: "Invalid data in request."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "409":
          content: {}
          description: "Link cannot be created due to conflict with existing link"
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Creates new links between objects."
      tags:
      - "Linkage as Curator"
      x-codegen-request-body-name: "links"
  /api/v1/as-curator/links/get-batch:
    post:
      description: "Please make sure to use that endpoint for batch calls only. You\
        \ are not allowed to pass 'mixed' objects. e.g. Studies and Samples at the\
        \ same time. Please always specify firstType."
      operationId: "getLinksByIdsAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOfIds"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Finds existing links by passing many IDs. \nPagination goes through\
        \ all links matched the criteria."
      tags:
      - "Linkage as Curator"
      x-codegen-request-body-name: "request"
  /api/v1/as-curator/omics/expression/data:
    get:
      description: "Retrieve any data objects whose linked data matches all supplied\
        \ conditions. \n\nNote: An expression data query must be supplied.\n\n## Conditions\n\
        It is possible to supply conditions for:\n\n1. Samples (full-text or metadata\
        \ key-value pair)\n2. Parent studies (full-text or metadata key-value pair)\n\
        3. Linked variant objects (list of data key-value pairs)\n4. Linked flow cytometry\
        \ objects (list of data key-value pairs)\n5. Linked any data (except variant\
        \ and flow cytometry) objects (list of data key-value pairs)\n\n## Metadata\
        \ full-text queries\nSingle words can be supplied as is; otherwise, use speech\
        \ marks (`\"`) to quote queries that include whitespace. Speech marks and\
        \ backslash characters in the query need to be escaped with a backslash (`\\\
        `).\n\n## Metadata filters\nMetadata filters are key-value pairs joined by\
        \ an operator. The `=` operator matches literal values/string. The `!=` operator\
        \ matches anything except the literal value/string. The `<` or `>` operators\
        \ match numerical results that are less or greater than the supplied value.\
        \ Strings containing whitespace need to be quoted with (`\"`).\n\n## Data\
        \ queries\nData queries must be a list of key-value pairs, separated by whitespace.\
        \ The set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchExpressionDataAsCurator"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve data objects by searching across multiple data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/expression/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchExpressionGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/expression/streamed-data:
    get:
      description: "Stream data from a given group for a tabular file that matches\
        \ a sample/library/preparations query/filter. If no query/filters are supplied\
        \ all expression data is returned. If a metadata filter is specified, this\
        \ endpoint will only return expression data that is associated with a sample\
        \ via the Sample Source ID attribute.\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Libraries (full-text or metadata key-value pair)\n3. Preparations (full-text\
        \ or metadata key-value pair)\n## Metadata full-text queries\nSingle words\
        \ can be supplied as is; otherwise, use speech marks (`\"`) to quote queries\
        \ that include whitespace. Speech marks and backslash characters in the query\
        \ need to be escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata\
        \ filters are key-value pairs joined by an operator. The `=` operator matches\
        \ literal values/string. The `!=` operator matches anything except the literal\
        \ value/string. The `<` or `>` operators match numerical results that are\
        \ less or greater than the supplied value. Strings containing whitespace need\
        \ to be quoted with (`\"`).\n\n## Combinations\nMetadata queries/filters for\
        \ the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n"
      operationId: "omicsSearchStreamedExpressionDataAsCurator"
      parameters:
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `features.NAME=1007_s_at`\
          \ or `features.\"Average Mz\"=2.218`. As in the case of sample metadata\
          \ queries, single words can be supplied as is; otherwise, use speech marks\
          \ (`\"`) to quote queries that include whitespace. \n2. It is possible to\
          \ specify a set of possible values, separated by comma: `features.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`features.Name_1 > 3`: Select all rows where the\
          \ feature attribute Name_1 values are greater than 3. \n`features.Name_2\
          \ >= 6`: Select all rows where the feature attribute Name_2 values are greater\
          \ than or equal to 6. \n`-3 < features.Name_3 < 3`: Select all rows where\
          \ the feature attribute Name_3 values lie within the interval between -3\
          \ and 3. \n4. Use substring search to get the records where the attribute\
          \ field contains the provided substring: `features.attribute1 =~ \"some\
          \ text\"`. \n5. The first column for each original data file is identified\
          \ as feature accession (typically, it contains gene or protein names, accession\
          \ IDs, etc.). Searching by such feature accession would significantly outperform\
          \ more complex queries by combining the other feature attributes. To enable\
          \ such a search, use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`values.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < values.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `features.Name_1!=A`: Select all rows where Name_1 is not A. \n* `features.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `features.Name_1=A\
          \ AND features.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `features.Name_1=A && features.Name_2=B`: Equivalent to the example\
          \ above. \n* `features.Name_1=A OR features.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `features.Name_1=A || features.Name_2=B`:\
          \ Equivalent to the example above. \n* `features.Name_1=A AND (features.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Deprecated; use `exQuery` parameter instead. Filters results\
          \ by the feature column (e.g., Gene ID). The feature parameter value must\
          \ match the name of the identifier in the GCT file (under the NAME column).\
          \ Example: `ENSG00000077044`"
        explode: true
        in: "query"
        name: "featureList"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Accession of the expression group object (GCT)"
        in: "query"
        name: "groupAccession"
        required: true
        schema:
          type: "string"
      - description: "The number of digits after the decimal point for floating-point\
          \ values. The final value is rounded up. Must be non-negative. The default\
          \ is 4."
        in: "query"
        name: "roundDigits"
        schema:
          default: 4
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/StreamingOutput"
          description: "Stream of retrieved Expression data."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Stream data from a given tabular file"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/flow-cytometry/data:
    get:
      description: "Retrieve flow cytometry data objects whose linked data matches\
        \ all supplied conditions.\n\nNote: A flow cytometry data query must be supplied.\n\
        \n## Conditions\nIt is possible to supply conditions for:\n\n1. Samples (full-text\
        \ or metadata key-value pair)\n2. Parent studies (full-text or metadata key-value\
        \ pair)\n3. Linked variant objects (list of data key-value pairs)\n4. Linked\
        \ flow cytometry objects (list of data key-value pairs)\n5. Linked any data\
        \ (except variant and flow cytometry) objects (list of data key-value pairs)\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is; otherwise,\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Data queries\nData queries must be a list of key-value pairs, separated\
        \ by whitespace. The set of valid keys depends on the specific query type,\
        \ and is documented in the query parameter summary. The values can be simple\
        \ non-whitespace strings, or strings enclosed by speech marks (`\"`). Depending\
        \ on the key, the value may be be a comma-delimited list of string values.\
        \ Others require numerical values. Ranges can be supplied with `(0:1)` syntax,\
        \ OR values with `|`.\n\n## Combinations\nMetadata queries/filters for the\
        \ same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchFlowCytometryDataAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve flow cytometry data objects by searching across multiple\
        \ data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/flow-cytometry/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchFlowCytometryGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/samples:
    get:
      description: "Retrieve sample metadata objects whose linked data matches all\
        \ supplied conditions.\n\n## Conditions\nIt is possible to supply conditions\
        \ for:\n\n1. Samples (full-text or metadata key-value pair)\n2. Parent studies\
        \ (full-text or metadata key-value pair)\n3. Linked variant objects (list\
        \ of data key-value pairs)\n4. Linked flow cytometry objects (list of data\
        \ key-value pairs)\n5. Linked any data (except variant and flow cytometry)\
        \ objects (list of data key-value pairs)\n\n## Metadata full-text queries\n\
        Single words can be supplied as is; otherwise, use speech marks (`\"`) to\
        \ quote queries that include whitespace. Speech marks and backslash characters\
        \ in the query need to be escaped with a backslash (`\\`).\n\n## Metadata\
        \ filters\nMetadata filters are key-value pairs joined by an operator. The\
        \ `=` operator matches literal values/string. The `!=` operator matches anything\
        \ except the literal value/string. The `<` or `>` operators match numerical\
        \ results that are less or greater than the supplied value. Strings containing\
        \ whitespace need to be quoted with (`\"`).\n\n## Data queries\nData queries\
        \ must be a list of key-value pairs, separated by whitespace. The set of valid\
        \ keys depends on the specific query type, and is documented in the query\
        \ parameter summary. The values can be simple non-whitespace strings, or strings\
        \ enclosed by speech marks (`\"`). Depending on the key, the value may be\
        \ be a comma-delimited list of string values. Others require numerical values.\
        \ Ranges can be supplied with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\n\
        Metadata queries/filters for the same parameter can be combined with `&&`,\
        \ `AND`, `||` and `OR` operators, using white-space to separate out the terms\
        \ and operators. Parentheses `( )` can be used for complex expressions.\n\n\
        ## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchSamplesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata objects by searching across multiple data\
        \ types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/variant/data:
    get:
      description: "Retrieve variant data objects whose linked data matches all supplied\
        \ conditions.\n\nNote: A variant data query must be supplied.\n\n## Conditions\n\
        It is possible to supply conditions for:\n\n1. Samples (full-text or metadata\
        \ key-value pair)\n2. Parent studies (full-text or metadata key-value pair)\n\
        3. Linked variant objects (list of data key-value pairs)\n4. Linked expression\
        \ objects (list of data key-value pairs)\n5. Linked any data (except variant\
        \ and flow cytometry) objects (list of data key-value pairs)\n\n## Metadata\
        \ full-text queries\nSingle words can be supplied as is; otherwise, use speech\
        \ marks (`\"`) to quote queries that include whitespace. Speech marks and\
        \ backslash characters in the query need to be escaped with a backslash (`\\\
        `).\n\n## Metadata filters\nMetadata filters are key-value pairs joined by\
        \ an operator. The `=` operator matches literal values/string. The `!=` operator\
        \ matches anything except the literal value/string. The `<` or `>` operators\
        \ match numerical results that are less or greater than the supplied value.\
        \ Strings containing whitespace need to be quoted with (`\"`).\n\n## Data\
        \ queries\nData queries must be a list of key-value pairs, separated by whitespace.\
        \ The set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchVariantDataAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve variant data objects by searching across multiple data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/omics/variant/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchVariantGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as Curator"
  /api/v1/as-curator/integration/studies/{id}/tasks/publish-versions:
    post:
      description: "This endpoint publishes information from staging and creates new\
        \ metadata versions for the specified study and all associated objects. The\
        \ version name is set to “Auto-published by API call”. Only curators with\
        \ access to the specified studies can use this method."
      operationId: "publishStudyByAccessionAsCurator"
      parameters:
      - description: "Supply the accession of the study to be published"
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Supply text to name this version. If not supplied the version\
          \ name is set to “Auto-published by API call”"
        in: "query"
        name: "versionMessage"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInfo"
          description: "Task information."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Forbidden"
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Asynchronous task that publishes all pending versions for a single\
        \ study."
      tags:
      - "Metadata versioning as Curator"
  /api/v1/as-curator/integration/studies/{id}/validation-summary:
    get:
      operationId: "searchExpressionDataAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyValidationSummary"
          description: "Study validation result."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve validation summary by querying study ID (accession)"
      tags:
      - "Validation summary as Curator"
  /api/v1/as-user/data-types:
    get:
      description: "This endpoint is for instructional uses and can be used to get\
        \ the latest list of Data Types."
      operationId: "getDataTypesAsUser"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: "string"
                type: "array"
                uniqueItems: true
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Lists all available data types."
      tags:
      - "Linkage as User"
  /api/v1/as-user/data-types/links:
    get:
      description: "This endpoint should be used for instructional needs, and can\
        \ be used in order to get the links between the Data Types."
      operationId: "getDataTypesLinksAsUser"
      parameters:
      - description: "Return only links with the specified data type."
        in: "query"
        name: "type"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SourceTypePair"
                type: "array"
                uniqueItems: true
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List all possible links between data types that match the specified\
        \ criteria."
      tags:
      - "Linkage as User"
  /api/v1/as-user/integration/link/expression/by/library/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionByLibraryAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related library ID\
        \ (accession)"
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/by/preparation/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionByPreparationAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related preparation\
        \ ID (accession)"
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getExpressionBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve expression run-level data by querying related sample ID (accession)"
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getExpressionGroupsByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/run-to-libraries/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToLibraryPairsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-library pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/run-to-preparations/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToPreparationPairsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-preparation pairs by group id. Pagination is based on\
        \ unique runs, not unique pairs."
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/expression/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getExpressionRunToSamplePairsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Expression integration as User"
  /api/v1/as-user/integration/link/flow-cytometry/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getFlowCytometryBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve flow cytometry run-level data by querying related sample\
        \ ID (accession)"
      tags:
      - "Flow Cytometry integration as User"
  /api/v1/as-user/integration/link/flow-cytometry/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getFlowCytometryGroupsByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Flow Cytometry integration as User"
  /api/v1/as-user/integration/link/flow-cytometry/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getFlowCytometryRunToSamplePairsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Flow Cytometry integration as User"
  /api/v1/as-user/integration/link/libraries/by/samples:
    get:
      description: "Retrieve library metadata objects whose linked sample metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getLibrariesBySamplesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library metadata by querying related samples"
      tags:
      - "Library integration as User"
  /api/v1/as-user/integration/link/library/by/sample/{id}:
    get:
      operationId: "getLibraryBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: "array"
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: "array"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library metadata by querying related sample ID (accession)"
      tags:
      - "Library integration as User"
  /api/v1/as-user/integration/link/library/group/by/study/{id}:
    get:
      operationId: "getLibraryGroupsByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Library integration as User"
  /api/v1/as-user/integration/link/library/libraries-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getLibraryLinksToSamplesAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve library-samples pairs by group id. Pagination is based on\
        \ unique libraries, not unique pairs."
      tags:
      - "Library integration as User"
  /api/v1/as-user/integration/link/preparation/by/sample/{id}:
    get:
      operationId: "getPreparationBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: "array"
            text/tab-separated-values:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: "array"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparation metadata by querying related sample ID (accession)"
      tags:
      - "Preparation integration as User"
  /api/v1/as-user/integration/link/preparation/group/by/study/{id}:
    get:
      operationId: "getPreparationGroupsByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Preparation integration as User"
  /api/v1/as-user/integration/link/preparation/preparations-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getPreparationLinksToSamplesAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ preparations, not unique pairs."
      tags:
      - "Preparation integration as User"
  /api/v1/as-user/integration/link/preparations/by/samples:
    get:
      description: "Retrieve preparation metadata objects whose linked sample metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getPreparationsBySamplesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparation metadata by querying related samples"
      tags:
      - "Preparation integration as User"
  /api/v1/as-user/integration/link/samples/by/libraries:
    get:
      description: "Retrieve sample metadata objects whose linked library metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getSamplesByLibrariesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related libraries"
      tags:
      - "Sample integration as User"
  /api/v1/as-user/integration/link/samples/by/preparations:
    get:
      description: "Retrieve sample metadata objects whose linked preparation metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getSamplesByPreparationsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related preparations"
      tags:
      - "Sample integration as User"
  /api/v1/as-user/integration/link/samples/by/study/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getSamplesByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata by querying related study ID (accession)"
      tags:
      - "Sample integration as User"
  /api/v1/as-user/integration/link/studies/by/libraries:
    get:
      description: "Retrieve study metadata objects whose linked library metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesByLibrariesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related libraries"
      tags:
      - "Study integration as User"
  /api/v1/as-user/integration/link/studies/by/preparations:
    get:
      description: "Retrieve study metadata objects whose linked preparation metadata\
        \ matches all supplied conditions.\n\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Parent studies (full-text or metadata key-value pair)\n3. Linked variant\
        \ objects (list of data key-value pairs)\n4. Linked flow cytometry objects\
        \ (list of data key-value pairs)\n5. Linked any data (except variant and flow\
        \ cytometry) objects (list of data key-value pairs)\n\n## Metadata full-text\
        \ queries\nSingle words can be supplied as is; otherwise, use speech marks\
        \ (`\"`) to quote queries that include whitespace. Speech marks and backslash\
        \ characters in the query need to be escaped with a backslash (`\\`).\n\n\
        ## Metadata filters\nMetadata filters are key-value pairs joined by an operator.\
        \ The `=` operator matches literal values/string. The `!=` operator matches\
        \ anything except the literal value/string. The `<` or `>` operators match\
        \ numerical results that are less or greater than the supplied value. Strings\
        \ containing whitespace need to be quoted with (`\"`).\n\n## Data queries\n\
        Data queries must be a list of key-value pairs, separated by whitespace. The\
        \ set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesByPreparationsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related preparations"
      tags:
      - "Study integration as User"
  /api/v1/as-user/integration/link/studies/by/samples:
    get:
      description: "Retrieve study metadata objects whose linked sample metadata matches\
        \ all supplied conditions.\n\n## Conditions\nIt is possible to supply conditions\
        \ for:\n\n1. Samples (full-text or metadata key-value pair)\n2. Parent studies\
        \ (full-text or metadata key-value pair)\n3. Linked variant objects (list\
        \ of data key-value pairs)\n4. Linked flow cytometry objects (list of data\
        \ key-value pairs)\n5. Linked any data (except variant and flow cytometry)\
        \ objects (list of data key-value pairs)\n\n## Metadata full-text queries\n\
        Single words can be supplied as is; otherwise, use speech marks (`\"`) to\
        \ quote queries that include whitespace. Speech marks and backslash characters\
        \ in the query need to be escaped with a backslash (`\\`).\n\n## Metadata\
        \ filters\nMetadata filters are key-value pairs joined by an operator. The\
        \ `=` operator matches literal values/string. The `!=` operator matches anything\
        \ except the literal value/string. The `<` or `>` operators match numerical\
        \ results that are less or greater than the supplied value. Strings containing\
        \ whitespace need to be quoted with (`\"`).\n\n## Data queries\nData queries\
        \ must be a list of key-value pairs, separated by whitespace. The set of valid\
        \ keys depends on the specific query type, and is documented in the query\
        \ parameter summary. The values can be simple non-whitespace strings, or strings\
        \ enclosed by speech marks (`\"`). Depending on the key, the value may be\
        \ be a comma-delimited list of string values. Others require numerical values.\
        \ Ranges can be supplied with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\n\
        Metadata queries/filters for the same parameter can be combined with `&&`,\
        \ `AND`, `||` and `OR` operators, using white-space to separate out the terms\
        \ and operators. Parentheses `( )` can be used for complex expressions.\n\n\
        ## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getStudiesBySamplesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ \"Species or strain\"=\"Homo sapiens\""
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for study metadata objects via a full-text query over\
          \ all sample metadata fields. E.g. \"RNA-Seq of human dendritic cells\"\
          . Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata objects by querying related samples"
      tags:
      - "Study integration as User"
  /api/v1/as-user/integration/link/study/by/sample/{id}:
    get:
      operationId: "getStudyBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve study metadata by querying sample ID (accession)"
      tags:
      - "Study integration as User"
  /api/v1/as-user/integration/fulltext/search/studies:
    post:
      description: "Find studies and retrieve their data by searching via a full-text\
        \ or facets search of study or linked objects metadata (e.g. samples, libraries,\
        \ preparations, omics metadata).  Only studies available to a user are returned.\n\
        \n The endpoint returns:\n - a list of studies with their metadata summary\n\
        \ - a list of facet objects with counts; the facet list can be configured\
        \ in the \"Study Browser\" application using the \"Configure facets\" option\
        \ (by a user with appropriate permissions). For each facet object only the\
        \ first 5 most popular values are returned, these are sorted by the number\
        \ of matching studies in descending order.  Only studies available to the\
        \ user are counted."
      operationId: "searchStudiesByFilterAsUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStudyRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindObjectsResponse"
          description: "The request was successful. Retrieved studies and filters"
        "400":
          content: {}
          description: "Invalid request body"
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Genestack\
            \ API token in the `Genestack-API-Token` HTTP header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      summary: "Find and retrieve studies via full-text or facet query"
      tags:
      - "Study integration as User"
      x-codegen-request-body-name: "request"
  /api/v1/as-user/integration/link/variant/by/sample/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n * pageLimit` until the `resultsExhausted`\
        \ response field is true.\n\n"
      operationId: "getVariantBySampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve variant run-level data by querying related sample ID (accession)"
      tags:
      - "Variant integration as User"
  /api/v1/as-user/integration/link/variant/group/by/study/{id}:
    get:
      description: "## Versioning\nSpecific versions of omics data files (eg. GCT)\
        \ can be queried via the useVersions parameter. Different versions of an omics\
        \ data file are associated via their CHAIN_ID metadata value. This CHAIN_ID\
        \ can be supplied to the useVersions parameter along with the version number\
        \ or specific omics data file accessions to include them in the query. If\
        \ nothing is supplied to the useVersions parameter then only the active version\
        \ (which is usually the last one imported) is queried. This acts as a filter\
        \ before the rest of the query is carried out.\n\nExample usage:\nuseVersions=*\
        \ (query all versions, including those without CHAIN_IDs)\nuseVersions=v2\
        \ (query the second version. If there is no second version then the data file\
        \ is not queried)\nuseVersions=v1,v0 (query the first version and any data\
        \ files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files\
        \ with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n"
      operationId: "getVariantGroupsByStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MetadataWithId"
                type: "array"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group metadata by querying study ID (accession)"
      tags:
      - "Variant integration as User"
  /api/v1/as-user/integration/link/variant/run-to-samples/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "getVariantRunToSamplePairsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run-sample pairs by group id. Pagination is based on unique\
        \ runs, not unique pairs."
      tags:
      - "Variant integration as User"
  /api/v1/as-user/links:
    get:
      description: "Please make sure that this endpoint should be used only for getting\
        \ all links to a specific object. In case you specify both firstId and secondId\
        \ an expected answer would be true for existing links and false for no link\
        \ between the objects."
      operationId: "getLinksByParamsAsUser"
      parameters:
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "firstId"
        required: true
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "firstType"
        schema:
          type: "string"
      - description: "Object ID (accession) (e.g. accession of study)"
        in: "query"
        name: "secondId"
        schema:
          type: "string"
      - description: "Type of the object (e.g. study)"
        in: "query"
        name: "secondType"
        schema:
          type: "string"
      - description: "Param says to skip that many links before beginning to return\
          \ links."
        in: "query"
        name: "offset"
        schema:
          default: 0
          format: "int32"
          type: "integer"
      - description: "Param says to limit the count of returned links."
        in: "query"
        name: "limit"
        schema:
          default: 1000
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Finds existing links matching the specified criteria."
      tags:
      - "Linkage as User"
  /api/v1/as-user/links/get-batch:
    post:
      description: "Please make sure to use that endpoint for batch calls only. You\
        \ are not allowed to pass 'mixed' objects. e.g. Studies and Samples at the\
        \ same time. Please always specify firstType."
      operationId: "getLinksByIdsAsUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchOfIds"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "Entities cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Finds existing links by passing many IDs. \nPagination goes through\
        \ all links matched the criteria."
      tags:
      - "Linkage as User"
      x-codegen-request-body-name: "request"
  /api/v1/as-user/omics/expression/data:
    get:
      description: "Retrieve any data objects whose linked data matches all supplied\
        \ conditions. \n\nNote: An expression data query must be supplied.\n\n## Conditions\n\
        It is possible to supply conditions for:\n\n1. Samples (full-text or metadata\
        \ key-value pair)\n2. Parent studies (full-text or metadata key-value pair)\n\
        3. Linked variant objects (list of data key-value pairs)\n4. Linked flow cytometry\
        \ objects (list of data key-value pairs)\n5. Linked any data (except variant\
        \ and flow cytometry) objects (list of data key-value pairs)\n\n## Metadata\
        \ full-text queries\nSingle words can be supplied as is; otherwise, use speech\
        \ marks (`\"`) to quote queries that include whitespace. Speech marks and\
        \ backslash characters in the query need to be escaped with a backslash (`\\\
        `).\n\n## Metadata filters\nMetadata filters are key-value pairs joined by\
        \ an operator. The `=` operator matches literal values/string. The `!=` operator\
        \ matches anything except the literal value/string. The `<` or `>` operators\
        \ match numerical results that are less or greater than the supplied value.\
        \ Strings containing whitespace need to be quoted with (`\"`).\n\n## Data\
        \ queries\nData queries must be a list of key-value pairs, separated by whitespace.\
        \ The set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchExpressionDataAsUser"
      parameters:
      - description: "Allows to get an extended or updated response body. Available\
          \ values:\n `term_id` - returns extended information including IDs for values\
          \ and dictionaries;\n `multi_values` - returns data with several feature\
          \ attributes and several sample measurements in the response body in case\
          \ the original data had them. If not specified, returns only the first feature\
          \ identifier and the first measurement per sample from the original data."
        explode: true
        in: "query"
        name: "responseFormat"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve data objects by searching across multiple data types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/expression/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchExpressionGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/expression/streamed-data:
    get:
      description: "Stream data from a given group for a tabular file that matches\
        \ a sample/library/preparations query/filter. If no query/filters are supplied\
        \ all expression data is returned. If a metadata filter is specified, this\
        \ endpoint will only return expression data that is associated with a sample\
        \ via the Sample Source ID attribute.\n## Conditions\nIt is possible to supply\
        \ conditions for:\n\n1. Samples (full-text or metadata key-value pair)\n2.\
        \ Libraries (full-text or metadata key-value pair)\n3. Preparations (full-text\
        \ or metadata key-value pair)\n## Metadata full-text queries\nSingle words\
        \ can be supplied as is; otherwise, use speech marks (`\"`) to quote queries\
        \ that include whitespace. Speech marks and backslash characters in the query\
        \ need to be escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata\
        \ filters are key-value pairs joined by an operator. The `=` operator matches\
        \ literal values/string. The `!=` operator matches anything except the literal\
        \ value/string. The `<` or `>` operators match numerical results that are\
        \ less or greater than the supplied value. Strings containing whitespace need\
        \ to be quoted with (`\"`).\n\n## Combinations\nMetadata queries/filters for\
        \ the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n  \n\n## Error Handling\n  In case\
        \ of unexpected internal error during data retrieval, the last line of the\
        \ body will contain an error message, prefixed by the `#` character \n\n"
      operationId: "omicsSearchStreamedExpressionDataAsUser"
      parameters:
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.`\"\
          Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `features.NAME=1007_s_at`\
          \ or `features.\"Average Mz\"=2.218`. As in the case of sample metadata\
          \ queries, single words can be supplied as is; otherwise, use speech marks\
          \ (`\"`) to quote queries that include whitespace. \n2. It is possible to\
          \ specify a set of possible values, separated by comma: `features.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`features.Name_1 > 3`: Select all rows where the\
          \ feature attribute Name_1 values are greater than 3. \n`features.Name_2\
          \ >= 6`: Select all rows where the feature attribute Name_2 values are greater\
          \ than or equal to 6. \n`-3 < features.Name_3 < 3`: Select all rows where\
          \ the feature attribute Name_3 values lie within the interval between -3\
          \ and 3. \n4. Use substring search to get the records where the attribute\
          \ field contains the provided substring: `features.attribute1 =~ \"some\
          \ text\"`. \n5. The first column for each original data file is identified\
          \ as feature accession (typically, it contains gene or protein names, accession\
          \ IDs, etc.). Searching by such feature accession would significantly outperform\
          \ more complex queries by combining the other feature attributes. To enable\
          \ such a search, use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`values.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < values.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `features.Name_1!=A`: Select all rows where Name_1 is not A. \n* `features.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `features.Name_1=A\
          \ AND features.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `features.Name_1=A && features.Name_2=B`: Equivalent to the example\
          \ above. \n* `features.Name_1=A OR features.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `features.Name_1=A || features.Name_2=B`:\
          \ Equivalent to the example above. \n* `features.Name_1=A AND (features.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Deprecated; use `exQuery` parameter instead. Filters results\
          \ by the feature column (e.g., Gene ID). The feature parameter value must\
          \ match the name of the identifier in the GCT file (under the NAME column).\
          \ Example: `ENSG00000077044`"
        explode: true
        in: "query"
        name: "featureList"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Accession of the expression group object (GCT)"
        in: "query"
        name: "groupAccession"
        required: true
        schema:
          type: "string"
      - description: "The number of digits after the decimal point for floating-point\
          \ values. The final value is rounded up. Must be non-negative. The default\
          \ is 4."
        in: "query"
        name: "roundDigits"
        schema:
          default: 4
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/StreamingOutput"
          description: "Stream of retrieved Expression data."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Stream data from a given tabular file"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/flow-cytometry/data:
    get:
      description: "Retrieve flow cytometry data objects whose linked data matches\
        \ all supplied conditions.\n\nNote: A flow cytometry data query must be supplied.\n\
        \n## Conditions\nIt is possible to supply conditions for:\n\n1. Samples (full-text\
        \ or metadata key-value pair)\n2. Parent studies (full-text or metadata key-value\
        \ pair)\n3. Linked variant objects (list of data key-value pairs)\n4. Linked\
        \ flow cytometry objects (list of data key-value pairs)\n5. Linked any data\
        \ (except variant and flow cytometry) objects (list of data key-value pairs)\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is; otherwise,\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Data queries\nData queries must be a list of key-value pairs, separated\
        \ by whitespace. The set of valid keys depends on the specific query type,\
        \ and is documented in the query parameter summary. The values can be simple\
        \ non-whitespace strings, or strings enclosed by speech marks (`\"`). Depending\
        \ on the key, the value may be be a comma-delimited list of string values.\
        \ Others require numerical values. Ranges can be supplied with `(0:1)` syntax,\
        \ OR values with `|`.\n\n## Combinations\nMetadata queries/filters for the\
        \ same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchFlowCytometryDataAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve flow cytometry data objects by searching across multiple\
        \ data types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/flow-cytometry/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchFlowCytometryGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/samples:
    get:
      description: "Retrieve sample metadata objects whose linked data matches all\
        \ supplied conditions.\n\n## Conditions\nIt is possible to supply conditions\
        \ for:\n\n1. Samples (full-text or metadata key-value pair)\n2. Parent studies\
        \ (full-text or metadata key-value pair)\n3. Linked variant objects (list\
        \ of data key-value pairs)\n4. Linked flow cytometry objects (list of data\
        \ key-value pairs)\n5. Linked any data (except variant and flow cytometry)\
        \ objects (list of data key-value pairs)\n\n## Metadata full-text queries\n\
        Single words can be supplied as is; otherwise, use speech marks (`\"`) to\
        \ quote queries that include whitespace. Speech marks and backslash characters\
        \ in the query need to be escaped with a backslash (`\\`).\n\n## Metadata\
        \ filters\nMetadata filters are key-value pairs joined by an operator. The\
        \ `=` operator matches literal values/string. The `!=` operator matches anything\
        \ except the literal value/string. The `<` or `>` operators match numerical\
        \ results that are less or greater than the supplied value. Strings containing\
        \ whitespace need to be quoted with (`\"`).\n\n## Data queries\nData queries\
        \ must be a list of key-value pairs, separated by whitespace. The set of valid\
        \ keys depends on the specific query type, and is documented in the query\
        \ parameter summary. The values can be simple non-whitespace strings, or strings\
        \ enclosed by speech marks (`\"`). Depending on the key, the value may be\
        \ be a comma-delimited list of string values. Others require numerical values.\
        \ Ranges can be supplied with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\n\
        Metadata queries/filters for the same parameter can be combined with `&&`,\
        \ `AND`, `||` and `OR` operators, using white-space to separate out the terms\
        \ and operators. Parentheses `( )` can be used for complex expressions.\n\n\
        ## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchSamplesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve sample metadata objects by searching across multiple data\
        \ types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/variant/data:
    get:
      description: "Retrieve variant data objects whose linked data matches all supplied\
        \ conditions.\n\nNote: A variant data query must be supplied.\n\n## Conditions\n\
        It is possible to supply conditions for:\n\n1. Samples (full-text or metadata\
        \ key-value pair)\n2. Parent studies (full-text or metadata key-value pair)\n\
        3. Linked variant objects (list of data key-value pairs)\n4. Linked expression\
        \ objects (list of data key-value pairs)\n5. Linked any data (except variant\
        \ and flow cytometry) objects (list of data key-value pairs)\n\n## Metadata\
        \ full-text queries\nSingle words can be supplied as is; otherwise, use speech\
        \ marks (`\"`) to quote queries that include whitespace. Speech marks and\
        \ backslash characters in the query need to be escaped with a backslash (`\\\
        `).\n\n## Metadata filters\nMetadata filters are key-value pairs joined by\
        \ an operator. The `=` operator matches literal values/string. The `!=` operator\
        \ matches anything except the literal value/string. The `<` or `>` operators\
        \ match numerical results that are less or greater than the supplied value.\
        \ Strings containing whitespace need to be quoted with (`\"`).\n\n## Data\
        \ queries\nData queries must be a list of key-value pairs, separated by whitespace.\
        \ The set of valid keys depends on the specific query type, and is documented\
        \ in the query parameter summary. The values can be simple non-whitespace\
        \ strings, or strings enclosed by speech marks (`\"`). Depending on the key,\
        \ the value may be be a comma-delimited list of string values. Others require\
        \ numerical values. Ranges can be supplied with `(0:1)` syntax, OR values\
        \ with `|`.\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Versioning\nSpecific versions of omics data files\
        \ (eg. GCT) can be queried via the useVersions parameter. Different versions\
        \ of an omics data file are associated via their CHAIN_ID metadata value.\
        \ This CHAIN_ID can be supplied to the useVersions parameter along with the\
        \ version number or specific omics data file accessions to include them in\
        \ the query. If nothing is supplied to the useVersions parameter then only\
        \ the active version (which is usually the last one imported) is queried.\
        \ This acts as a filter before the rest of the query is carried out.\n\nExample\
        \ usage:\nuseVersions=* (query all versions, including those without CHAIN_IDs)\n\
        useVersions=v2 (query the second version. If there is no second version then\
        \ the data file is not queried)\nuseVersions=v1,v0 (query the first version\
        \ and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for\
        \ omics data files with a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "omicsSearchVariantDataAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve variant data objects by searching across multiple data types"
      tags:
      - "Omics queries as User"
  /api/v1/as-user/omics/variant/group:
    get:
      description: "Retrieve group objects whose linked data matches all supplied\
        \ conditions.\n\n## Conditions\nIt is possible to supply conditions for:\n\
        \n1. Samples (full-text or metadata key-value pair)\n2. Parent studies (full-text\
        \ or metadata key-value pair)\n3. Linked variant objects (list of data key-value\
        \ pairs)\n4. Linked flow cytometry objects (list of data key-value pairs)\n\
        5. Linked any data (except variant and flow cytometry) objects (list of data\
        \ key-value pairs)\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is; otherwise, use speech marks (`\"`) to quote queries that include\
        \ whitespace. Speech marks and backslash characters in the query need to be\
        \ escaped with a backslash (`\\`).\n\n## Metadata filters\nMetadata filters\
        \ are key-value pairs joined by an operator. The `=` operator matches literal\
        \ values/string. The `!=` operator matches anything except the literal value/string.\
        \ The `<` or `>` operators match numerical results that are less or greater\
        \ than the supplied value. Strings containing whitespace need to be quoted\
        \ with (`\"`).\n\n## Data queries\nData queries must be a list of key-value\
        \ pairs, separated by whitespace. The set of valid keys depends on the specific\
        \ query type, and is documented in the query parameter summary. The values\
        \ can be simple non-whitespace strings, or strings enclosed by speech marks\
        \ (`\"`). Depending on the key, the value may be be a comma-delimited list\
        \ of string values. Others require numerical values. Ranges can be supplied\
        \ with `(0:1)` syntax, OR values with `|`.\n\n## Combinations\nMetadata queries/filters\
        \ for the same parameter can be combined with `&&`, `AND`, `||` and `OR` operators,\
        \ using white-space to separate out the terms and operators. Parentheses `(\
        \ )` can be used for complex expressions.\n\n## Versioning\nSpecific versions\
        \ of omics data files (eg. GCT) can be queried via the useVersions parameter.\
        \ Different versions of an omics data file are associated via their CHAIN_ID\
        \ metadata value. This CHAIN_ID can be supplied to the useVersions parameter\
        \ along with the version number or specific omics data file accessions to\
        \ include them in the query. If nothing is supplied to the useVersions parameter\
        \ then only the active version (which is usually the last one imported) is\
        \ queried. This acts as a filter before the rest of the query is carried out.\n\
        \nExample usage:\nuseVersions=* (query all versions, including those without\
        \ CHAIN_IDs)\nuseVersions=v2 (query the second version. If there is no second\
        \ version then the data file is not queried)\nuseVersions=v1,v0 (query the\
        \ first version and any data files without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3\
        \ (for omics data files with a CHAIN_ID of GSCV002 query the third version)\n\
        useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID\
        \ of GSCV002 query only the specific accessions GSF00494 and GSF000496)\n\n\
        Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;\
        \ separator.\n\n## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size together with a `cursor` tag. To retrieve the\
        \ next page of results please supply this `cursor` tag to resume the query\
        \ from your previous result and get the next page. If there are no more results\
        \ you will just retrieve an empty result.\n\n"
      operationId: "omicsSearchVariantGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n"
        in: "query"
        name: "studyFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all study metadata\
          \ fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries matching\
          \ dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "studyQuery"
        schema:
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n"
        in: "query"
        name: "sampleFilter"
        schema:
          type: "string"
      - description: "Search for objects via a full-text query over all sample metadata\
          \ fields. E.g. `Clozapine`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "sampleQuery"
        schema:
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)). E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "libraryFilter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "libraryQuery"
        schema:
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "preparationFilter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "preparationQuery"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\"  in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Search for objects linked to variant data via data query (key-value\
          \ pair(s)). E.g.  `VariationId=rs548419688|rs544419019`  `Intervals=12:23432-234324,30:234324-23432`\
          \ `Gene=ASPM,BRCA1`  `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)`\
          \  `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`\
          \ `Start=12340` `AllelesNumber=1` `AlterationNumber=2`"
        in: "query"
        name: "vxQuery"
        schema:
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "vxFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to expression data and originally\
          \ uploaded in GCT format via data query, e.g., `feature=ENSG00000230368,ENSG00000188976\
          \ value>=1.50`\n For the case when the original data is represented by multiple\
          \ attributes per feature scenarios, extended filtering syntax is as follows:\
          \ \n1. By feature attribute value for numeric and string attributes: `feature.NAME=1007_s_at`\
          \ or `feature.\"Average Mz\"=2.218`. As in the case of sample metadata queries,\
          \ single words can be supplied as is; otherwise, use speech marks (`\"`)\
          \ to quote queries that include whitespace. \n2. It is possible to specify\
          \ a set of possible values, separated by comma: `feature.NAME=1007_s_at,121_at`.\
          \ \n3. Utilize range filters to search numeric attributes. Apply `<` (less\
          \ than), `>` (greater than), and `=` (equal to) symbols to specify the desired\
          \ ranges as follows: \n`feature.Name_1 > 3`: Select all rows where the feature\
          \ attribute Name_1 values are greater than 3. \n`feature.Name_2 >= 6`: Select\
          \ all rows where the feature attribute Name_2 values are greater than or\
          \ equal to 6. \n`-3 < feature.Name_3 < 3`: Select all rows where the feature\
          \ attribute Name_3 values lie within the interval between -3 and 3. \n4.\
          \ Use substring search to get the records where the attribute field contains\
          \ the provided substring: `feature.attribute1 =~ \"some text\"`. \n5. The\
          \ first column for each original data file is identified as feature accession\
          \ (typically, it contains gene or protein names, accession IDs, etc.). Searching\
          \ by such feature accession would significantly outperform more complex\
          \ queries by combining the other feature attributes. To enable such a search,\
          \ use `feature` without any attribute extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.\n\
          \ \nThe `value` keyword can be used to select rows where the sample (library\
          \ or preparation) measurements has values from a certain range. Examples:\
          \ `value = 3`, `value > 3`, `-3 < value < 3`. When the original data contains\
          \ multiple measurements for a single item, such as a sample (library or\
          \ preparation), use the measurement name to specify the exact column type,\
          \ e.g.: \n1. `value.intensity = 3`: Selects all rows where the measurement\
          \ attribute intensity equals 3. \n `value.intensity != 2,null`: Select all\
          \ rows where the measurement attribute intensity is not equal 2 and is not\
          \ an empty value. \n`value.p_value > 3`: Selects all rows where the measurement\
          \ attribute 'p_value' values are greater than 3. \n`-3 < value.FC < 3`:\
          \ Selects all rows where the measurement attribute 'FC' values lie within\
          \ the interval between -3 and 3.\n \n2. Note: The `MinValue` keyword has\
          \ been deprecated and should be replaced with the aforementioned comparisons.\n\
          \ \nCombine multiple filters for different feature attributes and measurements\
          \ using `AND` (`&&`), `OR` (`||`) logical operators and parentheses: \n\
          * `feature.Name_1!=A`: Select all rows where Name_1 is not A. \n* `feature.Name_1!=A,B,C`:\
          \ Select all rows where Name_1 is not A, B, or C. \n* `feature.Name_1=A\
          \ AND feature.Name_2=B`: Select all rows where Name_1 is A and Name_2 is\
          \ B. \n* `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example\
          \ above. \n* `feature.Name_1=A OR feature.Name_2=B`: Select all rows where\
          \ Name_1 is A or Name_2 is B. \n* `feature.Name_1=A || feature.Name_2=B`:\
          \ Equivalent to the example above. \n* `feature.Name_1=A AND (feature.Name_2=B\
          \ OR value>=1.0)`: Select all rows where Name_1 is A and either Name_2 is\
          \ B or minimal possible measurement value is 1.0."
        in: "query"
        name: "exQuery"
        schema:
          type: "string"
      - description: "Filter by expression metadata (key-value metadata pair(s)).\
          \ E.g. `\"Genome Version\"=hg19-BROAD`."
        in: "query"
        name: "exFilter"
        schema:
          type: "string"
      - description: "Search for objects linked to flow cytometry data via data query\
          \ (key-value pair(s)). E.g. `ReadoutType=Median|Count` `CellPopulation=\"\
          CD45+, live\"` `MinValue=3.5`"
        in: "query"
        name: "fxQuery"
        schema:
          type: "string"
      - description: "Filter by flow cytometry metadata (key-value metadata pair(s)).\
          \ E.g. `Organ=blood`."
        in: "query"
        name: "fxFilter"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template default template\
          \ will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OmicsResponse"
          description: "Omics query result."
        "400":
          content: {}
          description: "Invalid data in request. See error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve group objects by searching across multiple data types"
      tags:
      - "Omics queries as User"
  /api/v1/jobs/import/expression:
    post:
      description: "## Data\n This operation necessitates the URL of a tabular data\
        \ file, which must be either in TSV or GCT 1.2 format. Consult the user guide\
        \ for a comprehensive understanding of the file content requirements. The\
        \ endpoint is capable of handling uploads of any data type, which can be detailed\
        \ in the parameters section, not only Gene Expression data.\n\n## Metadata\n\
        \ It is also possible to optionally supply the URL of a metadata file. This\
        \ metadata will be used as the original metadata for the created objects.\
        \ The file is expected to contain single record with metadata describing the\
        \ uploaded signal file.\n## Metadata file format\n * Extension: any, `.zip`\
        \ and `.gz` extensions are treated as archives and get decompressed\n * Format:\
        \ plain text, Tab-separated format (TSV), attribute names and record values\
        \ are separated  with tabs (`U+0009`),  lines are separated with `CRLF` sequence\
        \ (`U+000D U+000A`)\n * Header: the first line is treated as table header\
        \ that contains attribute names\n * Records: the second line contains the\
        \ values for each of the attributes described in the header line.  Values\
        \ represent single string or list of strings. List values are separated  using\
        \ the \"pipe\" `|` (`U+007C`)  separator. Values are trimmed of whitespace\
        \ before parsing, and a literal `|`  (`U+007C`) character may be escaped by\
        \ repeating it twice.\n * Skip zeros in original data file: If this option\
        \ is selected, zeros in the file will be ignored, thus conserving time and\
        \ space. This option is particularly useful for handling very sparse data\
        \ such as Single Cell data."
      operationId: "startImportExpression"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportExpressionSignalRunRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import any tabular data from TSV or GCT files"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/flow-cytometry:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n    "
      operationId: "startImportFlowCytometry"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSignalRunRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import flow-cytometry data and metadata from FACS and TSV files"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/libraries:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportLibraries"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportMetadataRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import a group of library metadata objects from a TSV file"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/preparations:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportPreparations"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportMetadataRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import a group of preparation metadata objects from a TSV file"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/samples:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportSamples"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportMetadataRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import a group of sample metadata objects from a TSV file"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/study:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportStudy"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportMetadataRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import study metadata from a TSV file"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/import/variant:
    post:
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n    "
      operationId: "startImportVariant"
      parameters:
      - description: "Load duplicate data: the data from the links has already been\
          \ previously loaded into ODM, and for **testing purposes**, you need to\
          \ load this data again."
        in: "query"
        name: "allow_dups"
        schema:
          default: false
          type: "boolean"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSignalRunRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import variation data and metadata from VCF and TSV files"
      tags:
      - "Data import jobs"
      x-codegen-request-body-name: "body"
  /api/v1/jobs/{jobExecId}/info:
    get:
      operationId: "info"
      parameters:
      - in: "path"
        name: "jobExecId"
        required: true
        schema:
          format: "int64"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "get information about one particular job execution"
      tags:
      - "Job operations"
  /api/v1/jobs/{jobExecId}/output:
    get:
      operationId: "output"
      parameters:
      - in: "path"
        name: "jobExecId"
        required: true
        schema:
          format: "int64"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Output"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "retrieve job output (result)"
      tags:
      - "Job operations"
  /api/v1/jobs/{jobExecId}/restart:
    put:
      operationId: "restart"
      parameters:
      - in: "path"
        name: "jobExecId"
        required: true
        schema:
          format: "int64"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "restart stopped (failed) job"
      tags:
      - "Job operations"
  /api/v1/jobs/{jobExecId}/stop:
    put:
      operationId: "stop"
      parameters:
      - in: "path"
        name: "jobExecId"
        required: true
        schema:
          format: "int64"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
          description: "successful operation"
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "stop running job"
      tags:
      - "Job operations"
  /api/v1/as-curator/libraries:
    get:
      description: "Retrieve library metadata objects by searching/listing library\
        \ metadata.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Paging\nFor performance reasons this endpoint\
        \ returns results in \"pages\" of limited size. In order to retrieve all matching\
        \ results the client needs to request multiple pages starting from an offset\
        \ to the first result. You can do this using the pageOffset query parameter.\
        \ A value of 0 (the default) instructs the server to return the first page\
        \ of results, 100 would return a page of results starting from the 101st result\
        \ and so on. To return all results iterate through pages using pageOffset\
        \ values of `n*pageLimit` until the `resultsExhausted` response field is true.\n\
        \n## List operation\n\nThis endpoint can be called with no `query` parameter.\
        \ Doing so returns a list of all variant objects."
      operationId: "searchLibrariesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)).  E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for library metadata objects"
      tags:
      - "Library SPoT as Curator"
    post:
      description: "Libraries metadata import\n\nThis operation requires the URL of\
        \ a libraries metadata file which will be used to library preparations objects.\n\
        \n## Metadata content requirements:\n1. The file should contain a column with\
        \ name \"Library ID\"\n2. The file should contain a column with name \"Sample\
        \ Source ID\"\n3. All records should have distinct ID's (values for \"Sample\
        \ Source ID\").\n4. At least one record should be supplied.\n\n## Metadata\
        \ file format\n* Extension: any, `.zip` and `.gz` extensions are treated as\
        \ archives and get decompressed\n* Format: plain text, Tab-separated format\
        \ (TSV), attribute names and record values are separated with tabs `(U+0009)`,\
        \ lines are separated with `CRLF` sequence `(U+000D U+000A)`\n* Header: the\
        \ first line is treated as table header that contains attribute names\n* Records:\
        \ the second line contains the values for each of the attributes described\
        \ in the header line. Values represent single string or list of strings. List\
        \ values are separated using the \"pipe\" `|` `(U+007C)` separator. Values\
        \ are trimmed of whitespace before parsing, and a literal `|` `(U+007C)` character\
        \ may be escaped by repeating it twice.\n\n## File sources\n* Supported external\
        \ sources (links): `http/https/ftp`"
      operationId: "addLibrariesAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SampleSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Library"
                type: "array"
          description: "Object successfully created."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Add new library object"
      tags:
      - "Library SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/libraries/by/group/{id}:
    get:
      operationId: "getLibrariesByGroupAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve libraries related to the given group"
      tags:
      - "Library SPoT as Curator"
  /api/v1/as-curator/libraries/group/{id}:
    delete:
      operationId: "deleteLibraryGroupAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a library group with all related library objects"
      tags:
      - "Library SPoT as Curator"
  /api/v1/as-curator/libraries/{id}:
    delete:
      operationId: "deleteLibraryAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a library object"
      tags:
      - "Library SPoT as Curator"
    get:
      operationId: "getLibraryAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single library object by ID (accession)"
      tags:
      - "Library SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateLibraryAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update a library object"
      tags:
      - "Library SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/libraries/{id}/versions:
    get:
      operationId: "getLibraryVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Library SPoT as Curator"
  /api/v1/as-curator/libraries/{id}/versions/{version}:
    get:
      operationId: "getLibraryByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single library object by ID (accession)"
      tags:
      - "Library SPoT as Curator"
  /api/v1/as-user/libraries:
    get:
      description: "Retrieve library metadata objects by searching/listing library\
        \ metadata.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Paging\nFor performance reasons this endpoint\
        \ returns results in \"pages\" of limited size. In order to retrieve all matching\
        \ results the client needs to request multiple pages starting from an offset\
        \ to the first result. You can do this using the pageOffset query parameter.\
        \ A value of 0 (the default) instructs the server to return the first page\
        \ of results, 100 would return a page of results starting from the 101st result\
        \ and so on. To return all results iterate through pages using pageOffset\
        \ values of `n*pageLimit` until the `resultsExhausted` response field is true.\n\
        \n## List operation\n\nThis endpoint can be called with no `query` parameter.\
        \ Doing so returns a list of all variant objects."
      operationId: "searchLibrariesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by library metadata (key-value metadata pair(s)).  E.g.\
          \ `\"Library Type\"=RNA-Seq-1`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for library objects via a full-text query over all library\
          \ metadata fields. E.g. `\"illumina HiSeq500\"`. Queries matching dictionary\
          \ terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for library metadata objects"
      tags:
      - "Library SPoT as User"
  /api/v1/as-user/libraries/by/group/{id}:
    get:
      operationId: "getLibrariesByGroupAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve libraries related to the given group"
      tags:
      - "Library SPoT as User"
  /api/v1/as-user/libraries/{id}:
    get:
      operationId: "getLibraryAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single library object by ID (accession)"
      tags:
      - "Library SPoT as User"
  /api/v1/as-user/libraries/{id}/versions:
    get:
      operationId: "getLibraryVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Library SPoT as User"
  /api/v1/as-user/libraries/{id}/versions/{version}:
    get:
      operationId: "getLibraryByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single library object by ID (accession)"
      tags:
      - "Library SPoT as User"
  /api/v1/manage-data/detached-objects:
    get:
      description: "Retrieve various types of detached data objects. An object is\
        \ defined as 'detached' if it lacks any direct or indirect link to a root-level\
        \ object, which in this context is referred to as 'study'.\nStudy is considered\
        \ as detached object itself in case there are no links to objects at a lower\
        \ level.\nData with specific `detachedObjectType` can be retrieved by specifying\
        \ the types in `detachedObjectType` parameter.\nThe detached objects are sorted\
        \ according to their `detachedObjectType` and `genestack:accession`.\nSpecific\
        \ ordering can be observed in the list of supported detached types found below.\n\
        Pagination of the results can be conveniently managed using the `cursor` and\
        \ `limit` parameters.\n Supported types of detached objects (listed in the\
        \ order of retrieval) include:\n * `STUDY`\n * `SAMPLE_GROUP`\n * `LIBRARY_GROUP`\n\
        \ * `PREPARATION_GROUP`\n * `TABULAR_DATA`\n * `GENE_VARIANT`\n * `FLOW_CYTOMETRY`\n\
        \n"
      operationId: "getDetachedObjects"
      parameters:
      - description: "Filter by detached object type. Multiple values can be used\
          \ to filter the data."
        explode: true
        in: "query"
        name: "detachedObjectType"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "limit"
        schema:
          format: "int32"
          type: "integer"
      - description: "This parameter enables retrieval of objects starting from a\
          \ specific point.\n Currently, it represents the accession of the last obtained\
          \ object. However, please note that its functionality might change over\
          \ time, so it is advisable to consider the cursor's content as a general\
          \ string."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetachedCollection"
          description: "Retrieved detached data."
        "400":
          content: {}
          description: "Detached data cannot be retrieved due to Bad Request."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Not enough permissions to call method."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of detached objects"
      tags:
      - "Manage Data"
  /api/v1/manage-data/data:
    delete:
      description: "The objects will be marked for deletion. In case the selected\
        \ object has more than one version, the endpoint deletes all of them. The\
        \ following object types can be deleted by the endpoint:\n * `STUDY`\n * `SAMPLE_GROUP`\n\
        \  * `LIBRARY_GROUP`\n  * `PREPARATION_GROUP`\n  * `TABULAR_DATA`\n * `GENE_VARIANT`\n\
        \ * `FLOW_CYTOMETRY`\n\n Moreover, if the selected object is linked to any\
        \ other data, the endpoint will also delete the linked data associated with\
        \ it according to the specified rules:\n * If you delete a `STUDY`, the entire\
        \ study with all the listed group types, will be removed.\n * Deleting a `SAMPLE_GROUP`\
        \ will result in the removal of all samples associated with this sample group,\
        \ along with any linked `TABULAR_DATA`/`GENE_VARIANT`/`FLOW_CYTOMETRY`/`LIBRARY_GROUP`/`PREPARATION_GROUP`.\
        \ The linked `TABULAR_DATA`/`GENE_VARIANT`/`FLOW_CYTOMETRY` will be deleted,\
        \ even if it is linked to another metadata group.\n * If you delete `TABULAR_DATA`/`GENE_VARIANT`/`FLOW_CYTOMETRY`,\
        \ all associated data, such as links and runs will be removed from ODM."
      operationId: "deleteData"
      parameters:
      - description: "Accessions files to be deleted."
        explode: false
        in: "query"
        name: "accession"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedObject"
          description: "The deletion of the following files and all linked data has\
            \ started."
        "400":
          content: {}
          description: "Deletion could not be performed due to Bad Request."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Not enough permissions to call method."
        "404":
          content: {}
          description: "Some of the provided accessions could not be found in ODM.\
            \ Deletion will not be preformed. Please review your list and repeat the\
            \ attempt."
        "406":
          content: {}
          description: "Some of the provided accessions do not belong to the supported\
            \ object types. Deletion will not be performed. Please review your list\
            \ and repeat the attempt."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete objects from ODM"
      tags:
      - "Manage Data"
  /api/v1/as-curator/preparations:
    get:
      description: "Retrieve preparation metadata objects by searching/listing preparation\
        \ metadata.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Paging\nFor performance reasons this endpoint\
        \ returns results in \"pages\" of limited size. In order to retrieve all matching\
        \ results the client needs to request multiple pages starting from an offset\
        \ to the first result. You can do this using the pageOffset query parameter.\
        \ A value of 0 (the default) instructs the server to return the first page\
        \ of results, 100 would return a page of results starting from the 101st result\
        \ and so on. To return all results iterate through pages using pageOffset\
        \ values of `n*pageLimit` until the `resultsExhausted` response field is true.\n\
        \n## List operation\n\nThis endpoint can be called with no `query` parameter.\
        \ Doing so returns a list of all variant objects."
      operationId: "searchPreparationsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for preparation metadata objects"
      tags:
      - "Preparation SPoT as Curator"
    post:
      description: "Preparations metadata import\n\nThis operation requires the URL\
        \ of a preparations metadata file which will be used to create preparations\
        \ objects.\n\n## Metadata content requirements:\n1. The file should contain\
        \ a column with name \"Preparation ID\"\n2. The file should contain a column\
        \ with name \"Sample Source ID\"\n3. All records should have distinct ID's\
        \ (values for \"Sample Source ID\").\n4. At least one record should be supplied.\n\
        \n## Metadata file format\n* Extension: any, `.zip` and `.gz` extensions are\
        \ treated as archives and get decompressed\n* Format: plain text, Tab-separated\
        \ format (TSV), attribute names and record values are separated with tabs\
        \ `(U+0009)`, lines are separated with `CRLF` sequence `(U+000D U+000A)`\n\
        * Header: the first line is treated as table header that contains attribute\
        \ names\n* Records: the second line contains the values for each of the attributes\
        \ described in the header line. Values represent single string or list of\
        \ strings. List values are separated using the \"pipe\" `|` `(U+007C)` separator.\
        \ Values are trimmed of whitespace before parsing, and a literal `|` `(U+007C)`\
        \ character may be escaped by repeating it twice.\n\n## File sources\n* Supported\
        \ external sources (links): `http/https/ftp`"
      operationId: "addPreparationsAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SampleSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Preparation"
                type: "array"
          description: "Object successfully created."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Add new preparation object"
      tags:
      - "Preparation SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/preparations/by/group/{id}:
    get:
      operationId: "getPreparationsByGroupAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparations related to the given group"
      tags:
      - "Preparation SPoT as Curator"
  /api/v1/as-curator/preparations/group/{id}:
    delete:
      operationId: "deletePreparationGroupAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a preparation group with all related preparation objects"
      tags:
      - "Preparation SPoT as Curator"
  /api/v1/as-curator/preparations/{id}:
    delete:
      operationId: "deletePreparationAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a preparation object"
      tags:
      - "Preparation SPoT as Curator"
    get:
      operationId: "getPreparationAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preparation"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single preparation object by ID (accession)"
      tags:
      - "Preparation SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updatePreparationAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preparation"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update a preparation object"
      tags:
      - "Preparation SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/preparations/{id}/versions:
    get:
      operationId: "getPreparationVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Preparation SPoT as Curator"
  /api/v1/as-curator/preparations/{id}/versions/{version}:
    get:
      operationId: "getPreparationByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preparation"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single preparation object by ID (accession)"
      tags:
      - "Preparation SPoT as Curator"
  /api/v1/as-user/preparations:
    get:
      description: "Retrieve preparation metadata objects by searching/listing preparation\
        \ metadata.\n\n## Metadata full-text queries\nSingle words can be supplied\
        \ as is, otherwise use speech marks (`\"`) to quote queries that include whitespace.\
        \ Speech marks and backslash characters in the query need to be escaped with\
        \ a backslash (`\\`).\n\n## Metadata filters\nMetadata filters are key-value\
        \ pairs joined by an operator. The `=` operator matches literal values/string.\
        \ The `!=` operator matches anything except the literal value/string. The\
        \ `<` or `>` operators match numerical results that are less or greater than\
        \ the supplied value. Strings containing whitespace need to be quoted with\
        \ (`\"`).\n\n## Combinations\nMetadata queries/filters for the same parameter\
        \ can be combined with `&&`, `AND`, `||` and `OR` operators, using white-space\
        \ to separate out the terms and operators. Parentheses `( )` can be used for\
        \ complex expressions.\n\n## Paging\nFor performance reasons this endpoint\
        \ returns results in \"pages\" of limited size. In order to retrieve all matching\
        \ results the client needs to request multiple pages starting from an offset\
        \ to the first result. You can do this using the pageOffset query parameter.\
        \ A value of 0 (the default) instructs the server to return the first page\
        \ of results, 100 would return a page of results starting from the 101st result\
        \ and so on. To return all results iterate through pages using pageOffset\
        \ values of `n*pageLimit` until the `resultsExhausted` response field is true.\n\
        \n## List operation\n\nThis endpoint can be called with no `query` parameter.\
        \ Doing so returns a list of all variant objects."
      operationId: "searchPreparationsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by preparation metadata (key-value metadata pair(s)).\
          \ E.g. `Digestion=Trypsin`"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for preparation objects via a full-text query over all\
          \ preparation metadata fields. E.g. `\"reversed-phase liquid chromatography\"\
          `. Queries matching dictionary terms are automatically expanded to include\
          \ synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for preparation metadata objects"
      tags:
      - "Preparation SPoT as User"
  /api/v1/as-user/preparations/by/group/{id}:
    get:
      operationId: "getPreparationsByGroupAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve preparations related to the given group"
      tags:
      - "Preparation SPoT as User"
  /api/v1/as-user/preparations/{id}:
    get:
      operationId: "getPreparationAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preparation"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single preparation object by ID (accession)"
      tags:
      - "Preparation SPoT as User"
  /api/v1/as-user/preparations/{id}/versions:
    get:
      operationId: "getPreparationVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Preparation SPoT as User"
  /api/v1/as-user/preparations/{id}/versions/{version}:
    get:
      operationId: "getPreparationByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preparation"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single preparation object by ID (accession)"
      tags:
      - "Preparation SPoT as User"
  /api/v1/xrefsets:
    post:
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/XrefSetCreateRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XrefSetCreateResponse"
          description: "successful operation"
        "201":
          content: {}
          description: "The objects were successfully created. The returned value\
            \ is a list of created objects."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details"
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Not enough permissions to work with the xrefset."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Import a new xrefset file"
      tags:
      - "Xrefset queries"
      x-codegen-request-body-name: "body"
  /api/v1/xrefsets/entries:
    get:
      description: "## Conditions\nIt is possible to supply a list of values for \"\
        targetId\" and \"sourceId\". If non-empty lists of values for \"targetId\"\
        \ and \"sourceId\" are supplied, the following search rule is applied: (sourceId\
        \ = \"S1\" OR .. sourceId = \"Sn\") AND (targetId = \"T1\" OR .. targetId\
        \ = \"Tm\").\n\n"
      operationId: "searchEntries"
      parameters:
      - description: "Supply sourceId in the format \"sourceId\". For transcript-gene\
          \ mapping this is gene ID, e.g. \"ENSG00000146648\""
        explode: true
        in: "query"
        name: "sourceId"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Supply targetId in the format \"targetId\". For transcript-gene\
          \ mapping this is transcript ID, e.g. \"ENST00000617423.4\""
        explode: true
        in: "query"
        name: "targetId"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XrefSetSearchResult"
          description: "Json object with the cursor and json array of retrieved xrefset\
            \ data. Response entries are ordered by xrefset ID and then by source\
            \ ID."
        "400":
          content: {}
          description: "Invalid data in the request. See the error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of entries across all xrefsets for given sourceId\
        \ and targetId"
      tags:
      - "Xrefset queries"
  /api/v1/xrefsets/{id}:
    delete:
      operationId: "deleteFile"
      parameters:
      - description: "xrefset ID"
        in: "path"
        name: "id"
        required: true
        schema:
          pattern: ".*"
          type: "string"
      responses:
        "204":
          content: {}
          description: "Xrefset file successfully marked for deletion, mappings have\
            \ been removed"
        "400":
          content: {}
          description: "Invalid data in the request. See the error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Not enough permissions to work with the xrefset."
        "404":
          content: {}
          description: "The xrefset does not exist."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a xrefset with all related data.\nOnly users who uploaded the\
        \ xrefset are allowed to delete it."
      tags:
      - "Xrefset queries"
  /api/v1/xrefsets/{id}/entries:
    get:
      description: "## Conditions\nIt is possible to supply a list of values for \"\
        targetId\" and \"sourceId\". If non-empty lists of values for \"targetId\"\
        \ and \"sourceId\" are supplied, the following search rule is applied: (sourceId\
        \ = \"S1\" OR .. sourceId = \"Sn\") AND (targetId = \"T1\" OR .. targetId\
        \ = \"Tm\").\n\n"
      operationId: "searchEntriesWithinFile"
      parameters:
      - description: "xrefset ID"
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Supply sourceId in the format \"sourceId\". For transcript-gene\
          \ mapping this is gene ID, e.g. \"ENSG00000146648\""
        explode: true
        in: "query"
        name: "sourceId"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "Supply targetId in the format \"targetId\". For transcript-gene\
          \ mapping this is transcript ID, e.g. \"ENST00000617423.4\""
        explode: true
        in: "query"
        name: "targetId"
        schema:
          items:
            type: "string"
          type: "array"
        style: "form"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      - description: "This parameter determines the number of results to retrieve\
          \ per page, with the default set at 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XrefSetSearchResult"
          description: "Json object with the cursor and json array of retrieved xrefset\
            \ data. Response entries are ordered by xrefset ID and then by source\
            \ ID."
        "400":
          content: {}
          description: "Invalid data in the request. See the error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "The xrefset does not exist."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of entries for the given xrefset and given sourceId\
        \ and targetId"
      tags:
      - "Xrefset queries"
  /api/v1/xrefsets/{id}/metadata:
    get:
      operationId: "getDetailsByAccession"
      parameters:
      - description: "xrefset ID"
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XrefSetMetadata"
          description: "Object containing xrefset details, including user submitted\
            \ metadata and system info"
        "400":
          content: {}
          description: "Invalid data in the request. See the error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "The xrefset does not exist."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve xrefset details"
      tags:
      - "Xrefset queries"
  /api/v1/as-curator/samples:
    get:
      description: "Retrieve sample metadata objects by searching/listing sample metadata.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Paging\nFor performance reasons this endpoint returns results in \"pages\"\
        \ of limited size. In order to retrieve all matching results the client needs\
        \ to request multiple pages starting from an offset to the first result. You\
        \ can do this using the pageOffset query parameter. A value of 0 (the default)\
        \ instructs the server to return the first page of results, 100 would return\
        \ a page of results starting from the 101st result and so on. To return all\
        \ results iterate through pages using pageOffset values of `n*pageLimit` until\
        \ the `resultsExhausted` response field is true.\n\n## List operation\n\n\
        This endpoint can be called with no `query` parameter. Doing so returns a\
        \ list of all variant objects."
      operationId: "searchSamplesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for sample objects via a full-text query over all sample\
          \ metadata fields. E.g. `Clozapine`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for sample metadata objects"
      tags:
      - "Sample SPoT as Curator"
    post:
      description: "## Samples metadata import\n This operation requires the URL of\
        \ a samples metadata file which will be used to create sample objects.  Each\
        \ record in the file should corresponds to a distinct sample.\n ## Metadata\
        \ content requirements:\n 1. The file should contain a column with name \"\
        Sample Source\" - an id of external database,  where data came from (GEO,\
        \ ArrayExpress and so on).\n 2. The file should contain a column with name\
        \ \"Sample Source ID\" - the id of that object within that database.\n 3.\
        \ All records should have distinct ID's (values for \"Sample Source ID\").\n\
        \ 4. At least one record should be supplied.\n ## Metadata file format\n *\
        \ Extension: any, `.zip` and `.gz` extensions are treated as archives and\
        \ get decompressed\n * Format: plain text, Tab-separated format (TSV), attribute\
        \ names and record values are separated  with tabs (`U+0009`),  lines are\
        \ separated with `CRLF` sequence (`U+000D U+000A`)\n * Header: the first line\
        \ is treated as table header that contains attribute names\n * Records: the\
        \ second line contains the values for each of the attributes described in\
        \ the header line.  Values represent single string or list of strings. List\
        \ values are separated  using the \"pipe\" `|` (`U+007C`)  separator. Values\
        \ are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`)\
        \ character may be escaped by repeating it twice.\n ## File sources\n * Supported\
        \ external sources (links): `http`/`https`/`ftp`"
      operationId: "addSamplesAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SampleSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Sample"
                type: "array"
          description: "Object successfully created."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Add new sample object"
      tags:
      - "Sample SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/samples/{id}:
    delete:
      operationId: "deleteSampleAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a sample object"
      tags:
      - "Sample SPoT as Curator"
    get:
      operationId: "getSampleAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample object by ID (accession)"
      tags:
      - "Sample SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateSampleAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update a sample object"
      tags:
      - "Sample SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/samples/{id}/versions:
    get:
      operationId: "getSampleVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Sample SPoT as Curator"
  /api/v1/as-curator/samples/{id}/versions/{version}:
    get:
      operationId: "getSampleByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample object by ID (accession)"
      tags:
      - "Sample SPoT as Curator"
  /api/v1/as-user/samples:
    get:
      description: "Retrieve sample metadata objects by searching/listing sample metadata.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Paging\nFor performance reasons this endpoint returns results in \"pages\"\
        \ of limited size. In order to retrieve all matching results the client needs\
        \ to request multiple pages starting from an offset to the first result. You\
        \ can do this using the pageOffset query parameter. A value of 0 (the default)\
        \ instructs the server to return the first page of results, 100 would return\
        \ a page of results starting from the 101st result and so on. To return all\
        \ results iterate through pages using pageOffset values of `n*pageLimit` until\
        \ the `resultsExhausted` response field is true.\n\n## List operation\n\n\
        This endpoint can be called with no `query` parameter. Doing so returns a\
        \ list of all variant objects."
      operationId: "searchSamplesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by sample metadata (key-value metadata pair(s)). E.g.\
          \ `\"Species or strain\"=\"Homo sapiens\"`\n\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for sample objects via a full-text query over all sample\
          \ metadata fields. E.g. `Clozapine`. Queries matching dictionary terms are\
          \ automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for sample metadata objects"
      tags:
      - "Sample SPoT as User"
  /api/v1/as-user/samples/{id}:
    get:
      operationId: "getSampleAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample object by ID (accession)"
      tags:
      - "Sample SPoT as User"
  /api/v1/as-user/samples/{id}/versions:
    get:
      operationId: "getSampleVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Sample SPoT as User"
  /api/v1/as-user/samples/{id}/versions/{version}:
    get:
      operationId: "getSampleByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single sample object by ID (accession)"
      tags:
      - "Sample SPoT as User"
  /api/v1/scim/Groups:
    get:
      description: "The endpoint returns a list of groups that the user has access\
        \ to: where the user is a member of the group or if the user has the \"Manage\
        \ Groups\" permission, then a list of all groups.\n The list can be filtered\
        \ by group attributes using the filter parameter. If no filtering parameters\
        \ are passed, then all available groups are returned. If there are no groups\
        \ in the response body, the endpoint returns 200 OK."
      operationId: "findGroups"
      parameters:
      - description: "Filter by group attributes. The parameter name is case-sensitive,\
          \ therefore parameters FILTER, fiLter, and other options are ignored.\n\
          \ Supported operators:\n &nbsp;&nbsp;eq - equal, the attribute and operator\
          \ values must be identical for a match;\n &nbsp;&nbsp;Using other operators\
          \ returns an error.\n Groups can be filtered by displayName only.\n Attribute\
          \ names and attribute operators used in filters are case insensitive.\n\
          \ Examples of the request:\n &nbsp;&nbsp;filter=displayName eq \"Curator\"\
          ."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "If excludedAttributes=members is specified in the request, groups\
          \ are returned without the members attribute. Other attributes are not supported\
          \ in excludedAttributes parameter and ignored in the request → all attributes\
          \ are returned in the response body."
        in: "query"
        name: "excludedAttributes"
        schema:
          type: "string"
      - description: "The 1-based index of the first result in the current set of\
          \ list results."
        in: "query"
        name: "startIndex"
        schema:
          format: "int32"
          type: "integer"
      - description: "The number of resources returned in a list response page. The\
          \ value by default is 100."
        in: "query"
        name: "count"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/FilterGroupsResponse"
          description: "The request was successful."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Incorrect syntax in the request. See the error message for\
            \ details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of available groups"
      tags:
      - "Groups"
    post:
      description: "The endpoint creates a new user group in ODM. The endpoint does\
        \ not update an existing group. A user who calls the endpoint is added to\
        \ the group automatically with the \"Group admin\" role. The \"members\" attribute\
        \ in the request body must be empty, otherwise the endpoint returns an error.\n\
        \ The endpoint does not require any user permission.\n The endpoint does not\
        \ check the uniqueness of the group name. The user can create any number of\
        \ groups with the same name.\n If there are attributes in the request body\
        \ that ODM does not support, then ODM ignores them."
      operationId: "createGroup"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "201":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/GroupResponse"
          description: "The operation is successful. The response body contains the\
            \ representation of the newly created group."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be created, the supplied data or metadata\
            \ are incorrect. See the error message for details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "409":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be created, data conflict. See the error\
            \ message for details."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Add a new user group"
      tags:
      - "Groups"
      x-codegen-request-body-name: "body"
  /api/v1/scim/Groups/{id}:
    delete:
      description: "The endpoint deletes a group in ODM. The group can be deleted,\
        \ even if it has members: admins and not admins. Users of this group are not\
        \ deactivated.\n Permissions to call the endpoint:\n &nbsp;&nbsp;- If the\
        \ user does not have the \"Manage groups\" permission:\n &nbsp;&nbsp;&nbsp;&nbsp;*\
        \ the user has \"Group admin\" role - the user can delete the group;\n &nbsp;&nbsp;&nbsp;&nbsp;*\
        \ the user has \"Group member\" role - the group can not be deleted, an error\
        \ is returned;\n &nbsp;&nbsp;&nbsp;&nbsp;* the user is not a member of the\
        \ specified group - the group can not be deleted, an error is returned.\n\
        \ &nbsp;&nbsp;- If the user has the \"Manage groups\" permission - the user\
        \ can delete the group regardless of user’s membership in this group."
      operationId: "deleteGroup"
      parameters:
      - description: "String, unique identifier of the group in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The group has been successfully removed. No data is returned."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The supplied group ID is invalid."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Group admin\" role in the\
            \ group or the \"Manage groups\" permission is required."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no groups with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Delete a group"
      tags:
      - "Groups"
    get:
      description: "The endpoint returns a not deleted group by id, where id is an\
        \ internal group id in ODM. Access to the group is required:\n &nbsp;&nbsp;-\
        \ If the user has the \"Manage groups\" permission, the endpoint returns not\
        \ deleted group on the instance regardless of user’s membership in this group;\n\
        \ &nbsp;&nbsp;- If the user does not have the \"Manage groups\" permission,\
        \ the endpoint returns only groups in which the user is a member. Otherwise,\
        \ 404 Not Found is returned."
      operationId: "getGroup"
      parameters:
      - description: "String, unique identifier of the group in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "If excludedAttributes=members is specified in the request, Groups\
          \ are returned without the members attribute. Other attributes are not supported\
          \ in excludedAttributes parameter and ignored in the request → all attributes\
          \ are returned in the response body."
        in: "query"
        name: "excludedAttributes"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/GroupResponse"
          description: "The request was successful."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The supplied group ID is invalid."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no available groups with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a group by id"
      tags:
      - "Groups"
    patch:
      description: "The endpoint updates one or several attributes of a specific group,\
        \ where id is internal group id in ODM. Also the endpoints adds a new user\
        \ to the group and removes users from the group.\n\n Supported operators in\
        \ the request body: replace, add, remove. For details of the syntax of using\
        \ these operators, we recommend that you refer to the SCIM 2.0 specification.\n\
        \n The list of group attributes that can be edited: displayName, externalId,\
        \ members. If the user tries to edit other attributes, e.g. id, an error is\
        \ returned. If the user tries to edit attributes that are not supported in\
        \ the ODM group scheme, this attribute is ignored. If the request body includes\
        \ only attributes that are not supported by ODM, the endpoint returns 200\
        \ OK.\n\n A PATCH request, regardless of the number of operations, is treated\
        \ as atomic. If a single operation encounters an error condition, the original\
        \ user attributes are restored, and a failure status is returned.\n\n The\
        \ endpoint requires access to the group as admin of the group: the user has\
        \ the \"Admin group\" role in the group or the user has the \"Manage groups\"\
        \ permission."
      operationId: "patchGroup"
      parameters:
      - description: "String, unique identifier of the group in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupPatch"
        required: true
      responses:
        "204":
          content: {}
          description: "Group is successfully updated. No data is returned"
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be updated, the supplied data or metadata\
            \ are incorrect. See the error message for details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Group admin\" role in the\
            \ group or the \"Manage groups\" permission is required."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no groups with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Update a group"
      tags:
      - "Groups"
      x-codegen-request-body-name: "body"
  /api/v1/scim/Users:
    get:
      description: "The endpoint returns a list of active users. The list can be filtered\
        \ by user attributes using the filter parameter. If no filtering parameters\
        \ are passed, then all users are returned. If there are no users in the response\
        \ body, the endpoint returns 200 OK. The \"Manage organization\" permission\
        \ is required."
      operationId: "findUsers"
      parameters:
      - description: "Filter by user attributes. The parameter name is case-sensitive,\
          \ therefore parameters FILTER, fiLter, and other options are ignored.\n\
          \ Supported operators:\n &nbsp;&nbsp;eq - equal, the attribute and operator\
          \ values must be identical for a match;\n &nbsp;&nbsp;and - logical \"and\"\
          , the filter is only a match if both expressions evaluate to true;\n &nbsp;&nbsp;Using\
          \ other operators returns an error.\n Attribute names and attribute operators\
          \ used in filters are case insensitive.\n Examples of the request:\n &nbsp;&nbsp;filter=emails[type\
          \ eq \"work\" and value eq \"user@example.com\"] - returns a user with login\
          \ = user@example.com\n &nbsp;&nbsp;filter=userName eq \"bjensen\"\n &nbsp;&nbsp;filter=emails[type\
          \ eq \"work\" and value eq \"user@example.com\"] and userName eq \"bjensen\"\
          ."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "The 1-based index of the first result in the current set of\
          \ list results."
        in: "query"
        name: "startIndex"
        schema:
          format: "int32"
          type: "integer"
      - description: "The number of resources returned in a list response page. The\
          \ value by default is 100."
        in: "query"
        name: "count"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/FilterUsersResponse"
          description: "The request was successful."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Incorrect syntax in the request. See the error message for\
            \ details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Manage organization\" permission\
            \ is required."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of all active users"
      tags:
      - "Users"
    post:
      description: "The endpoint creates a new user in ODM or updates the existing\
        \ user. A user can be updated by this endpoint if the user has the same login\
        \ as in the request body. The \"Manage organization\" permission is required.\
        \ The endpoint does not allow to specify the user's password and user permissions,\
        \ these parameters can be set in the web application by a user with the \"\
        Manage organization\" permission.\n Only one email can be specified."
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: "The operation is successful. The response body contains the\
            \ representation of the newly created or updated user."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be created, the supplied data or metadata\
            \ are incorrect. See the error message for details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Manage organization\" permission\
            \ is required."
        "409":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be created, data conflict. See the error\
            \ message for details."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Add a new user"
      tags:
      - "Users"
      x-codegen-request-body-name: "body"
  /api/v1/scim/Users/{id}:
    delete:
      operationId: "deleteUser"
      parameters:
      - description: "String, unique identifier of the user in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The user has been successfully deactivated. No data is returned."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The supplied user ID is invalid."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Manage organization\" permission\
            \ is required."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no users with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Deactivate a user"
      tags:
      - "Users"
    get:
      description: "The endpoint returns an active user by id, where id is internal\
        \ user id in ODM. The \"Manage organization\" permission is required."
      operationId: "getUser"
      parameters:
      - description: "String, unique identifier of the user in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: "The request was successful."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The supplied user ID is invalid."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Manage organization\" permission\
            \ is required."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no available users with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a user by id"
      tags:
      - "Users"
    patch:
      description: "The endpoint updates one or several attributes of a specific user,\
        \ where id is internal user id in ODM.\n\n Supported operators in the request\
        \ body: replace, add, remove. For details of the syntax of using these operators,\
        \ we recommend that you refer to the SCIM 2.0 specification.\n\n The list\
        \ of user attributes that can be edited: userName, externalId, displayName,\
        \ active. If the user tries to edit other attributes, e.g. id, an error is\
        \ returned. If the user tries to edit attributes that are not supported in\
        \ the ODM user scheme, e.g. name name.familyName, this attribute is ignored.\
        \ If the request body includes only attributes that are not supported by ODM,\
        \ the endpoint returns 200 OK.\n\n A PATCH request, regardless of the number\
        \ of operations, is treated as atomic. If a single operation encounters an\
        \ error condition, the original user attributes are restored, and a failure\
        \ status is returned.\n\n It is possible to update attributes of the deactivated\
        \ users.\n\n The endpoint requires the \"Manage organization\" permission."
      operationId: "patchUser"
      parameters:
      - description: "String, unique identifier of the user in ODM."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
        required: true
      responses:
        "200":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: "User is successfully updated. The response body contains the\
            \ representation of the updated user."
        "400":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "The object cannot be updated, the supplied data or metadata\
            \ are incorrect. See the error message for details."
        "401":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "Operation is not permitted. The \"Manage organization\" permission\
            \ is required."
        "404":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/SCIMErrorResponse"
          description: "There are no users with the specified id."
        "500":
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/BaseErrorResponse"
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Genestack-API-Token: []
      - Access-token: []
      summary: "Update a user"
      tags:
      - "Users"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/studies:
    get:
      description: "Retrieve study metadata objects by searching/listing study metadata.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Paging\nFor performance reasons this endpoint returns results in \"pages\"\
        \ of limited size. In order to retrieve all matching results the client needs\
        \ to request multiple pages starting from an offset to the first result. You\
        \ can do this using the pageOffset query parameter. A value of 0 (the default)\
        \ instructs the server to return the first page of results, 100 would return\
        \ a page of results starting from the 101st result and so on. To return all\
        \ results iterate through pages using pageOffset values of `n * pageLimit`\
        \ until the `resultsExhausted` response field is true.\n\n## List operation\n\
        \nThis endpoint can be called with no `query` parameter. Doing so returns\
        \ a list of all study objects."
      operationId: "searchStudiesAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n\n\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for study objects via a full-text query over all study\
          \ metadata fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries\
          \ matching dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for study metadata objects"
      tags:
      - "Study SPoT as Curator"
    post:
      description: "## Data\n This operation requires the URL of a Study metadata\
        \ file.  This will be used as the original metadata for the created study.\n\
        \ ## Metadata file format\n * Extension: any, `.zip` and `.gz` extensions\
        \ are treated as archives and get decompressed\n * Format: plain text, Tab-separated\
        \ format (TSV), attribute names and record values are separated  with tabs\
        \ (`U+0009`),  lines are separated with `CRLF` sequence (`U+000D U+000A`)\n\
        \ * Header: the first line is treated as table header that contains attribute\
        \ names\n * Records: the second line contains the values for each of the attributes\
        \ described in the header line.  Values represent single string or list of\
        \ strings. List values are separated  using the \"pipe\" `|` (`U+007C`)  separator.\
        \ Values are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`)\
        \ character may be escaped by repeating it twice.\n ## File sources\n * Supported\
        \ external sources (links): `http`/`https`/`ftp`"
      operationId: "addStudyAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyGenericSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "Object successfully created."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Add new study object"
      tags:
      - "Study SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/studies/{id}:
    delete:
      operationId: "deleteStudyAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete a given study object. This will not delete related objects\
        \ or links to related objects."
      tags:
      - "Study SPoT as Curator"
    get:
      operationId: "getStudyAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single study object by ID (accession)"
      tags:
      - "Study SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateStudyAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update a study object"
      tags:
      - "Study SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/studies/{id}/versions:
    get:
      operationId: "getStudyVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Study SPoT as Curator"
  /api/v1/as-curator/studies/{id}/versions/{version}:
    get:
      operationId: "getStudyByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single study object by ID (accession)"
      tags:
      - "Study SPoT as Curator"
  /api/v1/as-user/studies:
    get:
      description: "Retrieve study metadata objects by searching/listing study metadata.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Paging\nFor performance reasons this endpoint returns results in \"pages\"\
        \ of limited size. In order to retrieve all matching results the client needs\
        \ to request multiple pages starting from an offset to the first result. You\
        \ can do this using the pageOffset query parameter. A value of 0 (the default)\
        \ instructs the server to return the first page of results, 100 would return\
        \ a page of results starting from the 101st result and so on. To return all\
        \ results iterate through pages using pageOffset values of `n * pageLimit`\
        \ until the `resultsExhausted` response field is true.\n\n## List operation\n\
        \nThis endpoint can be called with no `query` parameter. Doing so returns\
        \ a list of all study objects."
      operationId: "searchStudiesAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by study metadata (key-value metadata pair(s)). E.g.\
          \ `\"Study Source\"=ArrayExpress`\n\n\n"
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for study objects via a full-text query over all study\
          \ metadata fields. E.g. `\"RNA-Seq of human dendritic cells\"`. Queries\
          \ matching dictionary terms are automatically expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Attribute to sort by, with optional ascending/descending marker,\
          \ of the form `\"[+|-]<key_name>\"`.\n\nNo marker or `\"+\"` indicates ascending\
          \ sort, and `\"-\"` indicates descending sort.\n\n*Default:* sort by ID\
          \ in ascending order."
        in: "query"
        name: "sort"
        schema:
          enum:
          - "id"
          - "creation"
          - "last_update"
          - "name"
          - "+id"
          - "+creation"
          - "+last_update"
          - "+name"
          - "-id"
          - "-creation"
          - "-last_update"
          - "-name"
          type: "string"
      - description: "Maximum number of results to return. This value must be between\
          \ 0 and 2000 (inclusive)."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
            text/tab-separated-values:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "List or search for study metadata objects"
      tags:
      - "Study SPoT as User"
  /api/v1/as-user/studies/{id}:
    get:
      operationId: "getStudyAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single study object by ID (accession)"
      tags:
      - "Study SPoT as User"
  /api/v1/as-user/studies/{id}/versions:
    get:
      operationId: "getStudyVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Study SPoT as User"
  /api/v1/as-user/studies/{id}/versions/{version}:
    get:
      operationId: "getStudyByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single study object by ID (accession)"
      tags:
      - "Study SPoT as User"
  /api/v1/tasks/publish-versions:
    post:
      description: "This endpoint publishes all information from staging and creates\
        \ new metadata versions for each study/associated objects with unpublished\
        \ changes.Only curators with the ACCESS_ALL_DATA permission can use this method."
      operationId: "publishAllStudies"
      parameters:
      - description: "Supply text to name this version. If not supplied the version\
          \ name is set to “Auto-published by API call”"
        in: "query"
        name: "versionMessage"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInfo"
          description: "Task information."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "403":
          content: {}
          description: "Forbidden"
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Asynchronous task that publishes all pending versions across all studies\
        \ in the instance."
      tags:
      - "Tasks API"
  /api/v1/tasks/{id}:
    get:
      description: "Supply the accession (id) of an ODM task to retrieve metadata\
        \ about that task."
      operationId: "getTaskInfo"
      parameters:
      - description: "Accession of the task."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInfo"
          description: "Task information."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve information about any ODM task."
      tags:
      - "Tasks API"
  /api/v1/as-curator/variants:
    get:
      description: "Retrieve all variant data and metadata objects that match a query.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getAllVariantsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the vcf column used\
          \ to link variants from the same run to a sample"
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Filter by vcf INFO field key=value(or range) pairs. Multiple\
          \ filters can be separated with semicolons. E.g. `AF=(0.8:0.95);VT=SNP'"
        in: "query"
        name: "infoFilter"
        schema:
          type: "string"
      - description: "Specify a chromosome interval related with the genes list. Use\
          \ commas to specify multiple genes."
        in: "query"
        name: "genes"
        schema:
          type: "string"
      - description: "Specify a chromosome interval to find genes between these positions.\
          \ E.g. `2:233364596-233385916`. Use commas to specify multiple intervals."
        in: "query"
        name: "interval"
        schema:
          type: "string"
      - description: "One or more specific variation IDs can be specified. E.g. `rs838705`\
          \ use `|` characters to specify mutliple IDs. "
        in: "query"
        name: "variationId"
        schema:
          type: "string"
      - description: "Reference bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        in: "query"
        name: "reference"
        schema:
          type: "string"
      - description: "Alternate bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        in: "query"
        name: "alteration"
        schema:
          type: "string"
      - description: "The response can be filtered by number of affected alleles.\
          \ All objects which have a number of mutations that is equal or greater\
          \ than the supplied value will match the search criteria.\n\nFor example,\
          \ if you provide ‘1’, all variant objects which have mutations in 1, 2,\
          \ or more, alleles will be displayed in the response."
        in: "query"
        name: "alleles"
        schema:
          type: "string"
      - description: "The objects can be filtered by quality value. Quality should\
          \ be entered as an interval in parentheses with the starting and ending\
          \ values are separated by a colon.\n\nFor example, if you enter (100:200),\
          \ variant objects with quality values greater than 100 and less than 200\
          \ will be shown in the response."
        in: "query"
        name: "quality"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantResponse"
          description: "Retrieved variant data."
        "400":
          content: {}
          description: "Variant data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple variant data and metadata objects"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchGroupsAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/group/by/run/{id}:
    get:
      operationId: "getVariantGroupByRunAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/group/{id}:
    delete:
      operationId: "deleteVariantGroupAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          content: {}
          description: "The object has been successfully deleted. No data is returned."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Delete the object"
      tags:
      - "Variant SPoT as Curator"
    get:
      operationId: "getVariantGroupAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchVariantRunsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/vcf:
    post:
      description: "## Data\n This operation requires the URL of a VCF data file.\
        \ Method differed from the other  SPoT POST methods as it returns additionally\
        \ an id of created experiment.\n ## Metadata\n It is also possible to optionally\
        \ supply the URL of a metadata file. This  metadata will be used as the original\
        \ metadata for the created objects. The  file is expected to contain single\
        \ record with metadata describing the uploaded signal file.\n ## Metadata\
        \ file format\n * Extension: any, `.zip` and `.gz` extensions are treated\
        \ as archives and get decompressed\n * Format: plain text, Tab-separated format\
        \ (TSV), attribute names and record values are separated  with tabs (`U+0009`),\
        \  lines are separated with `CRLF` sequence (`U+000D U+000A`)\n * Header:\
        \ the first line is treated as table header that contains attribute names\n\
        \ * Records: the second line contains the values for each of the attributes\
        \ described in the header line.  Values represent single string or list of\
        \ strings. List values are separated  using the \"pipe\" `|` (`U+007C`)  separator.\
        \ Values are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`)\
        \ character may be escaped by repeating it twice.\n ## File sources\n * Supported\
        \ external sources (links): `http`/`https`/`ftp`"
      operationId: "addVariantsAsCurator"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariantSignalSource"
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsResponse"
          description: "The objects were successfully created. The returned value\
            \ is a list of created objects."
        "400":
          content: {}
          description: "The object cannot be created. This error occurs when the supplied\
            \ data or metadata are incorrect. Please see error message for details."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Create multiple new objects from a multi-row data file with optional\
        \ supplied metadata"
      tags:
      - "Variant SPoT as Curator"
      x-codegen-request-body-name: "source"
  /api/v1/as-curator/variants/{id}:
    get:
      operationId: "getVariantAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single variant object by ID (accession)"
      tags:
      - "Variant SPoT as Curator"
    patch:
      description: "## Basic operation\nThe object metadata is updated using the supplied\
        \ map of attribute names to attribute values. There are three cases:\n1. The\
        \ attribute name does not already exist in the object metadata. In this case,\
        \ the attribute and value are added to the object metadata.\n2. The attribute\
        \ name already exists in the object metadata. In this case, the value is updated.\n\
        3. The attribute value is `null`.In this case, the attribute is removed from\
        \ the object metadata.\n\n## Attribute values\nThe attribute values are intelligently\
        \ parsed as booleans, integers, etc."
      operationId: "updateVariantAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataContent"
        description: "Metadata in the form of `{key: value, key2: value2, ...}`"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The objects was successfully created. The returned value is\
            \ the updated object, along with any warnings."
        "400":
          content: {}
          description: "The supplied object ID or metadata is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Update object metadata"
      tags:
      - "Variant SPoT as Curator"
      x-codegen-request-body-name: "body"
  /api/v1/as-curator/variants/{id}/versions:
    get:
      operationId: "getVariantVersionsAsCurator"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-curator/variants/{id}/versions/{version}:
    get:
      operationId: "getVariantByVersionAsCurator"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single variant object by ID (accession)"
      tags:
      - "Variant SPoT as Curator"
  /api/v1/as-user/variants:
    get:
      description: "Retrieve all variant data and metadata objects that match a query.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size together\
        \ with a `cursor` tag. To retrieve the next page of results please supply\
        \ this `cursor` tag to resume the query from your previous result and get\
        \ the next page. If there are no more results you will just retrieve an empty\
        \ result.\n\n"
      operationId: "getAllVariantsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "Genestack accession that corresponds to the vcf column used\
          \ to link variants from the same run to a sample"
        in: "query"
        name: "runFilter"
        schema:
          type: "string"
      - description: "List of source ids to be filtered by."
        explode: true
        in: "query"
        name: "runSourceFilter"
        schema:
          items:
            type: "string"
          type: "array"
          default: "Source id"
        style: "form"
      - description: "Filter by vcf INFO field key=value(or range) pairs. Multiple\
          \ filters can be separated with semicolons. E.g. `AF=(0.8:0.95);VT=SNP'"
        in: "query"
        name: "infoFilter"
        schema:
          type: "string"
      - description: "Specify a chromosome interval related with the genes list. Use\
          \ commas to specify multiple genes."
        in: "query"
        name: "genes"
        schema:
          type: "string"
      - description: "Specify a chromosome interval to find genes between these positions.\
          \ E.g. `2:233364596-233385916`. Use commas to specify multiple intervals."
        in: "query"
        name: "interval"
        schema:
          type: "string"
      - description: "One or more specific variation IDs can be specified. E.g. `rs838705`\
          \ use `|` characters to specify mutliple IDs. "
        in: "query"
        name: "variationId"
        schema:
          type: "string"
      - description: "Reference bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        in: "query"
        name: "reference"
        schema:
          type: "string"
      - description: "Alternate bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        in: "query"
        name: "alteration"
        schema:
          type: "string"
      - description: "The response can be filtered by number of affected alleles.\
          \ All objects which have a number of mutations that is equal or greater\
          \ than the supplied value will match the search criteria.\n\nFor example,\
          \ if you provide ‘1’, all variant objects which have mutations in 1, 2,\
          \ or more, alleles will be displayed in the response."
        in: "query"
        name: "alleles"
        schema:
          type: "string"
      - description: "The objects can be filtered by quality value. Quality should\
          \ be entered as an interval in parentheses with the starting and ending\
          \ values are separated by a colon.\n\nFor example, if you enter (100:200),\
          \ variant objects with quality values greater than 100 and less than 200\
          \ will be shown in the response."
        in: "query"
        name: "quality"
        schema:
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      - description: "The page tag to resume results from (see paging above)."
        in: "query"
        name: "cursor"
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantResponse"
          description: "Retrieved variant data."
        "400":
          content: {}
          description: "Variant data cannot be retrieved."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve multiple variant data and metadata objects"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/group:
    get:
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchVariantGroupsAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`."
        in: "query"
        name: "filter"
        schema:
          type: "string"
      - description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        in: "query"
        name: "query"
        schema:
          type: "string"
      - description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        in: "query"
        name: "searchSpecificTerms"
        schema:
          type: "boolean"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      - description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        in: "query"
        name: "useVersions"
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is a list of\
            \ objects."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve groups that match a query"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/group/by/run/{id}:
    get:
      operationId: "getVariantGroupByRunAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by run ID (accession)"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/group/{id}:
    get:
      operationId: "getVariantGroupAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataWithId"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single group object by ID (accession)"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/runs/by/group/{id}:
    get:
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchVariantRunsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        in: "query"
        name: "pageOffset"
        schema:
          format: "int32"
          type: "integer"
      - description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        in: "query"
        name: "pageLimit"
        schema:
          format: "int32"
          type: "integer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve run objects related to the given group"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/{id}:
    get:
      operationId: "getVariantAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariantItem"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single variant object by ID (accession)"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/{id}/versions:
    get:
      operationId: "getVariantVersionsAsUser"
      parameters:
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommitInfo"
                type: "array"
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a list of object versions by ID"
      tags:
      - "Variant SPoT as User"
  /api/v1/as-user/variants/{id}/versions/{version}:
    get:
      operationId: "getVariantByVersionAsUser"
      parameters:
      - description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        in: "query"
        name: "responseFormat"
        schema:
          enum:
          - "term_id"
          type: "string"
      - description: "Unique identifier (accession) of the object."
        in: "path"
        name: "id"
        required: true
        schema:
          type: "string"
      - description: "Unique version of the object."
        in: "path"
        name: "version"
        required: true
        schema:
          type: "string"
      - description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        in: "query"
        name: "returnedMetadataFields"
        schema:
          enum:
          - "minimal_data"
          - "extended_data_included"
          - "original_data_included"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalRun"
          description: "The request was successful. The returned value is the object."
        "400":
          content: {}
          description: "The supplied object ID is invalid."
        "401":
          content: {}
          description: "User is not authenticated. Please supply a valid Access Token\
            \ in the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n\
            \ or  Genestack API token in the `Genestack-API-Token` header (this token\
            \ may be obtained from the Genestack UI _Profile_ page)."
        "404":
          content: {}
          description: "No object exists with the given ID."
        "500":
          content: {}
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
      summary: "Retrieve a single variant object by ID (accession)"
      tags:
      - "Variant SPoT as User"
components:
  schemas:
    CommitInfo:
      $ref: "./schemas/common/CommitInfo.yaml"
    ExpressionItem:
      $ref: "./schemas/expression/ExpressionItem.yaml"
    ExpressionResponse:
      $ref: "./schemas/expression/ExpressionResponse.yaml"
    IntegrationHelper:
      $ref: "./schemas/common/IntegrationHelper.yaml"
    JsonMetadata:
      $ref: "./schemas/common/JsonMetadata.yaml"
    ListResponse:
      $ref: "./schemas/common/ListResponse.yaml"
    MetaResponse:
      $ref: "./schemas/common/MetaResponse.yaml"
    MetadataContent:
      $ref: "./schemas/common/MetadataContent.yaml"
    MetadataWithId:
      $ref: "./schemas/common/MetadataWithId.yaml"
    PaginationInfo:
      $ref: "./schemas/common/PaginationInfo.yaml"
    RunsResponse:
      $ref: "./schemas/common/RunsResponse.yaml"
    SignalRun:
      $ref: "./schemas/common/SignalRun.yaml"
    ExpressionSignalSource:
      $ref: "./schemas/expression/ExpressionSignalSource.yaml"
    FlowCytometryItem:
      $ref: "./schemas/flow-cytometry/FlowCytometryItem.yaml"
    FlowCytometryResponse:
      $ref: "./schemas/flow-cytometry/FlowCytometryResponse.yaml"
    FlowCytometrySignalSource:
      $ref: "./schemas/flow-cytometry/FlowCytometrySignalSource.yaml"
    AttributeInvalidValue:
      $ref: "./schemas/integration/AttributeInvalidValue.yaml"
    AttributeValidationSummary:
      $ref: "./schemas/integration/AttributeValidationSummary.yaml"
    BatchOfIds:
      $ref: "./schemas/integration/BatchOfIds.yaml"
    DataItem:
      $ref: "./schemas/integration/DataItem.yaml"
    DataPresentation:
      $ref: "./schemas/integration/DataPresentation.yaml"
    GroupValidationSummary:
      $ref: "./schemas/integration/GroupValidationSummary.yaml"
    IMetadata:
      $ref: "./schemas/integration/IMetadata.yaml"
    Library:
      $ref: "./schemas/library/Library.yaml"
    Link:
      $ref: "./schemas/integration/Link.yaml"
    MetadataPresentation:
      $ref: "./schemas/integration/MetadataPresentation.yaml"
    OmicsResponse:
      $ref: "./schemas/integration/OmicsResponse.yaml"
    OmicsResponseDataPresentation:
      $ref: "./schemas/integration/OmicsResponseDataPresentation.yaml"
    OmicsResponseMetadataPresentation:
      $ref: "./schemas/integration/OmicsResponseMetadataPresentation.yaml"
    OmicsResponseMetadataWithId:
      $ref: "./schemas/integration/OmicsResponseMetadataWithId.yaml"
    Preparation:
      $ref: "./schemas/preparation/Preparation.yaml"
    Relationships:
      $ref: "./schemas/integration/Relationships.yaml"
    SourceTypePair:
      $ref: "./schemas/integration/SourceTypePair.yaml"
    StreamingOutput:
      $ref: "./schemas/integration/StreamingOutput.yaml"
    Study:
      $ref: "./schemas/study/Study.yaml"
    StudyValidationSummary:
      $ref: "./schemas/integration/StudyValidationSummary.yaml"
    TaskInfo:
      $ref: "./schemas/tasks/TaskInfo.yaml"
    ValidationError:
      $ref: "./schemas/integration/ValidationError.yaml"
    SearchStudyRequest:
      $ref: "./schemas/integration/SearchStudyRequest.yaml"
    AppliedFilter:
      $ref: "./schemas/integration/AppliedFilter.yaml"
    PageRequest:
      $ref: "./schemas/integration/PageRequest.yaml"
    FindObjectsResponse:
      $ref: "./schemas/integration/FindObjectsResponse.yaml"
    ObjectsPage:
      $ref: "./schemas/integration/ObjectsPage.yaml"
    StudySearchInfo:
      $ref: "./schemas/integration/StudySearchInfo.yaml"
    MetainfoKeyForSummary:
      $ref: "./schemas/integration/MetainfoKeyForSummary.yaml"
    FilterOptionGroup:
      $ref: "./schemas/integration/FilterOptionGroup.yaml"
    FilterOption:
      $ref: "./schemas/integration/FilterOption.yaml"
    ExceptionTypeAndMessage:
      $ref: "./schemas/job/ExceptionTypeAndMessage.yaml"
    ImportMetadataRequest:
      $ref: "./schemas/job/ImportMetadataRequest.yaml"
    ImportSignalRunRequest:
      $ref: "./schemas/job/ImportSignalRunRequest.yaml"
    ImportExpressionSignalRunRequest:
      $ref: "./schemas/job/ImportExpressionSignalRunRequest.yaml"
    Info:
      $ref: "./schemas/job/Info.yaml"
    JobRuntimeError:
      $ref: "./schemas/job/JobRuntimeError.yaml"
    Output:
      $ref: "./schemas/job/Output.yaml"
    SampleSource:
      $ref: "./schemas/common/SampleSource.yaml"
    DetachedCollection:
      $ref: "./schemas/manage-data/DetachedCollection.yaml"
    DetachedObject:
      $ref: "./schemas/manage-data/DetachedObject.yaml"
    ManagedObject:
      $ref: "./schemas/manage-data/ManagedObject.yaml"
    XrefSetCreateRequest:
      $ref: "./schemas/reference-data/XrefSetCreateRequest.yaml"
    XrefSetCreateResponse:
      $ref: "./schemas/reference-data/XrefSetCreateResponse.yaml"
    XrefSetMetadata:
      $ref: "./schemas/reference-data/XrefSetMetadata.yaml"
    XrefSetSearchResult:
      $ref: "./schemas/reference-data/XrefSetSearchResult.yaml"
    XrefSetSearchResultEntry:
      $ref: "./schemas/reference-data/XrefSetSearchResultEntry.yaml"
    Sample:
      $ref: "./schemas/sample/Sample.yaml"
    Group:
      $ref: "./schemas/scim/Group.yaml"
    Member:
      $ref: "./schemas/scim/Member.yaml"
    GroupPatch:
      $ref: "./schemas/scim/GroupPatch.yaml"
    PatchOperation:
      $ref: "./schemas/scim/PatchOperation.yaml"
    FilterGroupsResponse:
      $ref: "./schemas/scim/FilterGroupsResponse.yaml"
    GroupResponse:
      $ref: "./schemas/scim/GroupResponse.yaml"
    Meta:
      $ref: "./schemas/scim/Meta.yaml"
    SCIMErrorResponse:
      $ref: "./schemas/scim/SCIMErrorResponse.yaml"
    BaseErrorResponse:
      $ref: "./schemas/scim/BaseErrorResponse.yaml"
    ErrorMessage:
      $ref: "./schemas/scim/ErrorMessage.yaml"
    User:
      $ref: "./schemas/scim/User.yaml"
    Email:
      $ref: "./schemas/scim/Email.yaml"
    UserPatch:
      $ref: "./schemas/scim/UserPatch.yaml"
    FilterUsersResponse:
      $ref: "./schemas/scim/FilterUsersResponse.yaml"
    UserResponse:
      $ref: "./schemas/scim/UserResponse.yaml"
    StudyGenericSource:
      $ref: "./schemas/study/StudyGenericSource.yaml"
    VariantSignalSource:
      $ref: "./schemas/variant/VariantSignalSource.yaml"
    VariantItem:
      $ref: "./schemas/variant/VariantItem.yaml"
    VariantResponse:
      $ref: "./schemas/variant/VariantResponse.yaml"
  securitySchemes:
    Access-token:
      in: "header"
      name: "Authorization"
      type: "apiKey"
    Genestack-API-Token:
      in: "header"
      name: "Genestack-API-Token"
      type: "apiKey"
  parameters:
    AllowDuplicates:
      description: "Load duplicate data: the data from the links has already been\
        \ previously loaded into ODM, and for **testing purposes**, you need to load\
        \ this data again."
      in: "query"
      name: "allow_dups"
      schema:
        default: false
        type: "boolean"
