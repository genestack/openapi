get:
  description: >+
    ## Versioning

    Specific versions of omics data files (eg. GCT) can be queried via the
    useVersions parameter. Different versions of an omics data file are
    associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied
    to the useVersions parameter along with the version number or specific omics
    data file accessions to include them in the query. If nothing is supplied to
    the useVersions parameter then only the active version (which is usually the
    last one imported) is queried. This acts as a filter before the rest of the
    query is carried out.


    Example usage:

    useVersions=* (query all versions, including those without CHAIN_IDs)

    useVersions=v2 (query the second version. If there is no second version then
    the data file is not queried)

    useVersions=v1,v0 (query the first version and any data files without
    CHAIN_IDs(v0) )

    useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002
    query the third version)

    useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID
    of GSCV002 query only the specific accessions GSF00494 and GSF000496)


    Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;
    separator.

  operationId: getVariantGroupsByStudyAsCurator
  parameters:
    - description: >-
        Supply this parameter with the value `term_id` as part of the query to
        return extended information including IDs for values and dictionaries.
      in: query
      name: responseFormat
      schema:
        enum:
          - term_id
        type: string
    - description: Unique identifier (accession) of the object.
      in: path
      name: id
      required: true
      schema:
        type: string
    - description: >-
        Specify which versions of omics data files are used in the query. By
        default the active version is used. See Versioning above. Syntax:


        \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or
        `<CHAIN_ID>`:`<accession1,accession2,..>`
      in: query
      name: useVersions
      schema:
        type: string
    - description: >-
        The parameter defines amount of metadata attributes to return:


        1. `minimal_data` - return metadata attributes according to the default
        template.

        2. `extended_data_included` - return metadata attributes according to
        applied template, if object doesnâ€™t have applied template default
        template will be used. This is the default for User endpoints.

        3. `original_data_included` - return all metadata attributes with values
        and null attributes, if they are present in the applied template. This
        is the default for Curator endpoints.
      in: query
      name: returnedMetadataFields
      schema:
        enum:
          - minimal_data
          - extended_data_included
          - original_data_included
        type: string
  responses:
    '200':
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/MetadataWithId"
            type: array
      description: The request was successful. The returned value is the object.
    '400':
      content: {}
      description: The supplied object ID is invalid.
    '401':
      content: {}
      description: >-
        User is not authenticated. Please supply a valid Access Token in the
        `Authorization` HTTP header (e.g. Authorization: bearer [token])
         or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
    '500':
      content: {}
      description: >-
        An internal server error occurred. This indicates an unexpected failure
        in the Genestack system, please file a bug report to
        support@genestack.com, including the error details.
  security:
    - Access-token: []
    - Genestack-API-Token: []
  summary: Retrieve group metadata by querying study ID (accession)
  tags:
    - Variant integration as Curator
components:
  schemas:
    MetadataWithId:
      $ref: ../components/schemas/MetadataWithId.yaml