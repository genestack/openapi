get:
  description: >+
    Stream data from a given group for a tabular file that matches a
    sample/library/preparations query/filter. If no query/filters are supplied
    all expression data is returned. If a metadata filter is specified, this
    endpoint will only return expression data that is associated with a sample
    via the Sample Source ID attribute.

    ## Conditions

    It is possible to supply conditions for:


    1. Samples (full-text or metadata key-value pair)

    2. Libraries (full-text or metadata key-value pair)

    3. Preparations (full-text or metadata key-value pair)

    ## Metadata full-text queries

    Single words can be supplied as is; otherwise, use speech marks (`"`) to
    quote queries that include whitespace. Speech marks and backslash characters
    in the query need to be escaped with a backslash (`\`).


    ## Metadata filters

    Metadata filters are key-value pairs joined by an operator. The `=` operator
    matches literal values/string. The `!=` operator matches anything except the
    literal value/string. The `<` or `>` operators match numerical results that
    are less or greater than the supplied value. Strings containing whitespace
    need to be quoted with (`"`).


    ## Combinations

    Metadata queries/filters for the same parameter can be combined with `&&`,
    `AND`, `||` and `OR` operators, using white-space to separate out the terms
    and operators. Parentheses `( )` can be used for complex expressions.

  operationId: omicsSearchStreamedExpressionDataAsCurator
  parameters:
    - description: >
        Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species
        or strain"="Homo sapiens"`
      in: query
      name: sampleFilter
      schema:
        type: string
    - description: >-
        Search for objects via a full-text query over all sample metadata
        fields. E.g. `Clozapine`. Queries matching dictionary terms are
        automatically expanded to include synonyms.
      in: query
      name: sampleQuery
      schema:
        type: string
    - description: >-
        Filter by library metadata (key-value metadata pair(s)). E.g. `"Library
        Type"=RNA-Seq-1`
      in: query
      name: libraryFilter
      schema:
        type: string
    - description: >-
        Search for library objects via a full-text query over all library
        metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
        terms are automatically expanded to include synonyms.
      in: query
      name: libraryQuery
      schema:
        type: string
    - description: >-
        Filter by preparation metadata (key-value metadata pair(s)). E.g.
        `Digestion=Trypsin`
      in: query
      name: preparationFilter
      schema:
        type: string
    - description: >-
        Search for preparation objects via a full-text query over all
        preparation metadata fields. E.g. `"reversed-phase liquid
        chromatography"`. Queries matching dictionary terms are automatically
        expanded to include synonyms.
      in: query
      name: preparationQuery
      schema:
        type: string
    - description: >-
        If the full-text query term is present in an ODM dictionary, enabling
        this parameter will modify the query to include child terms of the
        full-text query.


        For example, the search query "Body fluid" can be expanded to include
        the term "Blood" (a child term of  "Body fluid") so files containing
        either "Body fluid" or  "Blood"  in their metadata will be returned in
        the search results.


        The parent-child relationship is defined by the key "broaders" or
        "subClassOf"  in the dictionary.


        If the full query term is not present in a dictionary then this
        parameter has no effect.
      in: query
      name: searchSpecificTerms
      schema:
        type: boolean
    - description: >-
        Search for objects linked to expression data and originally uploaded in
        GCT format via data query, e.g.,
        `feature=ENSG00000230368,ENSG00000188976 value>=1.50`
         For the case when the original data is represented by multiple attributes per feature scenarios, extended filtering syntax is as follows: 
        1. By feature attribute value for numeric and string attributes:
        `features.NAME=1007_s_at` or `features."Average Mz"=2.218`. As in the
        case of sample metadata queries, single words can be supplied as is;
        otherwise, use speech marks (`"`) to quote queries that include
        whitespace. 

        2. It is possible to specify a set of possible values, separated by
        comma: `features.NAME=1007_s_at,121_at`. 

        3. Utilize range filters to search numeric attributes. Apply `<` (less
        than), `>` (greater than), and `=` (equal to) symbols to specify the
        desired ranges as follows: 

        `features.Name_1 > 3`: Select all rows where the feature attribute
        Name_1 values are greater than 3. 

        `features.Name_2 >= 6`: Select all rows where the feature attribute
        Name_2 values are greater than or equal to 6. 

        `-3 < features.Name_3 < 3`: Select all rows where the feature attribute
        Name_3 values lie within the interval between -3 and 3. 

        4. Use substring search to get the records where the attribute field
        contains the provided substring: `features.attribute1 =~ "some text"`. 

        5. The first column for each original data file is identified as feature
        accession (typically, it contains gene or protein names, accession IDs,
        etc.). Searching by such feature accession would significantly
        outperform more complex queries by combining the other feature
        attributes. To enable such a search, use `feature` without any attribute
        extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.
         
        The `value` keyword can be used to select rows where the sample (library
        or preparation) measurements has values from a certain range. Examples:
        `value = 3`, `value > 3`, `-3 < value < 3`. When the original data
        contains multiple measurements for a single item, such as a sample
        (library or preparation), use the measurement name to specify the exact
        column type, e.g.: 

        1. `value.intensity = 3`: Selects all rows where the measurement
        attribute intensity equals 3. 
         `value.intensity != 2,null`: Select all rows where the measurement attribute intensity is not equal 2 and is not an empty value. 
        `values.p_value > 3`: Selects all rows where the measurement attribute
        'p_value' values are greater than 3. 

        `-3 < values.FC < 3`: Selects all rows where the measurement attribute
        'FC' values lie within the interval between -3 and 3.
         
        2. Note: The `MinValue` keyword has been deprecated and should be
        replaced with the aforementioned comparisons.
         
        Combine multiple filters for different feature attributes and
        measurements using `AND` (`&&`), `OR` (`||`) logical operators and
        parentheses: 

        * `features.Name_1!=A`: Select all rows where Name_1 is not A. 

        * `features.Name_1!=A,B,C`: Select all rows where Name_1 is not A, B, or
        C. 

        * `features.Name_1=A AND features.Name_2=B`: Select all rows where
        Name_1 is A and Name_2 is B. 

        * `features.Name_1=A && features.Name_2=B`: Equivalent to the example
        above. 

        * `features.Name_1=A OR features.Name_2=B`: Select all rows where Name_1
        is A or Name_2 is B. 

        * `features.Name_1=A || features.Name_2=B`: Equivalent to the example
        above. 

        * `features.Name_1=A AND (features.Name_2=B OR value>=1.0)`: Select all
        rows where Name_1 is A and either Name_2 is B or minimal possible
        measurement value is 1.0.
      in: query
      name: exQuery
      schema:
        type: string
    - description: >-
        Deprecated; use `exQuery` parameter instead. Filters results by the
        feature column (e.g., Gene ID). The feature parameter value must match
        the name of the identifier in the GCT file (under the NAME column).
        Example: `ENSG00000077044`
      explode: true
      in: query
      name: featureList
      schema:
        items:
          type: string
        type: array
      style: form
    - description: Accession of the expression group object (GCT)
      in: query
      name: groupAccession
      required: true
      schema:
        type: string
    - description: >-
        The number of digits after the decimal point for floating-point values.
        The final value is rounded up. Must be non-negative. The default is 4.
      in: query
      name: roundDigits
      schema:
        default: 4
        format: int32
        type: integer
  responses:
    '200':
      content:
        text/csv:
          schema:
            $ref: "#/components/schemas/StreamingOutput"
      description: Stream of retrieved Expression data.
    '400':
      content: {}
      description: Invalid data in request. See error message for details.
    '401':
      content: {}
      description: >-
        User is not authenticated. Please supply a valid Access Token in the
        `Authorization` HTTP header (e.g. Authorization: bearer [token])
         or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
    '500':
      content: {}
      description: >-
        An internal server error occurred. This indicates an unexpected failure
        in the Genestack system, please file a bug report to
        support@genestack.com, including the error details.
  security:
    - Access-token: []
    - Genestack-API-Token: []
  summary: Stream data from a given tabular file
  tags:
    - Omics queries as Curator
components:
  schemas:
    StreamingOutput:
      $ref: ../components/schemas/StreamingOutput.yaml