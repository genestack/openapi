get:
  description: >+
    Retrieve group objects whose linked data matches all supplied conditions.


    ## Conditions

    It is possible to supply conditions for:


    1. Samples (full-text or metadata key-value pair)

    2. Parent studies (full-text or metadata key-value pair)

    3. Linked variant objects (list of data key-value pairs)

    4. Linked flow cytometry objects (list of data key-value pairs)

    5. Linked any data (except variant and flow cytometry) objects (list of data
    key-value pairs)


    ## Metadata full-text queries

    Single words can be supplied as is; otherwise, use speech marks (`"`) to
    quote queries that include whitespace. Speech marks and backslash characters
    in the query need to be escaped with a backslash (`\`).


    ## Metadata filters

    Metadata filters are key-value pairs joined by an operator. The `=` operator
    matches literal values/string. The `!=` operator matches anything except the
    literal value/string. The `<` or `>` operators match numerical results that
    are less or greater than the supplied value. Strings containing whitespace
    need to be quoted with (`"`).


    ## Data queries

    Data queries must be a list of key-value pairs, separated by whitespace. The
    set of valid keys depends on the specific query type, and is documented in
    the query parameter summary. The values can be simple non-whitespace
    strings, or strings enclosed by speech marks (`"`). Depending on the key,
    the value may be be a comma-delimited list of string values. Others require
    numerical values. Ranges can be supplied with `(0:1)` syntax, OR values with
    `|`.


    ## Combinations

    Metadata queries/filters for the same parameter can be combined with `&&`,
    `AND`, `||` and `OR` operators, using white-space to separate out the terms
    and operators. Parentheses `( )` can be used for complex expressions.


    ## Versioning

    Specific versions of omics data files (eg. GCT) can be queried via the
    useVersions parameter. Different versions of an omics data file are
    associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied
    to the useVersions parameter along with the version number or specific omics
    data file accessions to include them in the query. If nothing is supplied to
    the useVersions parameter then only the active version (which is usually the
    last one imported) is queried. This acts as a filter before the rest of the
    query is carried out.


    Example usage:

    useVersions=* (query all versions, including those without CHAIN_IDs)

    useVersions=v2 (query the second version. If there is no second version then
    the data file is not queried)

    useVersions=v1,v0 (query the first version and any data files without
    CHAIN_IDs(v0) )

    useVersions=GSVC002:v3 (for omics data files with a CHAIN_ID of GSCV002
    query the third version)

    useVersions=GSVC002:GSF00494,GSF000496 (for omics data files with a CHAIN_ID
    of GSCV002 query only the specific accessions GSF00494 and GSF000496)


    Rules for multiple CHAIN_IDs can be supplied to the parameter using the ;
    separator.


    ## Paging

    For performance reasons this endpoint returns results in "pages" of limited
    size together with a `cursor` tag. To retrieve the next page of results
    please supply this `cursor` tag to resume the query from your previous
    result and get the next page. If there are no more results you will just
    retrieve an empty result.

  operationId: omicsSearchFlowCytometryGroupsAsUser
  parameters:
    - description: >-
        Supply this parameter with the value `term_id` as part of the query to
        return extended information including IDs for values and dictionaries.
      in: query
      name: responseFormat
      schema:
        enum:
          - term_id
        type: string
    - description: >
        Filter by study metadata (key-value metadata pair(s)). E.g. `"Study
        Source"=ArrayExpress`
      in: query
      name: studyFilter
      schema:
        type: string
    - description: >-
        Search for objects via a full-text query over all study metadata fields.
        E.g. `"RNA-Seq of human dendritic cells"`. Queries matching dictionary
        terms are automatically expanded to include synonyms.
      in: query
      name: studyQuery
      schema:
        type: string
    - description: >
        Filter by sample metadata (key-value metadata pair(s)). E.g. `"Species
        or strain"="Homo sapiens"`
      in: query
      name: sampleFilter
      schema:
        type: string
    - description: >-
        Search for objects via a full-text query over all sample metadata
        fields. E.g. `Clozapine`. Queries matching dictionary terms are
        automatically expanded to include synonyms.
      in: query
      name: sampleQuery
      schema:
        type: string
    - description: >-
        Filter by library metadata (key-value metadata pair(s)). E.g. `"Library
        Type"=RNA-Seq-1`
      in: query
      name: libraryFilter
      schema:
        type: string
    - description: >-
        Search for library objects via a full-text query over all library
        metadata fields. E.g. `"illumina HiSeq500"`. Queries matching dictionary
        terms are automatically expanded to include synonyms.
      in: query
      name: libraryQuery
      schema:
        type: string
    - description: >-
        Filter by preparation metadata (key-value metadata pair(s)). E.g.
        `Digestion=Trypsin`
      in: query
      name: preparationFilter
      schema:
        type: string
    - description: >-
        Search for preparation objects via a full-text query over all
        preparation metadata fields. E.g. `"reversed-phase liquid
        chromatography"`. Queries matching dictionary terms are automatically
        expanded to include synonyms.
      in: query
      name: preparationQuery
      schema:
        type: string
    - description: >-
        If the full-text query term is present in an ODM dictionary, enabling
        this parameter will modify the query to include child terms of the
        full-text query.


        For example, the search query "Body fluid" can be expanded to include
        the term "Blood" (a child term of  "Body fluid") so files containing
        either "Body fluid" or  "Blood"  in their metadata will be returned in
        the search results.


        The parent-child relationship is defined by the key "broaders" or
        "subClassOf"  in the dictionary.


        If the full query term is not present in a dictionary then this
        parameter has no effect.
      in: query
      name: searchSpecificTerms
      schema:
        type: boolean
    - description: >-
        Search for objects linked to variant data via data query (key-value
        pair(s)). E.g.  `VariationId=rs548419688|rs544419019` 
        `Intervals=12:23432-234324,30:234324-23432` `Gene=ASPM,BRCA1` 
        `Reference=A|T Alteration=C|G` `Quality=(0.9:1.0)` 
        `Type=SNP|MNP|INS|DEL|MIXED`  `info_VT=DEL`  `info_EUR_AF=(0.9:1.0)`
        `Start=12340` `AllelesNumber=1` `AlterationNumber=2`
      in: query
      name: vxQuery
      schema:
        type: string
    - description: >-
        Filter by variant metadata (key-value metadata pair(s)). E.g. `"Variant
        Source"=dbSNP`. Retrieving individual runs via "Run Source
        ID"="HG00096"  will be deprecated after June 2023. Use sampleFilter,
        libraryFilter or preparationFilter for retrieving an individual run
      in: query
      name: vxFilter
      schema:
        type: string
    - description: >-
        Search for objects linked to expression data and originally uploaded in
        GCT format via data query, e.g.,
        `feature=ENSG00000230368,ENSG00000188976 value>=1.50`
         For the case when the original data is represented by multiple attributes per feature scenarios, extended filtering syntax is as follows: 
        1. By feature attribute value for numeric and string attributes:
        `feature.NAME=1007_s_at` or `feature."Average Mz"=2.218`. As in the case
        of sample metadata queries, single words can be supplied as is;
        otherwise, use speech marks (`"`) to quote queries that include
        whitespace. 

        2. It is possible to specify a set of possible values, separated by
        comma: `feature.NAME=1007_s_at,121_at`. 

        3. Utilize range filters to search numeric attributes. Apply `<` (less
        than), `>` (greater than), and `=` (equal to) symbols to specify the
        desired ranges as follows: 

        `feature.Name_1 > 3`: Select all rows where the feature attribute Name_1
        values are greater than 3. 

        `feature.Name_2 >= 6`: Select all rows where the feature attribute
        Name_2 values are greater than or equal to 6. 

        `-3 < feature.Name_3 < 3`: Select all rows where the feature attribute
        Name_3 values lie within the interval between -3 and 3. 

        4. Use substring search to get the records where the attribute field
        contains the provided substring: `feature.attribute1 =~ "some text"`. 

        5. The first column for each original data file is identified as feature
        accession (typically, it contains gene or protein names, accession IDs,
        etc.). Searching by such feature accession would significantly
        outperform more complex queries by combining the other feature
        attributes. To enable such a search, use `feature` without any attribute
        extension, e.g., `feature=ENSG00000230368,ENSG00000188976`.
         
        The `value` keyword can be used to select rows where the sample (library
        or preparation) measurements has values from a certain range. Examples:
        `value = 3`, `value > 3`, `-3 < value < 3`. When the original data
        contains multiple measurements for a single item, such as a sample
        (library or preparation), use the measurement name to specify the exact
        column type, e.g.: 

        1. `value.intensity = 3`: Selects all rows where the measurement
        attribute intensity equals 3. 
         `value.intensity != 2,null`: Select all rows where the measurement attribute intensity is not equal 2 and is not an empty value. 
        `value.p_value > 3`: Selects all rows where the measurement attribute
        'p_value' values are greater than 3. 

        `-3 < value.FC < 3`: Selects all rows where the measurement attribute
        'FC' values lie within the interval between -3 and 3.
         
        2. Note: The `MinValue` keyword has been deprecated and should be
        replaced with the aforementioned comparisons.
         
        Combine multiple filters for different feature attributes and
        measurements using `AND` (`&&`), `OR` (`||`) logical operators and
        parentheses: 

        * `feature.Name_1!=A`: Select all rows where Name_1 is not A. 

        * `feature.Name_1!=A,B,C`: Select all rows where Name_1 is not A, B, or
        C. 

        * `feature.Name_1=A AND feature.Name_2=B`: Select all rows where Name_1
        is A and Name_2 is B. 

        * `feature.Name_1=A && feature.Name_2=B`: Equivalent to the example
        above. 

        * `feature.Name_1=A OR feature.Name_2=B`: Select all rows where Name_1
        is A or Name_2 is B. 

        * `feature.Name_1=A || feature.Name_2=B`: Equivalent to the example
        above. 

        * `feature.Name_1=A AND (feature.Name_2=B OR value>=1.0)`: Select all
        rows where Name_1 is A and either Name_2 is B or minimal possible
        measurement value is 1.0.
      in: query
      name: exQuery
      schema:
        type: string
    - description: >-
        Filter by expression metadata (key-value metadata pair(s)). E.g.
        `"Genome Version"=hg19-BROAD`. Retrieving individual runs via "Run
        Source ID"="HG00096"  will be deprecated after June 2023. Use
        sampleFilter, libraryFilter or preparationFilter for retrieving an
        individual run
      in: query
      name: exFilter
      schema:
        type: string
    - description: >-
        Search for objects linked to flow cytometry data via data query
        (key-value pair(s)). E.g. `ReadoutType=Median|Count`
        `CellPopulation="CD45+, live"` `MinValue=3.5`
      in: query
      name: fxQuery
      schema:
        type: string
    - description: >-
        Filter by flow cytometry metadata (key-value metadata pair(s)). E.g.
        `Organ=blood`. Retrieving individual runs via "Run Source ID"="HG00096" 
        will be deprecated after June 2023. Use sampleFilter, libraryFilter or
        preparationFilter for retrieving an individual run
      in: query
      name: fxFilter
      schema:
        type: string
    - description: >-
        Specify which versions of omics data files are used in the query. By
        default the active version is used. See Versioning above. Syntax:


        \* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or
        `<CHAIN_ID>`:`<accession1,accession2,..>`
      in: query
      name: useVersions
      schema:
        type: string
    - description: >-
        The parameter defines amount of metadata attributes to return:


        1. `minimal_data` - return metadata attributes according to the default
        template.

        2. `extended_data_included` - return metadata attributes according to
        applied template, if object doesn’t have applied template default
        template will be used. This is the default for User endpoints.

        3. `original_data_included` - return all metadata attributes with values
        and null attributes, if they are present in the applied template. This
        is the default for Curator endpoints.
      in: query
      name: returnedMetadataFields
      schema:
        enum:
          - minimal_data
          - extended_data_included
          - original_data_included
        type: string
    - description: The page tag to resume results from (see paging above).
      in: query
      name: cursor
      schema:
        type: string
    - description: >-
        This parameter determines the number of results to retrieve per page,
        with the default set at 2000.
      in: query
      name: pageLimit
      schema:
        format: int32
        type: integer
  responses:
    '200':
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OmicsResponse"
      description: Omics query result.
    '400':
      content: {}
      description: Invalid data in request. See error message for details.
    '401':
      content: {}
      description: >-
        User is not authenticated. Please supply a valid Access Token in the
        `Authorization` HTTP header (e.g. Authorization: bearer [token])
         or  Genestack API token in the `Genestack-API-Token` header (this token may be obtained from the Genestack UI _Profile_ page).
    '500':
      content: {}
      description: >-
        An internal server error occurred. This indicates an unexpected failure
        in the Genestack system, please file a bug report to
        support@genestack.com, including the error details.
  security:
    - Access-token: []
    - Genestack-API-Token: []
  summary: Retrieve group objects by searching across multiple data types
  tags:
    - Omics queries as User
components:
  schemas:
    OmicsResponse:
      $ref: ../components/schemas/OmicsResponse.yaml