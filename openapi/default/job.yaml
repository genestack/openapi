---
swagger: "2.0"
info:
  description: "#### NOTE: these API endpoints are experimental. The parameters, request\
    \ body and response body may change.\n\nThese API endpoints serve to start, control,\
    \ monitor and retrieve results for a set of available Genestack jobs.\n\nA job\
    \ is an arbitrary process that, once started, runs asynchronously in the background.\n\
    Upon starting a job the user receives a job execution identifier (`jobExecId`)\
    \ that they can use to control and monitor the job and to retrieve the job result\
    \ (output).\n\n#### Basic workflow:\n\nStart a job (POST endpoints) to return\
    \ a `jobExecId`\nPeriodically poll the `GET /{jobExecId}/output` endpoint to get\
    \ the job status for a given `jobExecId`\nWhen the status is `COMPLETED` or `FAILED`,\
    \ queries to the `GET /{jobExecId}/output` endpoint will also contain any output\
    \ (result/errors)\n\nTo retrieve more information about a job, such as start time\
    \ etc., use the `GET /{jobExecId}/info` endpoint.\n\n#### Available statuses:\n\
    \n- `STARTING`: initial job status\n- `RUNNING`: the job has successfully started\
    \ and is running\n- `COMPLETED` (terminal): the job has completed and the result\
    \ is available in the `GET /{jobExecId}/output` response\n- `FAILED` (terminal):\
    \ the job has failed, you can extract errors from the `GET /{jobExecId}/output`\
    \ response\n- `STOPPING`: a stop request has been initiated, the job is in the\
    \ process of stopping\n- `STOPPED` (terminal): the job has been stopped (it may\
    \ be able to be restarted)\n- `ABANDONED` (terminal): the job has been abandoned\
    \ for an unknown reason, please contact your system administrator.\n- `UNKNOWN`:\
    \ the job status is unknown, please contact your system administrator.\n"
  version: "default-released"
  title: "Job API"
host: "unused"
basePath: "/frontend/rs/genestack/job/default-released"
tags:
- name: "Data import jobs"
- name: "Job operations"
schemes:
- "https"
paths:
  /import/expression:
    post:
      tags:
      - "Data import jobs"
      summary: "Import any tabular data from TSV or GCT files"
      description: "## Data\n This operation necessitates the URL of a tabular data file, which must be either in\
        \ TSV or GCT 1.2 format. Consult the user guide for a comprehensive understanding of the file content\
        \ requirements. The endpoint is capable of handling uploads of any data type, which can be detailed in the\
        \ parameters section, not only Gene Expression data.\n\n\
        ## Metadata\n It is also possible to optionally supply the URL of a metadata file. This metadata will be used\
        \ as the original metadata for the created objects. The file is expected to contain single record with metadata\
        \ describing the uploaded signal file.\n\
        ## Metadata file format\n\
        \ * Extension: any, `.zip` and `.gz` extensions are treated as archives and get decompressed\n\
        \ * Format: plain text, Tab-separated format (TSV), attribute names and record values are separated  with tabs (`U+0009`),  lines are separated with `CRLF` sequence (`U+000D U+000A`)\n\
        \ * Header: the first line is treated as table header that contains attribute names\n\
        \ * Records: the second line contains the values for each of the attributes described in the header line.  Values represent single string or list of strings. List values are separated  using the \"pipe\" `|` (`U+007C`)  separator. Values are trimmed of whitespace before parsing, and a literal `|`  (`U+007C`) character may be escaped by repeating it twice.\n\
        \ * Skip zeros in original data file: If this option is selected, zeros in the file will be ignored, thus conserving time and space. This option is particularly useful for handling very sparse data such as Single Cell data."
      operationId: "startImportExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportExpressionSignalRunRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/flow-cytometry:
    post:
      tags:
      - "Data import jobs"
      summary: "Import flow-cytometry data and metadata from FACS and TSV files"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n    "
      operationId: "startImportFlowCytometry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportSignalRunRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/libraries:
    post:
      tags:
      - "Data import jobs"
      summary: "Import a group of library metadata objects from a TSV file"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportLibraries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportMetadataRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/preparations:
    post:
      tags:
      - "Data import jobs"
      summary: "Import a group of preparation metadata objects from a TSV file"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportPreparations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportMetadataRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/samples:
    post:
      tags:
      - "Data import jobs"
      summary: "Import a group of sample metadata objects from a TSV file"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportSamples"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportMetadataRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/study:
    post:
      tags:
      - "Data import jobs"
      summary: "Import study metadata from a TSV file"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n"
      operationId: "startImportStudy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportMetadataRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /import/variant:
    post:
      tags:
      - "Data import jobs"
      summary: "Import variation data and metadata from VCF and TSV files"
      description: "\nWhen job finishes successfully the following **result** object\
        \ can be obtained using `GET /job/{id}/output` request:\n\n```\n{\n    \"\
        groupAccession\": \"GSF1234567\"\n}\n```\n    "
      operationId: "startImportVariant"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportSignalRunRequest"
      - $ref: "#/parameters/AllowDuplicates"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /{jobExecId}/info:
    get:
      tags:
      - "Job operations"
      summary: "get information about one particular job execution"
      description: ""
      operationId: "info"
      produces:
      - "application/json"
      parameters:
      - name: "jobExecId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /{jobExecId}/output:
    get:
      tags:
      - "Job operations"
      summary: "retrieve job output (result)"
      description: ""
      operationId: "output"
      produces:
      - "application/json"
      parameters:
      - name: "jobExecId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Output"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /{jobExecId}/restart:
    put:
      tags:
      - "Job operations"
      summary: "restart stopped (failed) job"
      description: ""
      operationId: "restart"
      produces:
      - "application/json"
      parameters:
      - name: "jobExecId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /{jobExecId}/stop:
    put:
      tags:
      - "Job operations"
      summary: "stop running job"
      description: ""
      operationId: "stop"
      produces:
      - "application/json"
      parameters:
      - name: "jobExecId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      security:
      - Access-token: []
      - Genestack-API-Token: []
securityDefinitions:
  Access-token:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  Genestack-API-Token:
    type: "apiKey"
    name: "Genestack-API-Token"
    in: "header"
definitions:
  ExceptionTypeAndMessage:
    type: "object"
    properties:
      type:
        type: "string"
      message:
        type: "string"
  ImportMetadataRequest:
    type: "object"
    required:
    - "metadataLink"
    properties:
      source:
        type: "string"
        example: "HTTP"
        enum:
        - "ARVADOS"
        - "S3"
        - "HTTP"
      metadataLink:
        type: "string"
        example: "https://mybucket.s3.amazonaws.com/my-experiment/my-object-metadata.tsv"
      templateId:
        type: "string"
        example: "GSF334953"
  ImportSignalRunRequest:
    type: "object"
    required:
    - "dataLink"
    properties:
      source:
        type: "string"
        example: "HTTP"
        enum:
        - "ARVADOS"
        - "S3"
        - "HTTP"
      metadataLink:
        type: "string"
        example: "https://mybucket.s3.amazonaws.com/my-experiment/my-omics-metadata.tsv"
      dataLink:
        type: "string"
        example: "https://mybucket.s3.amazonaws.com/my-experiment/my-omics-data.gz"
      templateId:
        type: "string"
        example: "GSF334953"
      previousVersion:
        type: "string"
        example: "GSF334953"
    description: "import signal data request"
  ImportExpressionSignalRunRequest:
    allOf:
      - $ref: "#/definitions/ImportSignalRunRequest"
    properties:
      numberOfFeatureAttributes:
        type: "integer"
        example: 5
        description: "Integer value that specifies the number of columns related to the feature in the uploaded data frame, and indicates the starting position of the sample data. This attribute is not needed if the uploaded file is in GCT format."
      dataClass:
        type: "string"
        example: "Proteomics"
        description: "A mandatory parameter with the following possible values: `Bulk transcriptomics`, `Single-cell transcriptomics`, 
        `Differential abundance (FC, pval, etc.)`, `Pathway analysis`, `Proteomics`, `Single-cell proteomics`, `Metabolomics`, 
        `Epigenomics`, `DNA methylation`, `Chemoinformatics`, `Imaging features`, `Gene panel data`, `Biomarker data`, 
        `Physical measures`, `Blood counts`, `Other body fluid counts`, `Nanopore`, `Other`.
        \nIn case the parameter is not set the dataClass is automatically defined as `Other`."
      measurementSeparator:
        type: "string"
        example: ":"
        description: "This parameter is necessary when your file contains multiple measurement columns for each sample, 
        library, or preparation. It represents the character that distinguishes the sample/library/preparation name 
        from the measurement name in column headers. Supported separators include `. , : ; _ - / \\ |`, with the allowance 
        for multi-character separators."
  Info:
    type: "object"
    required:
    - "createTime"
    - "jobExecId"
    - "jobName"
    - "startedBy"
    - "status"
    properties:
      jobExecId:
        type: "integer"
        format: "int64"
        example: 12345
        description: "job execution id"
      startedBy:
        type: "string"
        example: "job@genestack.com"
        description: "user name who started the job"
      jobName:
        type: "string"
        example: "Protein folding"
        description: "actual job name"
      status:
        type: "string"
        example: "STARTED"
        description: "current job status"
        enum:
        - "COMPLETED"
        - "STARTING"
        - "RUNNING"
        - "STOPPING"
        - "STOPPED"
        - "FAILED"
        - "ABANDONED"
        - "UNKNOWN"
      createTime:
        type: "string"
        format: "date-time"
        example: "dd-MM-yyyy hh:mm:ss"
      endTime:
        type: "string"
        format: "date-time"
        example: "dd-MM-yyyy hh:mm:ss"
    description: "job execution information"
  JobRuntimeError:
    type: "object"
    properties:
      stage:
        type: "string"
      stack:
        type: "array"
        items:
          $ref: "#/definitions/ExceptionTypeAndMessage"
  Output:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        example: "COMPLETED"
        description: "current job status"
        enum:
        - "COMPLETED"
        - "STARTING"
        - "RUNNING"
        - "STOPPING"
        - "STOPPED"
        - "FAILED"
        - "ABANDONED"
        - "UNKNOWN"
      result:
        type: "object"
        description: "job result object (available if job completed successfully)"
      errors:
        type: "array"
        description: "array of errors occurred during execution of the job (available\
          \ if job failed)"
        items:
          $ref: "#/definitions/JobRuntimeError"
    description: "job execution output"
parameters:
  AllowDuplicates:
    in: query
    type: boolean
    required: false
    default: "false"
    name: "allow_dups"
    description: "Load duplicate data: the data from the links has already \
     been previously loaded into ODM, and for **testing purposes**, you need \
     to load this data again."
