---
swagger: "2.0"
info:
  description: "This swagger page describes the variantUser API endpoints for ODM.\
    \ These are typically used to find and retrieve variant data and metadata.\n\n\
    Before carrying out any API calls you will need an API token. API tokens can be\
    \ obtained under your profile within the Genestack software. Further instructions\
    \ can be found [here](https://odm-user-guide.readthedocs.io/en/latest/doc-odm-user-guide/getting-a-genestack-api-token.html).\n\
    \nTo try out calls in this swagger page:\n\n1.  Click the 'Authorize' button below\
    \ to enter your API token\n2.  Scroll to the 'Parameters' section for the method\
    \ you wish to try out and click the 'Try it out' button\n3.  Enter parameter values\
    \ that you wish to try\n4.  Scroll to the bottom of the Parameters section and\
    \ click the 'Execute' bar that appears\n\n\n The server response will be in the\
    \ section that follows."
  version: "default-released"
  title: "ODM API"
host: "unused"
tags:
- name: "Variant SPoT"
schemes:
- "https"
paths:
  /frontend/rs/genestack/variantUser/default-released/variant:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve multiple variant data and metadata objects"
      description: "Retrieve all variant data and metadata objects that match a query.\n\
        \n## Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor\
        \ performance reasons this endpoint returns results in \"pages\" of\
        \ limited size together with a `cursor` tag. To retrieve the next page\
        \ of results please supply this `cursor` tag to resume the query from\
        \ your previous result and get the next page. If there are no more\
        \ results you will just retrieve an empty result.\n\n"
      operationId: "getAllVariants"
      produces:
      - "application/json"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "filter"
        in: "query"
        description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source ID\"=\"HG00096\"\
          \  will be deprecated after June 2023"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        required: false
        type: "string"
      - name: "searchSpecificTerms"
        in: "query"
        description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        required: false
        type: "boolean"
      - name: "runFilter"
        in: "query"
        description: "Genestack accession that corresponds to the vcf column used\
          \ to link variants from the same run to a sample"
        required: false
        type: "string"
      - name: "infoFilter"
        in: "query"
        description: "Filter by vcf INFO field key=value(or range) pairs. Multiple\
          \ filters can be separated with semicolons. E.g. `AF=(0.8:0.95);VT=SNP'"
        required: false
        type: "string"
      - name: "genes"
        in: "query"
        description: "Specify a chromosome interval related with the genes list. Use\
          \ commas to specify multiple genes."
        required: false
        type: "string"
      - name: "interval"
        in: "query"
        description: "Specify a chromosome interval to find genes between these positions.\
          \ E.g. `2:233364596-233385916`. Use commas to specify multiple intervals."
        required: false
        type: "string"
      - name: "variationId"
        in: "query"
        description: "One or more specific variation IDs can be specified. E.g. `rs838705`\
          \ use `|` characters to specify mutliple IDs. "
        required: false
        type: "string"
      - name: "reference"
        in: "query"
        description: "Reference bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        required: false
        type: "string"
      - name: "alteration"
        in: "query"
        description: "Alternate bases, with multiple characters sepearated by `|`.\
          \ E.g. `CA|G`."
        required: false
        type: "string"
      - name: "alleles"
        in: "query"
        description: "The response can be filtered by number of affected alleles.\
          \ All objects which have a number of mutations that is equal or greater\
          \ than the supplied value will match the search criteria.\n\nFor example,\
          \ if you provide ‘1’, all variant objects which have mutations in 1, 2,\
          \ or more, alleles will be displayed in the response."
        required: false
        type: "string"
      - name: "quality"
        in: "query"
        description: "The objects can be filtered by quality value. Quality should\
          \ be entered as an interval in parentheses with the starting and ending\
          \ values are separated by a colon.\n\nFor example, if you enter (100:200),\
          \ variant objects with quality values greater than 100 and less than 200\
          \ will be shown in the response."
        required: false
        type: "string"
      - name: "useVersions"
        in: "query"
        description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        required: false
        type: "string"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      - name: "pageLimit"
        in: "query"
        description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        required: false
        type: "integer"
        format: "int32"
      - name: "cursor"
        in: "query"
        description: "The page tag to resume results from (see paging above)."
        required: false
        type: "string"
      responses:
        200:
          description: "Retrieved variant data."
          schema:
            $ref: "#/definitions/VariantResponse"
        400:
          description: "Variant data cannot be retrieved."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/group:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve groups that match a query"
      description: "Retrieve all group metadata objects that match a query.\n\n##\
        \ Metadata full-text queries\nSingle words can be supplied as is, otherwise\
        \ use speech marks (`\"`) to quote queries that include whitespace. Speech\
        \ marks and backslash characters in the query need to be escaped with a backslash\
        \ (`\\`).\n\n## Metadata filters\nMetadata filters are key-value pairs joined\
        \ by an operator. The `=` operator matches literal values/string. The `!=`\
        \ operator matches anything except the literal value/string. The `<` or `>`\
        \ operators match numerical results that are less or greater than the supplied\
        \ value. Strings containing whitespace need to be quoted with (`\"`).\n\n\
        ## Combinations\nMetadata queries/filters for the same parameter can be combined\
        \ with `&&`, `AND`, `||` and `OR` operators, using white-space to separate\
        \ out the terms and operators. Parentheses `( )` can be used for complex expressions.\n\
        \n## Versioning\nSpecific versions of omics data files (eg. GCT) can be queried\
        \ via the useVersions parameter. Different versions of an omics data file\
        \ are associated via their CHAIN_ID metadata value. This CHAIN_ID can be supplied\
        \ to the useVersions parameter along with the version number or specific omics\
        \ data file accessions to include them in the query. If nothing is supplied\
        \ to the useVersions parameter then only the active version (which is usually\
        \ the last one imported) is queried. This acts as a filter before the rest\
        \ of the query is carried out.\n\nExample usage:\nuseVersions=* (query all\
        \ versions, including those without CHAIN_IDs)\nuseVersions=v2 (query the\
        \ second version. If there is no second version then the data file is not\
        \ queried)\nuseVersions=v1,v0 (query the first version and any data files\
        \ without CHAIN_IDs(v0) )\nuseVersions=GSVC002:v3 (for omics data files with\
        \ a CHAIN_ID of GSCV002 query the third version)\nuseVersions=GSVC002:GSF00494,GSF000496\
        \ (for omics data files with a CHAIN_ID of GSCV002 query only the specific\
        \ accessions GSF00494 and GSF000496)\n\nRules for multiple CHAIN_IDs can be\
        \ supplied to the parameter using the ; separator.\n\n## Paging\nFor performance\
        \ reasons this endpoint returns results in \"pages\" of limited size. In order\
        \ to retrieve all matching results the client needs to request multiple pages\
        \ starting from an offset to the first result. You can do this using the pageOffset\
        \ query parameter. A value of 0 (the default) instructs the server to return\
        \ the first page of results, 100 would return a page of results starting from\
        \ the 101st result and so on. To return all results iterate through pages\
        \ using pageOffset values of `n*pageLimit` until the `resultsExhausted` response\
        \ field is true.\n\n## List operation\n\nThis endpoint can be called with\
        \ no `query` parameter. Doing so returns a list of all data objects."
      operationId: "searchGroups"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "filter"
        in: "query"
        description: "Filter by variant metadata (key-value metadata pair(s)). E.g.\
          \ `\"Variant Source\"=dbSNP`. Retrieving individual runs via \"Run Source ID\"=\"HG00096\"\
          \  will be deprecated after June 2023."
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Search for variant objects via a full text query over all variant\
          \ metadata. E.g. `dbSNP`. Queries matching dictionary terms are automatically\
          \ expanded to include synonyms."
        required: false
        type: "string"
      - name: "searchSpecificTerms"
        in: "query"
        description: "If the full-text query term is present in an ODM dictionary,\
          \ enabling this parameter will modify the query to include child terms of\
          \ the full-text query.\n\nFor example, the search query \"Body fluid\" can\
          \ be expanded to include the term \"Blood\" (a child term of  \"Body fluid\"\
          ) so files containing either \"Body fluid\" or  \"Blood\"  in their metadata\
          \ will be returned in the search results.\n\nThe parent-child relationship\
          \ is defined by the key \"broaders\" or \"subClassOf\" in the dictionary.\n\
          \nIf the full query term is not present in a dictionary then this parameter\
          \ has no effect."
        required: false
        type: "boolean"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      - name: "useVersions"
        in: "query"
        description: "Specify which versions of omics data files are used in the query.\
          \ By default the active version is used. See Versioning above. Syntax:\n\
          \n\\* or `v<version number>` or `<CHAIN_ID>`:`v<version number>` or `<CHAIN_ID>`:`<accession1,accession2,..>`"
        required: false
        type: "string"
      - name: "pageOffset"
        in: "query"
        description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        required: false
        type: "integer"
        format: "int32"
      - name: "pageLimit"
        in: "query"
        description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "The request was successful. The returned value is a list of\
            \ objects."
          schema:
            $ref: "#/definitions/ListResponse"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/group/by/run/{id}:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve a single group object by run ID (accession)"
      description: ""
      operationId: "getGroupByRun"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      responses:
        200:
          description: "The request was successful. The returned value is the object."
          schema:
            $ref: "#/definitions/MetadataWithId"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/group/{id}:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve a single group object by ID (accession)"
      description: ""
      operationId: "getGroup"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      responses:
        200:
          description: "The request was successful. The returned value is the object."
          schema:
            $ref: "#/definitions/MetadataWithId"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/runs/by/group/{id}:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve run objects related to the given group"
      description: "## Paging\nFor performance reasons this endpoint returns results\
        \ in \"pages\" of limited size. In order to retrieve all matching results\
        \ the client needs to request multiple pages starting from an offset to the\
        \ first result. You can do this using the pageOffset query parameter. A value\
        \ of 0 (the default) instructs the server to return the first page of results,\
        \ 100 would return a page of results starting from the 101st result and so\
        \ on. To return all results iterate through pages using pageOffset values\
        \ of `n * pageLimit` until the `resultsExhausted` response field is true.\n\
        \n"
      operationId: "searchRuns"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      - name: "pageOffset"
        in: "query"
        description: "Show the page {pageOffset+1} results from the start of the results.\
          \ E.g. 100 will show a page of results  starting from the 101st result.\
          \ The default value is 0."
        required: false
        type: "integer"
        format: "int32"
      - name: "pageLimit"
        in: "query"
        description: "Maximum number of results to return per page (see Paging above).\
          \ This value must be between 0 and 2000 (inclusive). The default is 2000."
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "The request was successful. The returned value is the object."
          schema:
            $ref: "#/definitions/ListResponse"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/{id}:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve a single variant object by ID (accession)"
      description: ""
      operationId: "getVariant"
      produces:
      - "application/json"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      responses:
        200:
          description: "The request was successful. The returned value is the object."
          schema:
            $ref: "#/definitions/VariantItem"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/{id}/versions:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve a list of object versions by ID"
      description: ""
      operationId: "getVariantVersions"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      responses:
        200:
          description: "The request was successful. The returned value is the list\
            \ of  object versions."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CommitInfo"
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
  /frontend/rs/genestack/variantUser/default-released/variant/{id}/versions/{version}:
    get:
      tags:
      - "Variant SPoT"
      summary: "Retrieve a single variant object by ID (accession)"
      description: ""
      operationId: "getVariantByVersion"
      produces:
      - "application/json"
      parameters:
      - name: "responseFormat"
        in: "query"
        description: "Supply this parameter with the value `term_id` as part of the\
          \ query to return extended information including IDs for values and dictionaries."
        required: false
        type: "string"
        enum:
        - "term_id"
      - name: "id"
        in: "path"
        description: "Unique identifier (accession) of the object."
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Unique version of the object."
        required: true
        type: "string"
      - name: "returnedMetadataFields"
        in: "query"
        description: "The parameter defines amount of metadata attributes to return:\n\
          \n1. `minimal_data` - return metadata attributes according to the default\
          \ template.\n2. `extended_data_included` - return metadata attributes according\
          \ to applied template, if object doesn’t have applied template, default\
          \ template will be used. This is the default for User endpoints.\n3. `original_data_included`\
          \ - return all metadata attributes with values and null attributes, if they\
          \ are present in the applied template. This is the default for Curator endpoints."
        required: false
        type: "string"
        enum:
        - "minimal_data"
        - "extended_data_included"
        - "original_data_included"
      responses:
        200:
          description: "The request was successful. The returned value is the object."
          schema:
            $ref: "#/definitions/SignalRun"
        400:
          description: "The supplied object ID is invalid."
        401:
          description: "User is not authenticated. Please supply a valid Access Token in\
            \ the `Authorization` HTTP header (e.g. Authorization: bearer [token])\n or \
            \ Genestack API token in the `Genestack-API-Token` header (this token may be\
            \ obtained from the Genestack UI _Profile_ page)."
        404:
          description: "No object exists with the given ID."
        500:
          description: "An internal server error occurred. This indicates an unexpected\
            \ failure in the Genestack system, please file a bug report to support@genestack.com,\
            \ including the error details."
      security:
      - Access-token: []
      - Genestack-API-Token: []
securityDefinitions:
  Access-token:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  Genestack-API-Token:
    type: "apiKey"
    name: "Genestack-API-Token"
    in: "header"
definitions:
  CommitInfo:
    type: "object"
    properties:
      author:
        type: "string"
      message:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
      version:
        type: "string"
        readOnly: true
  IntegrationHelper:
    type: "object"
  ListResponse:
    type: "object"
    properties:
      meta:
        $ref: "#/definitions/MetaResponse"
      data:
        type: "array"
        items:
          type: "object"
  MetaResponse:
    type: "object"
    properties:
      pagination:
        $ref: "#/definitions/PaginationInfo"
  MetadataContent:
    type: "object"
  MetadataWithId:
    type: "object"
    properties:
      itemId:
        type: "string"
        readOnly: true
      metadata:
        readOnly: true
        $ref: "#/definitions/MetadataContent"
  PaginationInfo:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int64"
      offset:
        type: "integer"
        format: "int32"
      limit:
        type: "integer"
        format: "int32"
  SignalRun:
    type: "object"
  VariantItem:
    type: "object"
    properties:
      itemId:
        type: "string"
        readOnly: true
      metadata:
        readOnly: true
        $ref: "#/definitions/MetadataContent"
      runId:
        type: "string"
        readOnly: true
      groupId:
        type: "string"
        readOnly: true
      contig:
        type: "string"
        readOnly: true
      start:
        type: "integer"
        format: "int64"
        readOnly: true
      reference:
        type: "string"
        readOnly: true
      alteration:
        type: "array"
        readOnly: true
        items:
          type: "string"
      variationId:
        type: "array"
        readOnly: true
        items:
          type: "string"
      info:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "array"
          items:
            type: "string"
      genotype:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "string"
  VariantResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/VariantItem"
      cursor:
        type: "string"
